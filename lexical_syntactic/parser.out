Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    RCURL
    SET
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program -> program_head SEMI program_body
Rule 3     program_head -> PROGRAM ID
Rule 4     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 5     idlist -> idlist COMMA ID
Rule 6     idlist -> ID
Rule 7     idlist -> idlist error ID
Rule 8     idlist -> ID error
Rule 9     program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement
Rule 10    type_declarations -> TYPE type_declaration SEMI
Rule 11    type_declarations -> empty
Rule 12    type_declaration -> ID EQU type
Rule 13    type_declaration -> ID EQU record_type
Rule 14    type_declaration -> type_declaration SEMI ID EQU type
Rule 15    type_declaration -> type_declaration SEMI ID EQU record_type
Rule 16    const_declarations -> CONST const_declaration SEMI
Rule 17    const_declarations -> empty
Rule 18    const_declaration -> ID EQU const_value
Rule 19    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 20    const_declaration -> ID EQU error ID
Rule 21    const_declaration -> const_declaration SEMI ID EQU error ID
Rule 22    const_value -> ADDOP ICONST
Rule 23    const_value -> ICONST
Rule 24    const_value -> RCONST
Rule 25    const_value -> CCONST
Rule 26    const_value -> BCONST
Rule 27    const_value -> string
Rule 28    var_declarations -> VAR var_declaration SEMI
Rule 29    var_declarations -> empty
Rule 30    var_declarations -> error var_declaration SEMI
Rule 31    var_declaration -> idlist COLON type
Rule 32    var_declaration -> var_declaration SEMI idlist COLON type
Rule 33    type -> basic_type
Rule 34    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 35    type -> ID
Rule 36    basic_type -> INTEGER
Rule 37    basic_type -> REAL
Rule 38    basic_type -> CHAR
Rule 39    basic_type -> BOOLEAN
Rule 40    basic_type -> TYPE_STRING
Rule 41    my_period_part -> ADDOP ICONST
Rule 42    my_period_part -> ICONST
Rule 43    my_period_part -> CCONST
Rule 44    my_period_part -> ID
Rule 45    period -> my_period_part DOTDOT my_period_part
Rule 46    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 47    period -> RCONST
Rule 48    period -> period COMMA RCONST
Rule 49    record_type -> RECORD field_declarations END
Rule 50    field_declarations -> field_declaration SEMI
Rule 51    field_declarations -> field_declarations field_declaration SEMI
Rule 52    field_declaration -> ID COLON type
Rule 53    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 54    subprogram_declarations -> empty
Rule 55    subprogram -> subprogram_head SEMI subprogram_body
Rule 56    subprogram_head -> PROCEDURE ID formal_parameter
Rule 57    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 58    formal_parameter -> LPAREN parameter_list RPAREN
Rule 59    formal_parameter -> empty
Rule 60    parameter_list -> parameter_list SEMI parameter
Rule 61    parameter_list -> parameter
Rule 62    parameter -> var_parameter
Rule 63    parameter -> value_parameter
Rule 64    var_parameter -> VAR value_parameter
Rule 65    value_parameter -> idlist COLON basic_type
Rule 66    value_parameter -> idlist error basic_type
Rule 67    subprogram_body -> const_declarations var_declarations compound_statement
Rule 68    compound_statement -> BEGIN statement_list END
Rule 69    statement_list -> statement_list SEMI statement
Rule 70    statement_list -> statement
Rule 71    statement -> empty
Rule 72    statement -> variable ASSIGN expression
Rule 73    statement -> procedure_call
Rule 74    statement -> compound_statement
Rule 75    statement -> IF expression THEN statement else_part
Rule 76    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 77    statement -> READ LPAREN variable_list RPAREN
Rule 78    statement -> WRITE LPAREN expression_list RPAREN
Rule 79    statement -> READLN LPAREN variable_list RPAREN
Rule 80    statement -> WRITELN LPAREN expression_list RPAREN
Rule 81    statement -> REPEAT statement_list UNTIL expression
Rule 82    statement -> WHILE expression DO statement
Rule 83    variable_list -> variable_list COMMA variable
Rule 84    variable_list -> variable
Rule 85    id_varpart -> LBRACK expression_list RBRACK id_varpart
Rule 86    id_varpart -> DOT ID id_varpart
Rule 87    id_varpart -> empty
Rule 88    variable -> ID id_varpart
Rule 89    procedure_call -> ID
Rule 90    procedure_call -> ID LPAREN expression_list RPAREN
Rule 91    else_part -> ELSE statement
Rule 92    else_part -> empty
Rule 93    expression_list -> expression_list COMMA expression
Rule 94    expression_list -> expression
Rule 95    expression -> simple_expression RELOP simple_expression
Rule 96    expression -> simple_expression EQU simple_expression
Rule 97    expression -> simple_expression
Rule 98    simple_expression -> simple_expression ADDOP term
Rule 99    simple_expression -> simple_expression OROP term
Rule 100   simple_expression -> term
Rule 101   term -> term MULDIVANDOP factor
Rule 102   term -> factor
Rule 103   factor -> const_value
Rule 104   factor -> variable
Rule 105   factor -> LPAREN expression RPAREN
Rule 106   factor -> ID LPAREN expression_list RPAREN
Rule 107   factor -> NOTOP factor
Rule 108   factor -> ADDOP factor
Rule 109   string -> STRING
Rule 110   empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 22 41 98 108
ARRAY                : 34
ASSIGN               : 72 76
BCONST               : 26
BEGIN                : 68
BOOLEAN              : 39
CCONST               : 25 43
CHAR                 : 38
COLON                : 31 32 52 57 65
COMMA                : 5 46 48 83 93
CONST                : 16
DO                   : 76 82
DOT                  : 1 86
DOTDOT               : 45 46
DOWNTO               : 
ELSE                 : 91
END                  : 49 68
EOF                  : 
EQU                  : 12 13 14 15 18 19 20 21 96
FOR                  : 76
FORWARD              : 
FUNCTION             : 57
ICONST               : 22 23 41 42
ID                   : 3 4 5 6 7 8 12 13 14 15 18 19 20 20 21 21 35 44 52 56 57 76 86 88 89 90 106
IF                   : 75
INOP                 : 
INTEGER              : 36
LBRACK               : 34 85
LCURL                : 
LPAREN               : 4 58 77 78 79 80 90 105 106
MULDIVANDOP          : 101
NOTOP                : 107
OF                   : 34
OROP                 : 99
PROCEDURE            : 56
PROGRAM              : 3 4
RBRACK               : 34 85
RCONST               : 24 47 48
RCURL                : 
READ                 : 77
READLN               : 79
REAL                 : 37
RECORD               : 49
RELOP                : 95
REPEAT               : 81
RPAREN               : 4 58 77 78 79 80 90 105 106
SEMI                 : 1 2 10 14 15 16 19 21 28 30 32 50 51 53 55 60 69
SET                  : 
STRING               : 109
THEN                 : 75
TO                   : 76
TYPE                 : 10
TYPE_STRING          : 40
UNTIL                : 81
VAR                  : 28 64
WHILE                : 82
WITH                 : 
WRITE                : 78
WRITELN              : 80
error                : 7 8 20 21 30 66

Nonterminals, with rules where they appear

basic_type           : 33 34 57 65 66
compound_statement   : 9 67 74
const_declaration    : 16 19 21
const_declarations   : 9 67
const_value          : 18 19 103
else_part            : 75
empty                : 11 17 29 54 59 71 87 92
expression           : 72 75 76 76 81 82 93 94 105
expression_list      : 78 80 85 90 93 106
factor               : 101 102 107 108
field_declaration    : 50 51
field_declarations   : 49 51
formal_parameter     : 56 57
id_varpart           : 85 86 88
idlist               : 4 5 7 31 32 65 66
my_period_part       : 45 45 46 46
parameter            : 60 61
parameter_list       : 58 60
period               : 34 46 48
procedure_call       : 73
program              : 0
program_body         : 1 2
program_head         : 1 2
record_type          : 13 15
simple_expression    : 95 95 96 96 97 98 99
statement            : 69 70 75 76 82 91
statement_list       : 68 69 81
string               : 27
subprogram           : 53
subprogram_body      : 55
subprogram_declarations : 9 53
subprogram_head      : 55
term                 : 98 99 100 101
type                 : 12 14 31 32 52
type_declaration     : 10 14 15
type_declarations    : 9
value_parameter      : 63 64
var_declaration      : 28 30 32
var_declarations     : 9 67
var_parameter        : 62
variable             : 72 83 84 104
variable_list        : 77 79 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program -> . program_head SEMI program_body
    (3) program_head -> . PROGRAM ID
    (4) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT
    (2) program -> program_head . SEMI program_body

    SEMI            shift and go to state 4


state 3

    (3) program_head -> PROGRAM . ID
    (4) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (2) program -> program_head SEMI . program_body
    (9) program_body -> . const_declarations type_declarations var_declarations subprogram_declarations compound_statement
    (16) const_declarations -> . CONST const_declaration SEMI
    (17) const_declarations -> . empty
    (110) empty -> .

    CONST           shift and go to state 8
    TYPE            reduce using rule 110 (empty -> .)
    VAR             reduce using rule 110 (empty -> .)
    error           reduce using rule 110 (empty -> .)
    BEGIN           reduce using rule 110 (empty -> .)
    PROCEDURE       reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (3) program_head -> PROGRAM ID .
    (4) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT
    (2) program -> program_head SEMI program_body .

    DOT             shift and go to state 11
    $end            reduce using rule 2 (program -> program_head SEMI program_body .)


state 7

    (9) program_body -> const_declarations . type_declarations var_declarations subprogram_declarations compound_statement
    (10) type_declarations -> . TYPE type_declaration SEMI
    (11) type_declarations -> . empty
    (110) empty -> .

    TYPE            shift and go to state 13
    VAR             reduce using rule 110 (empty -> .)
    error           reduce using rule 110 (empty -> .)
    BEGIN           reduce using rule 110 (empty -> .)
    PROCEDURE       reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)

    type_declarations              shift and go to state 12
    empty                          shift and go to state 14

state 8

    (16) const_declarations -> CONST . const_declaration SEMI
    (18) const_declaration -> . ID EQU const_value
    (19) const_declaration -> . const_declaration SEMI ID EQU const_value
    (20) const_declaration -> . ID EQU error ID
    (21) const_declaration -> . const_declaration SEMI ID EQU error ID

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (17) const_declarations -> empty .

    TYPE            reduce using rule 17 (const_declarations -> empty .)
    VAR             reduce using rule 17 (const_declarations -> empty .)
    error           reduce using rule 17 (const_declarations -> empty .)
    BEGIN           reduce using rule 17 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 17 (const_declarations -> empty .)
    FUNCTION        reduce using rule 17 (const_declarations -> empty .)


state 10

    (4) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (9) program_body -> const_declarations type_declarations . var_declarations subprogram_declarations compound_statement
    (28) var_declarations -> . VAR var_declaration SEMI
    (29) var_declarations -> . empty
    (30) var_declarations -> . error var_declaration SEMI
    (110) empty -> .

    VAR             shift and go to state 20
    error           shift and go to state 22
    BEGIN           reduce using rule 110 (empty -> .)
    PROCEDURE       reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)

    var_declarations               shift and go to state 19
    empty                          shift and go to state 21

state 13

    (10) type_declarations -> TYPE . type_declaration SEMI
    (12) type_declaration -> . ID EQU type
    (13) type_declaration -> . ID EQU record_type
    (14) type_declaration -> . type_declaration SEMI ID EQU type
    (15) type_declaration -> . type_declaration SEMI ID EQU record_type

    ID              shift and go to state 24

    type_declaration               shift and go to state 23

state 14

    (11) type_declarations -> empty .

    VAR             reduce using rule 11 (type_declarations -> empty .)
    error           reduce using rule 11 (type_declarations -> empty .)
    BEGIN           reduce using rule 11 (type_declarations -> empty .)
    PROCEDURE       reduce using rule 11 (type_declarations -> empty .)
    FUNCTION        reduce using rule 11 (type_declarations -> empty .)


state 15

    (16) const_declarations -> CONST const_declaration . SEMI
    (19) const_declaration -> const_declaration . SEMI ID EQU const_value
    (21) const_declaration -> const_declaration . SEMI ID EQU error ID

    SEMI            shift and go to state 25


state 16

    (18) const_declaration -> ID . EQU const_value
    (20) const_declaration -> ID . EQU error ID

    EQU             shift and go to state 26


state 17

    (6) idlist -> ID .
    (8) idlist -> ID . error

  ! shift/reduce conflict for error resolved as shift
    RPAREN          reduce using rule 6 (idlist -> ID .)
    COMMA           reduce using rule 6 (idlist -> ID .)
    COLON           reduce using rule 6 (idlist -> ID .)
    error           shift and go to state 27

  ! error           [ reduce using rule 6 (idlist -> ID .) ]


state 18

    (4) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    RPAREN          shift and go to state 28
    COMMA           shift and go to state 29
    error           shift and go to state 30


state 19

    (9) program_body -> const_declarations type_declarations var_declarations . subprogram_declarations compound_statement
    (53) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (54) subprogram_declarations -> . empty
    (110) empty -> .

    BEGIN           reduce using rule 110 (empty -> .)
    PROCEDURE       reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)

    subprogram_declarations        shift and go to state 31
    empty                          shift and go to state 32

state 20

    (28) var_declarations -> VAR . var_declaration SEMI
    (31) var_declaration -> . idlist COLON type
    (32) var_declaration -> . var_declaration SEMI idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 33
    idlist                         shift and go to state 34

state 21

    (29) var_declarations -> empty .

    BEGIN           reduce using rule 29 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 29 (var_declarations -> empty .)
    FUNCTION        reduce using rule 29 (var_declarations -> empty .)


state 22

    (30) var_declarations -> error . var_declaration SEMI
    (31) var_declaration -> . idlist COLON type
    (32) var_declaration -> . var_declaration SEMI idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 35
    idlist                         shift and go to state 34

state 23

    (10) type_declarations -> TYPE type_declaration . SEMI
    (14) type_declaration -> type_declaration . SEMI ID EQU type
    (15) type_declaration -> type_declaration . SEMI ID EQU record_type

    SEMI            shift and go to state 36


state 24

    (12) type_declaration -> ID . EQU type
    (13) type_declaration -> ID . EQU record_type

    EQU             shift and go to state 37


state 25

    (16) const_declarations -> CONST const_declaration SEMI .
    (19) const_declaration -> const_declaration SEMI . ID EQU const_value
    (21) const_declaration -> const_declaration SEMI . ID EQU error ID

    TYPE            reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    VAR             reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    error           reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 16 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 38


state 26

    (18) const_declaration -> ID EQU . const_value
    (20) const_declaration -> ID EQU . error ID
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (109) string -> . STRING

    error           shift and go to state 40
    ADDOP           shift and go to state 41
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    const_value                    shift and go to state 39
    string                         shift and go to state 46

state 27

    (8) idlist -> ID error .

    RPAREN          reduce using rule 8 (idlist -> ID error .)
    COMMA           reduce using rule 8 (idlist -> ID error .)
    error           reduce using rule 8 (idlist -> ID error .)
    COLON           reduce using rule 8 (idlist -> ID error .)


state 28

    (4) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 4 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 29

    (5) idlist -> idlist COMMA . ID

    ID              shift and go to state 48


state 30

    (7) idlist -> idlist error . ID

    ID              shift and go to state 49


state 31

    (9) program_body -> const_declarations type_declarations var_declarations subprogram_declarations . compound_statement
    (53) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (68) compound_statement -> . BEGIN statement_list END
    (55) subprogram -> . subprogram_head SEMI subprogram_body
    (56) subprogram_head -> . PROCEDURE ID formal_parameter
    (57) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 52
    PROCEDURE       shift and go to state 54
    FUNCTION        shift and go to state 55

    compound_statement             shift and go to state 50
    subprogram                     shift and go to state 51
    subprogram_head                shift and go to state 53

state 32

    (54) subprogram_declarations -> empty .

    BEGIN           reduce using rule 54 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 54 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 54 (subprogram_declarations -> empty .)


state 33

    (28) var_declarations -> VAR var_declaration . SEMI
    (32) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 56


state 34

    (31) var_declaration -> idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 57
    COMMA           shift and go to state 29
    error           shift and go to state 30


state 35

    (30) var_declarations -> error var_declaration . SEMI
    (32) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 58


state 36

    (10) type_declarations -> TYPE type_declaration SEMI .
    (14) type_declaration -> type_declaration SEMI . ID EQU type
    (15) type_declaration -> type_declaration SEMI . ID EQU record_type

    VAR             reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    error           reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    BEGIN           reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    PROCEDURE       reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    FUNCTION        reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    ID              shift and go to state 59


state 37

    (12) type_declaration -> ID EQU . type
    (13) type_declaration -> ID EQU . record_type
    (33) type -> . basic_type
    (34) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (35) type -> . ID
    (49) record_type -> . RECORD field_declarations END
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 64
    ID              shift and go to state 60
    RECORD          shift and go to state 65
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    type                           shift and go to state 61
    record_type                    shift and go to state 62
    basic_type                     shift and go to state 63

state 38

    (19) const_declaration -> const_declaration SEMI ID . EQU const_value
    (21) const_declaration -> const_declaration SEMI ID . EQU error ID

    EQU             shift and go to state 71


state 39

    (18) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 18 (const_declaration -> ID EQU const_value .)


state 40

    (20) const_declaration -> ID EQU error . ID

    ID              shift and go to state 72


state 41

    (22) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 73


state 42

    (23) const_value -> ICONST .

    SEMI            reduce using rule 23 (const_value -> ICONST .)
    MULDIVANDOP     reduce using rule 23 (const_value -> ICONST .)
    RELOP           reduce using rule 23 (const_value -> ICONST .)
    EQU             reduce using rule 23 (const_value -> ICONST .)
    ADDOP           reduce using rule 23 (const_value -> ICONST .)
    OROP            reduce using rule 23 (const_value -> ICONST .)
    THEN            reduce using rule 23 (const_value -> ICONST .)
    DO              reduce using rule 23 (const_value -> ICONST .)
    END             reduce using rule 23 (const_value -> ICONST .)
    UNTIL           reduce using rule 23 (const_value -> ICONST .)
    ELSE            reduce using rule 23 (const_value -> ICONST .)
    RPAREN          reduce using rule 23 (const_value -> ICONST .)
    COMMA           reduce using rule 23 (const_value -> ICONST .)
    RBRACK          reduce using rule 23 (const_value -> ICONST .)
    TO              reduce using rule 23 (const_value -> ICONST .)


state 43

    (24) const_value -> RCONST .

    SEMI            reduce using rule 24 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 24 (const_value -> RCONST .)
    RELOP           reduce using rule 24 (const_value -> RCONST .)
    EQU             reduce using rule 24 (const_value -> RCONST .)
    ADDOP           reduce using rule 24 (const_value -> RCONST .)
    OROP            reduce using rule 24 (const_value -> RCONST .)
    THEN            reduce using rule 24 (const_value -> RCONST .)
    DO              reduce using rule 24 (const_value -> RCONST .)
    END             reduce using rule 24 (const_value -> RCONST .)
    UNTIL           reduce using rule 24 (const_value -> RCONST .)
    ELSE            reduce using rule 24 (const_value -> RCONST .)
    RPAREN          reduce using rule 24 (const_value -> RCONST .)
    COMMA           reduce using rule 24 (const_value -> RCONST .)
    RBRACK          reduce using rule 24 (const_value -> RCONST .)
    TO              reduce using rule 24 (const_value -> RCONST .)


state 44

    (25) const_value -> CCONST .

    SEMI            reduce using rule 25 (const_value -> CCONST .)
    MULDIVANDOP     reduce using rule 25 (const_value -> CCONST .)
    RELOP           reduce using rule 25 (const_value -> CCONST .)
    EQU             reduce using rule 25 (const_value -> CCONST .)
    ADDOP           reduce using rule 25 (const_value -> CCONST .)
    OROP            reduce using rule 25 (const_value -> CCONST .)
    THEN            reduce using rule 25 (const_value -> CCONST .)
    DO              reduce using rule 25 (const_value -> CCONST .)
    END             reduce using rule 25 (const_value -> CCONST .)
    UNTIL           reduce using rule 25 (const_value -> CCONST .)
    ELSE            reduce using rule 25 (const_value -> CCONST .)
    RPAREN          reduce using rule 25 (const_value -> CCONST .)
    COMMA           reduce using rule 25 (const_value -> CCONST .)
    RBRACK          reduce using rule 25 (const_value -> CCONST .)
    TO              reduce using rule 25 (const_value -> CCONST .)


state 45

    (26) const_value -> BCONST .

    SEMI            reduce using rule 26 (const_value -> BCONST .)
    MULDIVANDOP     reduce using rule 26 (const_value -> BCONST .)
    RELOP           reduce using rule 26 (const_value -> BCONST .)
    EQU             reduce using rule 26 (const_value -> BCONST .)
    ADDOP           reduce using rule 26 (const_value -> BCONST .)
    OROP            reduce using rule 26 (const_value -> BCONST .)
    THEN            reduce using rule 26 (const_value -> BCONST .)
    DO              reduce using rule 26 (const_value -> BCONST .)
    END             reduce using rule 26 (const_value -> BCONST .)
    UNTIL           reduce using rule 26 (const_value -> BCONST .)
    ELSE            reduce using rule 26 (const_value -> BCONST .)
    RPAREN          reduce using rule 26 (const_value -> BCONST .)
    COMMA           reduce using rule 26 (const_value -> BCONST .)
    RBRACK          reduce using rule 26 (const_value -> BCONST .)
    TO              reduce using rule 26 (const_value -> BCONST .)


state 46

    (27) const_value -> string .

    SEMI            reduce using rule 27 (const_value -> string .)
    MULDIVANDOP     reduce using rule 27 (const_value -> string .)
    RELOP           reduce using rule 27 (const_value -> string .)
    EQU             reduce using rule 27 (const_value -> string .)
    ADDOP           reduce using rule 27 (const_value -> string .)
    OROP            reduce using rule 27 (const_value -> string .)
    THEN            reduce using rule 27 (const_value -> string .)
    DO              reduce using rule 27 (const_value -> string .)
    END             reduce using rule 27 (const_value -> string .)
    UNTIL           reduce using rule 27 (const_value -> string .)
    ELSE            reduce using rule 27 (const_value -> string .)
    RPAREN          reduce using rule 27 (const_value -> string .)
    COMMA           reduce using rule 27 (const_value -> string .)
    RBRACK          reduce using rule 27 (const_value -> string .)
    TO              reduce using rule 27 (const_value -> string .)


state 47

    (109) string -> STRING .

    SEMI            reduce using rule 109 (string -> STRING .)
    MULDIVANDOP     reduce using rule 109 (string -> STRING .)
    RELOP           reduce using rule 109 (string -> STRING .)
    EQU             reduce using rule 109 (string -> STRING .)
    ADDOP           reduce using rule 109 (string -> STRING .)
    OROP            reduce using rule 109 (string -> STRING .)
    THEN            reduce using rule 109 (string -> STRING .)
    DO              reduce using rule 109 (string -> STRING .)
    END             reduce using rule 109 (string -> STRING .)
    UNTIL           reduce using rule 109 (string -> STRING .)
    ELSE            reduce using rule 109 (string -> STRING .)
    RPAREN          reduce using rule 109 (string -> STRING .)
    COMMA           reduce using rule 109 (string -> STRING .)
    RBRACK          reduce using rule 109 (string -> STRING .)
    TO              reduce using rule 109 (string -> STRING .)


state 48

    (5) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 5 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 5 (idlist -> idlist COMMA ID .)
    error           reduce using rule 5 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 5 (idlist -> idlist COMMA ID .)


state 49

    (7) idlist -> idlist error ID .

    RPAREN          reduce using rule 7 (idlist -> idlist error ID .)
    COMMA           reduce using rule 7 (idlist -> idlist error ID .)
    error           reduce using rule 7 (idlist -> idlist error ID .)
    COLON           reduce using rule 7 (idlist -> idlist error ID .)


state 50

    (9) program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 9 (program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .)
    $end            reduce using rule 9 (program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .)


state 51

    (53) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 74


state 52

    (68) compound_statement -> BEGIN . statement_list END
    (69) statement_list -> . statement_list SEMI statement
    (70) statement_list -> . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement_list                 shift and go to state 75
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 53

    (55) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 90


state 54

    (56) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 91


state 55

    (57) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 92


state 56

    (28) var_declarations -> VAR var_declaration SEMI .
    (32) var_declaration -> var_declaration SEMI . idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    BEGIN           reduce using rule 28 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 28 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 28 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 93

state 57

    (31) var_declaration -> idlist COLON . type
    (33) type -> . basic_type
    (34) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (35) type -> . ID
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 64
    ID              shift and go to state 60
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    type                           shift and go to state 94
    basic_type                     shift and go to state 63

state 58

    (30) var_declarations -> error var_declaration SEMI .
    (32) var_declaration -> var_declaration SEMI . idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    BEGIN           reduce using rule 30 (var_declarations -> error var_declaration SEMI .)
    PROCEDURE       reduce using rule 30 (var_declarations -> error var_declaration SEMI .)
    FUNCTION        reduce using rule 30 (var_declarations -> error var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 93

state 59

    (14) type_declaration -> type_declaration SEMI ID . EQU type
    (15) type_declaration -> type_declaration SEMI ID . EQU record_type

    EQU             shift and go to state 95


state 60

    (35) type -> ID .

    SEMI            reduce using rule 35 (type -> ID .)


state 61

    (12) type_declaration -> ID EQU type .

    SEMI            reduce using rule 12 (type_declaration -> ID EQU type .)


state 62

    (13) type_declaration -> ID EQU record_type .

    SEMI            reduce using rule 13 (type_declaration -> ID EQU record_type .)


state 63

    (33) type -> basic_type .

    SEMI            reduce using rule 33 (type -> basic_type .)


state 64

    (34) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 96


state 65

    (49) record_type -> RECORD . field_declarations END
    (50) field_declarations -> . field_declaration SEMI
    (51) field_declarations -> . field_declarations field_declaration SEMI
    (52) field_declaration -> . ID COLON type

    ID              shift and go to state 99

    field_declarations             shift and go to state 97
    field_declaration              shift and go to state 98

state 66

    (36) basic_type -> INTEGER .

    SEMI            reduce using rule 36 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 36 (basic_type -> INTEGER .)


state 67

    (37) basic_type -> REAL .

    SEMI            reduce using rule 37 (basic_type -> REAL .)
    RPAREN          reduce using rule 37 (basic_type -> REAL .)


state 68

    (38) basic_type -> CHAR .

    SEMI            reduce using rule 38 (basic_type -> CHAR .)
    RPAREN          reduce using rule 38 (basic_type -> CHAR .)


state 69

    (39) basic_type -> BOOLEAN .

    SEMI            reduce using rule 39 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 39 (basic_type -> BOOLEAN .)


state 70

    (40) basic_type -> TYPE_STRING .

    SEMI            reduce using rule 40 (basic_type -> TYPE_STRING .)
    RPAREN          reduce using rule 40 (basic_type -> TYPE_STRING .)


state 71

    (19) const_declaration -> const_declaration SEMI ID EQU . const_value
    (21) const_declaration -> const_declaration SEMI ID EQU . error ID
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (109) string -> . STRING

    error           shift and go to state 101
    ADDOP           shift and go to state 41
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    const_value                    shift and go to state 100
    string                         shift and go to state 46

state 72

    (20) const_declaration -> ID EQU error ID .

    SEMI            reduce using rule 20 (const_declaration -> ID EQU error ID .)


state 73

    (22) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 22 (const_value -> ADDOP ICONST .)


state 74

    (53) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 53 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 53 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 53 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 75

    (68) compound_statement -> BEGIN statement_list . END
    (69) statement_list -> statement_list . SEMI statement

    END             shift and go to state 102
    SEMI            shift and go to state 103


state 76

    (70) statement_list -> statement .

    END             reduce using rule 70 (statement_list -> statement .)
    SEMI            reduce using rule 70 (statement_list -> statement .)
    UNTIL           reduce using rule 70 (statement_list -> statement .)


state 77

    (71) statement -> empty .

    END             reduce using rule 71 (statement -> empty .)
    SEMI            reduce using rule 71 (statement -> empty .)
    UNTIL           reduce using rule 71 (statement -> empty .)
    ELSE            reduce using rule 71 (statement -> empty .)


state 78

    (72) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 104


state 79

    (73) statement -> procedure_call .

    END             reduce using rule 73 (statement -> procedure_call .)
    SEMI            reduce using rule 73 (statement -> procedure_call .)
    UNTIL           reduce using rule 73 (statement -> procedure_call .)
    ELSE            reduce using rule 73 (statement -> procedure_call .)


state 80

    (74) statement -> compound_statement .

    END             reduce using rule 74 (statement -> compound_statement .)
    SEMI            reduce using rule 74 (statement -> compound_statement .)
    UNTIL           reduce using rule 74 (statement -> compound_statement .)
    ELSE            reduce using rule 74 (statement -> compound_statement .)


state 81

    (75) statement -> IF . expression THEN statement else_part
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 105
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 82

    (76) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 115


state 83

    (88) variable -> ID . id_varpart
    (89) procedure_call -> ID .
    (90) procedure_call -> ID . LPAREN expression_list RPAREN
    (85) id_varpart -> . LBRACK expression_list RBRACK id_varpart
    (86) id_varpart -> . DOT ID id_varpart
    (87) id_varpart -> . empty
    (110) empty -> .

    END             reduce using rule 89 (procedure_call -> ID .)
    SEMI            reduce using rule 89 (procedure_call -> ID .)
    UNTIL           reduce using rule 89 (procedure_call -> ID .)
    ELSE            reduce using rule 89 (procedure_call -> ID .)
    LPAREN          shift and go to state 117
    LBRACK          shift and go to state 118
    DOT             shift and go to state 119
    ASSIGN          reduce using rule 110 (empty -> .)

    id_varpart                     shift and go to state 116
    empty                          shift and go to state 120

state 84

    (77) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 121


state 85

    (78) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 122


state 86

    (79) statement -> READLN . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 123


state 87

    (80) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 124


state 88

    (81) statement -> REPEAT . statement_list UNTIL expression
    (69) statement_list -> . statement_list SEMI statement
    (70) statement_list -> . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement_list                 shift and go to state 125
    statement                      shift and go to state 76
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 89

    (82) statement -> WHILE . expression DO statement
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 126
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 90

    (55) subprogram -> subprogram_head SEMI . subprogram_body
    (67) subprogram_body -> . const_declarations var_declarations compound_statement
    (16) const_declarations -> . CONST const_declaration SEMI
    (17) const_declarations -> . empty
    (110) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 110 (empty -> .)
    error           reduce using rule 110 (empty -> .)
    BEGIN           reduce using rule 110 (empty -> .)

    subprogram_body                shift and go to state 127
    const_declarations             shift and go to state 128
    empty                          shift and go to state 9

state 91

    (56) subprogram_head -> PROCEDURE ID . formal_parameter
    (58) formal_parameter -> . LPAREN parameter_list RPAREN
    (59) formal_parameter -> . empty
    (110) empty -> .

    LPAREN          shift and go to state 130
    SEMI            reduce using rule 110 (empty -> .)

    formal_parameter               shift and go to state 129
    empty                          shift and go to state 131

state 92

    (57) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (58) formal_parameter -> . LPAREN parameter_list RPAREN
    (59) formal_parameter -> . empty
    (110) empty -> .

    LPAREN          shift and go to state 130
    COLON           reduce using rule 110 (empty -> .)

    formal_parameter               shift and go to state 132
    empty                          shift and go to state 131

state 93

    (32) var_declaration -> var_declaration SEMI idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 133
    COMMA           shift and go to state 29
    error           shift and go to state 30


state 94

    (31) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 31 (var_declaration -> idlist COLON type .)


state 95

    (14) type_declaration -> type_declaration SEMI ID EQU . type
    (15) type_declaration -> type_declaration SEMI ID EQU . record_type
    (33) type -> . basic_type
    (34) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (35) type -> . ID
    (49) record_type -> . RECORD field_declarations END
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 64
    ID              shift and go to state 60
    RECORD          shift and go to state 65
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    type                           shift and go to state 134
    record_type                    shift and go to state 135
    basic_type                     shift and go to state 63

state 96

    (34) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (45) period -> . my_period_part DOTDOT my_period_part
    (46) period -> . period COMMA my_period_part DOTDOT my_period_part
    (47) period -> . RCONST
    (48) period -> . period COMMA RCONST
    (41) my_period_part -> . ADDOP ICONST
    (42) my_period_part -> . ICONST
    (43) my_period_part -> . CCONST
    (44) my_period_part -> . ID

    RCONST          shift and go to state 138
    ADDOP           shift and go to state 139
    ICONST          shift and go to state 140
    CCONST          shift and go to state 141
    ID              shift and go to state 142

    period                         shift and go to state 136
    my_period_part                 shift and go to state 137

state 97

    (49) record_type -> RECORD field_declarations . END
    (51) field_declarations -> field_declarations . field_declaration SEMI
    (52) field_declaration -> . ID COLON type

    END             shift and go to state 143
    ID              shift and go to state 99

    field_declaration              shift and go to state 144

state 98

    (50) field_declarations -> field_declaration . SEMI

    SEMI            shift and go to state 145


state 99

    (52) field_declaration -> ID . COLON type

    COLON           shift and go to state 146


state 100

    (19) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 19 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 101

    (21) const_declaration -> const_declaration SEMI ID EQU error . ID

    ID              shift and go to state 147


state 102

    (68) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 68 (compound_statement -> BEGIN statement_list END .)
    $end            reduce using rule 68 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 68 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 68 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 68 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 68 (compound_statement -> BEGIN statement_list END .)


state 103

    (69) statement_list -> statement_list SEMI . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement                      shift and go to state 148
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 104

    (72) statement -> variable ASSIGN . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    variable                       shift and go to state 111
    expression                     shift and go to state 149
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    string                         shift and go to state 46

state 105

    (75) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 150


state 106

    (95) expression -> simple_expression . RELOP simple_expression
    (96) expression -> simple_expression . EQU simple_expression
    (97) expression -> simple_expression .
    (98) simple_expression -> simple_expression . ADDOP term
    (99) simple_expression -> simple_expression . OROP term

    RELOP           shift and go to state 151
    EQU             shift and go to state 152
    THEN            reduce using rule 97 (expression -> simple_expression .)
    DO              reduce using rule 97 (expression -> simple_expression .)
    END             reduce using rule 97 (expression -> simple_expression .)
    SEMI            reduce using rule 97 (expression -> simple_expression .)
    UNTIL           reduce using rule 97 (expression -> simple_expression .)
    ELSE            reduce using rule 97 (expression -> simple_expression .)
    RPAREN          reduce using rule 97 (expression -> simple_expression .)
    COMMA           reduce using rule 97 (expression -> simple_expression .)
    RBRACK          reduce using rule 97 (expression -> simple_expression .)
    TO              reduce using rule 97 (expression -> simple_expression .)
    ADDOP           shift and go to state 153
    OROP            shift and go to state 154


state 107

    (108) factor -> ADDOP . factor
    (22) const_value -> ADDOP . ICONST
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    ICONST          shift and go to state 156
    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    factor                         shift and go to state 155
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 108

    (100) simple_expression -> term .
    (101) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 100 (simple_expression -> term .)
    EQU             reduce using rule 100 (simple_expression -> term .)
    ADDOP           reduce using rule 100 (simple_expression -> term .)
    OROP            reduce using rule 100 (simple_expression -> term .)
    THEN            reduce using rule 100 (simple_expression -> term .)
    DO              reduce using rule 100 (simple_expression -> term .)
    END             reduce using rule 100 (simple_expression -> term .)
    SEMI            reduce using rule 100 (simple_expression -> term .)
    UNTIL           reduce using rule 100 (simple_expression -> term .)
    ELSE            reduce using rule 100 (simple_expression -> term .)
    RPAREN          reduce using rule 100 (simple_expression -> term .)
    COMMA           reduce using rule 100 (simple_expression -> term .)
    RBRACK          reduce using rule 100 (simple_expression -> term .)
    TO              reduce using rule 100 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 157


state 109

    (102) term -> factor .

    MULDIVANDOP     reduce using rule 102 (term -> factor .)
    RELOP           reduce using rule 102 (term -> factor .)
    EQU             reduce using rule 102 (term -> factor .)
    ADDOP           reduce using rule 102 (term -> factor .)
    OROP            reduce using rule 102 (term -> factor .)
    THEN            reduce using rule 102 (term -> factor .)
    DO              reduce using rule 102 (term -> factor .)
    END             reduce using rule 102 (term -> factor .)
    SEMI            reduce using rule 102 (term -> factor .)
    UNTIL           reduce using rule 102 (term -> factor .)
    ELSE            reduce using rule 102 (term -> factor .)
    RPAREN          reduce using rule 102 (term -> factor .)
    COMMA           reduce using rule 102 (term -> factor .)
    RBRACK          reduce using rule 102 (term -> factor .)
    TO              reduce using rule 102 (term -> factor .)


state 110

    (103) factor -> const_value .

    MULDIVANDOP     reduce using rule 103 (factor -> const_value .)
    RELOP           reduce using rule 103 (factor -> const_value .)
    EQU             reduce using rule 103 (factor -> const_value .)
    ADDOP           reduce using rule 103 (factor -> const_value .)
    OROP            reduce using rule 103 (factor -> const_value .)
    THEN            reduce using rule 103 (factor -> const_value .)
    DO              reduce using rule 103 (factor -> const_value .)
    END             reduce using rule 103 (factor -> const_value .)
    SEMI            reduce using rule 103 (factor -> const_value .)
    UNTIL           reduce using rule 103 (factor -> const_value .)
    ELSE            reduce using rule 103 (factor -> const_value .)
    RPAREN          reduce using rule 103 (factor -> const_value .)
    COMMA           reduce using rule 103 (factor -> const_value .)
    RBRACK          reduce using rule 103 (factor -> const_value .)
    TO              reduce using rule 103 (factor -> const_value .)


state 111

    (104) factor -> variable .

    MULDIVANDOP     reduce using rule 104 (factor -> variable .)
    RELOP           reduce using rule 104 (factor -> variable .)
    EQU             reduce using rule 104 (factor -> variable .)
    ADDOP           reduce using rule 104 (factor -> variable .)
    OROP            reduce using rule 104 (factor -> variable .)
    THEN            reduce using rule 104 (factor -> variable .)
    DO              reduce using rule 104 (factor -> variable .)
    END             reduce using rule 104 (factor -> variable .)
    SEMI            reduce using rule 104 (factor -> variable .)
    UNTIL           reduce using rule 104 (factor -> variable .)
    ELSE            reduce using rule 104 (factor -> variable .)
    RPAREN          reduce using rule 104 (factor -> variable .)
    COMMA           reduce using rule 104 (factor -> variable .)
    RBRACK          reduce using rule 104 (factor -> variable .)
    TO              reduce using rule 104 (factor -> variable .)


state 112

    (105) factor -> LPAREN . expression RPAREN
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 158
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 113

    (106) factor -> ID . LPAREN expression_list RPAREN
    (88) variable -> ID . id_varpart
    (85) id_varpart -> . LBRACK expression_list RBRACK id_varpart
    (86) id_varpart -> . DOT ID id_varpart
    (87) id_varpart -> . empty
    (110) empty -> .

    LPAREN          shift and go to state 159
    LBRACK          shift and go to state 118
    DOT             shift and go to state 119
    MULDIVANDOP     reduce using rule 110 (empty -> .)
    RELOP           reduce using rule 110 (empty -> .)
    EQU             reduce using rule 110 (empty -> .)
    ADDOP           reduce using rule 110 (empty -> .)
    OROP            reduce using rule 110 (empty -> .)
    THEN            reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RBRACK          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    id_varpart                     shift and go to state 116
    empty                          shift and go to state 120

state 114

    (107) factor -> NOTOP . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    factor                         shift and go to state 160
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 115

    (76) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 161


state 116

    (88) variable -> ID id_varpart .

    ASSIGN          reduce using rule 88 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 88 (variable -> ID id_varpart .)
    RELOP           reduce using rule 88 (variable -> ID id_varpart .)
    EQU             reduce using rule 88 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 88 (variable -> ID id_varpart .)
    OROP            reduce using rule 88 (variable -> ID id_varpart .)
    THEN            reduce using rule 88 (variable -> ID id_varpart .)
    DO              reduce using rule 88 (variable -> ID id_varpart .)
    END             reduce using rule 88 (variable -> ID id_varpart .)
    SEMI            reduce using rule 88 (variable -> ID id_varpart .)
    UNTIL           reduce using rule 88 (variable -> ID id_varpart .)
    ELSE            reduce using rule 88 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 88 (variable -> ID id_varpart .)
    COMMA           reduce using rule 88 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 88 (variable -> ID id_varpart .)
    TO              reduce using rule 88 (variable -> ID id_varpart .)


state 117

    (90) procedure_call -> ID LPAREN . expression_list RPAREN
    (93) expression_list -> . expression_list COMMA expression
    (94) expression_list -> . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression_list                shift and go to state 162
    expression                     shift and go to state 163
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 118

    (85) id_varpart -> LBRACK . expression_list RBRACK id_varpart
    (93) expression_list -> . expression_list COMMA expression
    (94) expression_list -> . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression_list                shift and go to state 164
    expression                     shift and go to state 163
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 119

    (86) id_varpart -> DOT . ID id_varpart

    ID              shift and go to state 165


state 120

    (87) id_varpart -> empty .

    ASSIGN          reduce using rule 87 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 87 (id_varpart -> empty .)
    RELOP           reduce using rule 87 (id_varpart -> empty .)
    EQU             reduce using rule 87 (id_varpart -> empty .)
    ADDOP           reduce using rule 87 (id_varpart -> empty .)
    OROP            reduce using rule 87 (id_varpart -> empty .)
    THEN            reduce using rule 87 (id_varpart -> empty .)
    DO              reduce using rule 87 (id_varpart -> empty .)
    END             reduce using rule 87 (id_varpart -> empty .)
    SEMI            reduce using rule 87 (id_varpart -> empty .)
    UNTIL           reduce using rule 87 (id_varpart -> empty .)
    ELSE            reduce using rule 87 (id_varpart -> empty .)
    RPAREN          reduce using rule 87 (id_varpart -> empty .)
    COMMA           reduce using rule 87 (id_varpart -> empty .)
    RBRACK          reduce using rule 87 (id_varpart -> empty .)
    TO              reduce using rule 87 (id_varpart -> empty .)


state 121

    (77) statement -> READ LPAREN . variable_list RPAREN
    (83) variable_list -> . variable_list COMMA variable
    (84) variable_list -> . variable
    (88) variable -> . ID id_varpart

    ID              shift and go to state 168

    variable_list                  shift and go to state 166
    variable                       shift and go to state 167

state 122

    (78) statement -> WRITE LPAREN . expression_list RPAREN
    (93) expression_list -> . expression_list COMMA expression
    (94) expression_list -> . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression_list                shift and go to state 169
    expression                     shift and go to state 163
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 123

    (79) statement -> READLN LPAREN . variable_list RPAREN
    (83) variable_list -> . variable_list COMMA variable
    (84) variable_list -> . variable
    (88) variable -> . ID id_varpart

    ID              shift and go to state 168

    variable_list                  shift and go to state 170
    variable                       shift and go to state 167

state 124

    (80) statement -> WRITELN LPAREN . expression_list RPAREN
    (93) expression_list -> . expression_list COMMA expression
    (94) expression_list -> . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression_list                shift and go to state 171
    expression                     shift and go to state 163
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 125

    (81) statement -> REPEAT statement_list . UNTIL expression
    (69) statement_list -> statement_list . SEMI statement

    UNTIL           shift and go to state 172
    SEMI            shift and go to state 103


state 126

    (82) statement -> WHILE expression . DO statement

    DO              shift and go to state 173


state 127

    (55) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 55 (subprogram -> subprogram_head SEMI subprogram_body .)


state 128

    (67) subprogram_body -> const_declarations . var_declarations compound_statement
    (28) var_declarations -> . VAR var_declaration SEMI
    (29) var_declarations -> . empty
    (30) var_declarations -> . error var_declaration SEMI
    (110) empty -> .

    VAR             shift and go to state 20
    error           shift and go to state 22
    BEGIN           reduce using rule 110 (empty -> .)

    var_declarations               shift and go to state 174
    empty                          shift and go to state 21

state 129

    (56) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 56 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 130

    (58) formal_parameter -> LPAREN . parameter_list RPAREN
    (60) parameter_list -> . parameter_list SEMI parameter
    (61) parameter_list -> . parameter
    (62) parameter -> . var_parameter
    (63) parameter -> . value_parameter
    (64) var_parameter -> . VAR value_parameter
    (65) value_parameter -> . idlist COLON basic_type
    (66) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 179
    ID              shift and go to state 17

    parameter_list                 shift and go to state 175
    parameter                      shift and go to state 176
    var_parameter                  shift and go to state 177
    value_parameter                shift and go to state 178
    idlist                         shift and go to state 180

state 131

    (59) formal_parameter -> empty .

    SEMI            reduce using rule 59 (formal_parameter -> empty .)
    COLON           reduce using rule 59 (formal_parameter -> empty .)


state 132

    (57) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 181


state 133

    (32) var_declaration -> var_declaration SEMI idlist COLON . type
    (33) type -> . basic_type
    (34) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (35) type -> . ID
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 64
    ID              shift and go to state 60
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    type                           shift and go to state 182
    basic_type                     shift and go to state 63

state 134

    (14) type_declaration -> type_declaration SEMI ID EQU type .

    SEMI            reduce using rule 14 (type_declaration -> type_declaration SEMI ID EQU type .)


state 135

    (15) type_declaration -> type_declaration SEMI ID EQU record_type .

    SEMI            reduce using rule 15 (type_declaration -> type_declaration SEMI ID EQU record_type .)


state 136

    (34) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (46) period -> period . COMMA my_period_part DOTDOT my_period_part
    (48) period -> period . COMMA RCONST

    RBRACK          shift and go to state 183
    COMMA           shift and go to state 184


state 137

    (45) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 185


state 138

    (47) period -> RCONST .

    RBRACK          reduce using rule 47 (period -> RCONST .)
    COMMA           reduce using rule 47 (period -> RCONST .)


state 139

    (41) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 186


state 140

    (42) my_period_part -> ICONST .

    DOTDOT          reduce using rule 42 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 42 (my_period_part -> ICONST .)
    COMMA           reduce using rule 42 (my_period_part -> ICONST .)


state 141

    (43) my_period_part -> CCONST .

    DOTDOT          reduce using rule 43 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 43 (my_period_part -> CCONST .)
    COMMA           reduce using rule 43 (my_period_part -> CCONST .)


state 142

    (44) my_period_part -> ID .

    DOTDOT          reduce using rule 44 (my_period_part -> ID .)
    RBRACK          reduce using rule 44 (my_period_part -> ID .)
    COMMA           reduce using rule 44 (my_period_part -> ID .)


state 143

    (49) record_type -> RECORD field_declarations END .

    SEMI            reduce using rule 49 (record_type -> RECORD field_declarations END .)


state 144

    (51) field_declarations -> field_declarations field_declaration . SEMI

    SEMI            shift and go to state 187


state 145

    (50) field_declarations -> field_declaration SEMI .

    END             reduce using rule 50 (field_declarations -> field_declaration SEMI .)
    ID              reduce using rule 50 (field_declarations -> field_declaration SEMI .)


state 146

    (52) field_declaration -> ID COLON . type
    (33) type -> . basic_type
    (34) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (35) type -> . ID
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 64
    ID              shift and go to state 60
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    type                           shift and go to state 188
    basic_type                     shift and go to state 63

state 147

    (21) const_declaration -> const_declaration SEMI ID EQU error ID .

    SEMI            reduce using rule 21 (const_declaration -> const_declaration SEMI ID EQU error ID .)


state 148

    (69) statement_list -> statement_list SEMI statement .

    END             reduce using rule 69 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 69 (statement_list -> statement_list SEMI statement .)
    UNTIL           reduce using rule 69 (statement_list -> statement_list SEMI statement .)


state 149

    (72) statement -> variable ASSIGN expression .

    END             reduce using rule 72 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 72 (statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 72 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 72 (statement -> variable ASSIGN expression .)


state 150

    (75) statement -> IF expression THEN . statement else_part
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement                      shift and go to state 189
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 151

    (95) expression -> simple_expression RELOP . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    simple_expression              shift and go to state 190
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 152

    (96) expression -> simple_expression EQU . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    simple_expression              shift and go to state 191
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 153

    (98) simple_expression -> simple_expression ADDOP . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    term                           shift and go to state 192
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 154

    (99) simple_expression -> simple_expression OROP . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    term                           shift and go to state 193
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 155

    (108) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 108 (factor -> ADDOP factor .)
    RELOP           reduce using rule 108 (factor -> ADDOP factor .)
    EQU             reduce using rule 108 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 108 (factor -> ADDOP factor .)
    OROP            reduce using rule 108 (factor -> ADDOP factor .)
    THEN            reduce using rule 108 (factor -> ADDOP factor .)
    DO              reduce using rule 108 (factor -> ADDOP factor .)
    END             reduce using rule 108 (factor -> ADDOP factor .)
    SEMI            reduce using rule 108 (factor -> ADDOP factor .)
    UNTIL           reduce using rule 108 (factor -> ADDOP factor .)
    ELSE            reduce using rule 108 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 108 (factor -> ADDOP factor .)
    COMMA           reduce using rule 108 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 108 (factor -> ADDOP factor .)
    TO              reduce using rule 108 (factor -> ADDOP factor .)


state 156

    (22) const_value -> ADDOP ICONST .
    (23) const_value -> ICONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for EQU resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for OROP resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for THEN resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for DO resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for END resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for UNTIL resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 22 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for TO resolved using rule 22 (const_value -> ADDOP ICONST .)
    MULDIVANDOP     reduce using rule 22 (const_value -> ADDOP ICONST .)
    RELOP           reduce using rule 22 (const_value -> ADDOP ICONST .)
    EQU             reduce using rule 22 (const_value -> ADDOP ICONST .)
    ADDOP           reduce using rule 22 (const_value -> ADDOP ICONST .)
    OROP            reduce using rule 22 (const_value -> ADDOP ICONST .)
    THEN            reduce using rule 22 (const_value -> ADDOP ICONST .)
    DO              reduce using rule 22 (const_value -> ADDOP ICONST .)
    END             reduce using rule 22 (const_value -> ADDOP ICONST .)
    SEMI            reduce using rule 22 (const_value -> ADDOP ICONST .)
    UNTIL           reduce using rule 22 (const_value -> ADDOP ICONST .)
    ELSE            reduce using rule 22 (const_value -> ADDOP ICONST .)
    RPAREN          reduce using rule 22 (const_value -> ADDOP ICONST .)
    COMMA           reduce using rule 22 (const_value -> ADDOP ICONST .)
    RBRACK          reduce using rule 22 (const_value -> ADDOP ICONST .)
    TO              reduce using rule 22 (const_value -> ADDOP ICONST .)

  ! MULDIVANDOP     [ reduce using rule 23 (const_value -> ICONST .) ]
  ! RELOP           [ reduce using rule 23 (const_value -> ICONST .) ]
  ! EQU             [ reduce using rule 23 (const_value -> ICONST .) ]
  ! ADDOP           [ reduce using rule 23 (const_value -> ICONST .) ]
  ! OROP            [ reduce using rule 23 (const_value -> ICONST .) ]
  ! THEN            [ reduce using rule 23 (const_value -> ICONST .) ]
  ! DO              [ reduce using rule 23 (const_value -> ICONST .) ]
  ! END             [ reduce using rule 23 (const_value -> ICONST .) ]
  ! SEMI            [ reduce using rule 23 (const_value -> ICONST .) ]
  ! UNTIL           [ reduce using rule 23 (const_value -> ICONST .) ]
  ! ELSE            [ reduce using rule 23 (const_value -> ICONST .) ]
  ! RPAREN          [ reduce using rule 23 (const_value -> ICONST .) ]
  ! COMMA           [ reduce using rule 23 (const_value -> ICONST .) ]
  ! RBRACK          [ reduce using rule 23 (const_value -> ICONST .) ]
  ! TO              [ reduce using rule 23 (const_value -> ICONST .) ]


state 157

    (101) term -> term MULDIVANDOP . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    factor                         shift and go to state 194
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 158

    (105) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 195


state 159

    (106) factor -> ID LPAREN . expression_list RPAREN
    (93) expression_list -> . expression_list COMMA expression
    (94) expression_list -> . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression_list                shift and go to state 196
    expression                     shift and go to state 163
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 160

    (107) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 107 (factor -> NOTOP factor .)
    RELOP           reduce using rule 107 (factor -> NOTOP factor .)
    EQU             reduce using rule 107 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 107 (factor -> NOTOP factor .)
    OROP            reduce using rule 107 (factor -> NOTOP factor .)
    THEN            reduce using rule 107 (factor -> NOTOP factor .)
    DO              reduce using rule 107 (factor -> NOTOP factor .)
    END             reduce using rule 107 (factor -> NOTOP factor .)
    SEMI            reduce using rule 107 (factor -> NOTOP factor .)
    UNTIL           reduce using rule 107 (factor -> NOTOP factor .)
    ELSE            reduce using rule 107 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 107 (factor -> NOTOP factor .)
    COMMA           reduce using rule 107 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 107 (factor -> NOTOP factor .)
    TO              reduce using rule 107 (factor -> NOTOP factor .)


state 161

    (76) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 197
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 162

    (90) procedure_call -> ID LPAREN expression_list . RPAREN
    (93) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 199


state 163

    (94) expression_list -> expression .

    RPAREN          reduce using rule 94 (expression_list -> expression .)
    COMMA           reduce using rule 94 (expression_list -> expression .)
    RBRACK          reduce using rule 94 (expression_list -> expression .)


state 164

    (85) id_varpart -> LBRACK expression_list . RBRACK id_varpart
    (93) expression_list -> expression_list . COMMA expression

    RBRACK          shift and go to state 200
    COMMA           shift and go to state 199


state 165

    (86) id_varpart -> DOT ID . id_varpart
    (85) id_varpart -> . LBRACK expression_list RBRACK id_varpart
    (86) id_varpart -> . DOT ID id_varpart
    (87) id_varpart -> . empty
    (110) empty -> .

    LBRACK          shift and go to state 118
    DOT             shift and go to state 119
    ASSIGN          reduce using rule 110 (empty -> .)
    MULDIVANDOP     reduce using rule 110 (empty -> .)
    RELOP           reduce using rule 110 (empty -> .)
    EQU             reduce using rule 110 (empty -> .)
    ADDOP           reduce using rule 110 (empty -> .)
    OROP            reduce using rule 110 (empty -> .)
    THEN            reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RBRACK          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    id_varpart                     shift and go to state 201
    empty                          shift and go to state 120

state 166

    (77) statement -> READ LPAREN variable_list . RPAREN
    (83) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 203


state 167

    (84) variable_list -> variable .

    RPAREN          reduce using rule 84 (variable_list -> variable .)
    COMMA           reduce using rule 84 (variable_list -> variable .)


state 168

    (88) variable -> ID . id_varpart
    (85) id_varpart -> . LBRACK expression_list RBRACK id_varpart
    (86) id_varpart -> . DOT ID id_varpart
    (87) id_varpart -> . empty
    (110) empty -> .

    LBRACK          shift and go to state 118
    DOT             shift and go to state 119
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)

    id_varpart                     shift and go to state 116
    empty                          shift and go to state 120

state 169

    (78) statement -> WRITE LPAREN expression_list . RPAREN
    (93) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 199


state 170

    (79) statement -> READLN LPAREN variable_list . RPAREN
    (83) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 205
    COMMA           shift and go to state 203


state 171

    (80) statement -> WRITELN LPAREN expression_list . RPAREN
    (93) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 199


state 172

    (81) statement -> REPEAT statement_list UNTIL . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 207
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 173

    (82) statement -> WHILE expression DO . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement                      shift and go to state 208
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 174

    (67) subprogram_body -> const_declarations var_declarations . compound_statement
    (68) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 52

    compound_statement             shift and go to state 209

state 175

    (58) formal_parameter -> LPAREN parameter_list . RPAREN
    (60) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 210
    SEMI            shift and go to state 211


state 176

    (61) parameter_list -> parameter .

    RPAREN          reduce using rule 61 (parameter_list -> parameter .)
    SEMI            reduce using rule 61 (parameter_list -> parameter .)


state 177

    (62) parameter -> var_parameter .

    RPAREN          reduce using rule 62 (parameter -> var_parameter .)
    SEMI            reduce using rule 62 (parameter -> var_parameter .)


state 178

    (63) parameter -> value_parameter .

    RPAREN          reduce using rule 63 (parameter -> value_parameter .)
    SEMI            reduce using rule 63 (parameter -> value_parameter .)


state 179

    (64) var_parameter -> VAR . value_parameter
    (65) value_parameter -> . idlist COLON basic_type
    (66) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    value_parameter                shift and go to state 212
    idlist                         shift and go to state 180

state 180

    (65) value_parameter -> idlist . COLON basic_type
    (66) value_parameter -> idlist . error basic_type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 213
    error           shift and go to state 214
    COMMA           shift and go to state 29


state 181

    (57) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    basic_type                     shift and go to state 215

state 182

    (32) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 32 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 183

    (34) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 216


state 184

    (46) period -> period COMMA . my_period_part DOTDOT my_period_part
    (48) period -> period COMMA . RCONST
    (41) my_period_part -> . ADDOP ICONST
    (42) my_period_part -> . ICONST
    (43) my_period_part -> . CCONST
    (44) my_period_part -> . ID

    RCONST          shift and go to state 218
    ADDOP           shift and go to state 139
    ICONST          shift and go to state 140
    CCONST          shift and go to state 141
    ID              shift and go to state 142

    my_period_part                 shift and go to state 217

state 185

    (45) period -> my_period_part DOTDOT . my_period_part
    (41) my_period_part -> . ADDOP ICONST
    (42) my_period_part -> . ICONST
    (43) my_period_part -> . CCONST
    (44) my_period_part -> . ID

    ADDOP           shift and go to state 139
    ICONST          shift and go to state 140
    CCONST          shift and go to state 141
    ID              shift and go to state 142

    my_period_part                 shift and go to state 219

state 186

    (41) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 41 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 41 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 41 (my_period_part -> ADDOP ICONST .)


state 187

    (51) field_declarations -> field_declarations field_declaration SEMI .

    END             reduce using rule 51 (field_declarations -> field_declarations field_declaration SEMI .)
    ID              reduce using rule 51 (field_declarations -> field_declarations field_declaration SEMI .)


state 188

    (52) field_declaration -> ID COLON type .

    SEMI            reduce using rule 52 (field_declaration -> ID COLON type .)


state 189

    (75) statement -> IF expression THEN statement . else_part
    (91) else_part -> . ELSE statement
    (92) else_part -> . empty
    (110) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 221
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)

  ! ELSE            [ reduce using rule 110 (empty -> .) ]

    else_part                      shift and go to state 220
    empty                          shift and go to state 222

state 190

    (95) expression -> simple_expression RELOP simple_expression .
    (98) simple_expression -> simple_expression . ADDOP term
    (99) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    UNTIL           reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 95 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 153
    OROP            shift and go to state 154


state 191

    (96) expression -> simple_expression EQU simple_expression .
    (98) simple_expression -> simple_expression . ADDOP term
    (99) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    UNTIL           reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 96 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 153
    OROP            shift and go to state 154


state 192

    (98) simple_expression -> simple_expression ADDOP term .
    (101) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    OROP            reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    UNTIL           reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 98 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 157


state 193

    (99) simple_expression -> simple_expression OROP term .
    (101) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    EQU             reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    ADDOP           reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    OROP            reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    THEN            reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    DO              reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    END             reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    SEMI            reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    UNTIL           reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    ELSE            reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    RPAREN          reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    COMMA           reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    RBRACK          reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    TO              reduce using rule 99 (simple_expression -> simple_expression OROP term .)
    MULDIVANDOP     shift and go to state 157


state 194

    (101) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 101 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 101 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 101 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 101 (term -> term MULDIVANDOP factor .)
    OROP            reduce using rule 101 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 101 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 101 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 101 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 101 (term -> term MULDIVANDOP factor .)
    UNTIL           reduce using rule 101 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 101 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 101 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 101 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 101 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 101 (term -> term MULDIVANDOP factor .)


state 195

    (105) factor -> LPAREN expression RPAREN .

    MULDIVANDOP     reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    EQU             reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    OROP            reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 105 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 105 (factor -> LPAREN expression RPAREN .)


state 196

    (106) factor -> ID LPAREN expression_list . RPAREN
    (93) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 199


state 197

    (76) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 224


state 198

    (90) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 90 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 90 (procedure_call -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 90 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 90 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 199

    (93) expression_list -> expression_list COMMA . expression
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 225
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 200

    (85) id_varpart -> LBRACK expression_list RBRACK . id_varpart
    (85) id_varpart -> . LBRACK expression_list RBRACK id_varpart
    (86) id_varpart -> . DOT ID id_varpart
    (87) id_varpart -> . empty
    (110) empty -> .

    LBRACK          shift and go to state 118
    DOT             shift and go to state 119
    ASSIGN          reduce using rule 110 (empty -> .)
    MULDIVANDOP     reduce using rule 110 (empty -> .)
    RELOP           reduce using rule 110 (empty -> .)
    EQU             reduce using rule 110 (empty -> .)
    ADDOP           reduce using rule 110 (empty -> .)
    OROP            reduce using rule 110 (empty -> .)
    THEN            reduce using rule 110 (empty -> .)
    DO              reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RBRACK          reduce using rule 110 (empty -> .)
    TO              reduce using rule 110 (empty -> .)

    id_varpart                     shift and go to state 226
    empty                          shift and go to state 120

state 201

    (86) id_varpart -> DOT ID id_varpart .

    ASSIGN          reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    MULDIVANDOP     reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    RELOP           reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    EQU             reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    ADDOP           reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    OROP            reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    THEN            reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    DO              reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    END             reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    SEMI            reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    UNTIL           reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    ELSE            reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    RPAREN          reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    COMMA           reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    RBRACK          reduce using rule 86 (id_varpart -> DOT ID id_varpart .)
    TO              reduce using rule 86 (id_varpart -> DOT ID id_varpart .)


state 202

    (77) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 77 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 77 (statement -> READ LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 77 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 77 (statement -> READ LPAREN variable_list RPAREN .)


state 203

    (83) variable_list -> variable_list COMMA . variable
    (88) variable -> . ID id_varpart

    ID              shift and go to state 168

    variable                       shift and go to state 227

state 204

    (78) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 78 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 78 (statement -> WRITE LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 78 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 78 (statement -> WRITE LPAREN expression_list RPAREN .)


state 205

    (79) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 79 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 79 (statement -> READLN LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 79 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 79 (statement -> READLN LPAREN variable_list RPAREN .)


state 206

    (80) statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 80 (statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 80 (statement -> WRITELN LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 80 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 80 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 207

    (81) statement -> REPEAT statement_list UNTIL expression .

    END             reduce using rule 81 (statement -> REPEAT statement_list UNTIL expression .)
    SEMI            reduce using rule 81 (statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 81 (statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 81 (statement -> REPEAT statement_list UNTIL expression .)


state 208

    (82) statement -> WHILE expression DO statement .

    END             reduce using rule 82 (statement -> WHILE expression DO statement .)
    SEMI            reduce using rule 82 (statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 82 (statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 82 (statement -> WHILE expression DO statement .)


state 209

    (67) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 67 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 210

    (58) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 58 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 58 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 211

    (60) parameter_list -> parameter_list SEMI . parameter
    (62) parameter -> . var_parameter
    (63) parameter -> . value_parameter
    (64) var_parameter -> . VAR value_parameter
    (65) value_parameter -> . idlist COLON basic_type
    (66) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 179
    ID              shift and go to state 17

    parameter                      shift and go to state 228
    var_parameter                  shift and go to state 177
    value_parameter                shift and go to state 178
    idlist                         shift and go to state 180

state 212

    (64) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 64 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 64 (var_parameter -> VAR value_parameter .)


state 213

    (65) value_parameter -> idlist COLON . basic_type
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    basic_type                     shift and go to state 229

state 214

    (66) value_parameter -> idlist error . basic_type
    (7) idlist -> idlist error . ID
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    ID              shift and go to state 49
    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    basic_type                     shift and go to state 230

state 215

    (57) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 57 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 216

    (34) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (36) basic_type -> . INTEGER
    (37) basic_type -> . REAL
    (38) basic_type -> . CHAR
    (39) basic_type -> . BOOLEAN
    (40) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 66
    REAL            shift and go to state 67
    CHAR            shift and go to state 68
    BOOLEAN         shift and go to state 69
    TYPE_STRING     shift and go to state 70

    basic_type                     shift and go to state 231

state 217

    (46) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 232


state 218

    (48) period -> period COMMA RCONST .

    RBRACK          reduce using rule 48 (period -> period COMMA RCONST .)
    COMMA           reduce using rule 48 (period -> period COMMA RCONST .)


state 219

    (45) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 45 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 45 (period -> my_period_part DOTDOT my_period_part .)


state 220

    (75) statement -> IF expression THEN statement else_part .

    END             reduce using rule 75 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 75 (statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 75 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 75 (statement -> IF expression THEN statement else_part .)


state 221

    (91) else_part -> ELSE . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement                      shift and go to state 233
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 222

    (92) else_part -> empty .

    ELSE            reduce using rule 92 (else_part -> empty .)
    END             reduce using rule 92 (else_part -> empty .)
    SEMI            reduce using rule 92 (else_part -> empty .)
    UNTIL           reduce using rule 92 (else_part -> empty .)


state 223

    (106) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    OROP            reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 106 (factor -> ID LPAREN expression_list RPAREN .)


state 224

    (76) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (95) expression -> . simple_expression RELOP simple_expression
    (96) expression -> . simple_expression EQU simple_expression
    (97) expression -> . simple_expression
    (98) simple_expression -> . simple_expression ADDOP term
    (99) simple_expression -> . simple_expression OROP term
    (100) simple_expression -> . term
    (101) term -> . term MULDIVANDOP factor
    (102) term -> . factor
    (103) factor -> . const_value
    (104) factor -> . variable
    (105) factor -> . LPAREN expression RPAREN
    (106) factor -> . ID LPAREN expression_list RPAREN
    (107) factor -> . NOTOP factor
    (108) factor -> . ADDOP factor
    (22) const_value -> . ADDOP ICONST
    (23) const_value -> . ICONST
    (24) const_value -> . RCONST
    (25) const_value -> . CCONST
    (26) const_value -> . BCONST
    (27) const_value -> . string
    (88) variable -> . ID id_varpart
    (109) string -> . STRING

    LPAREN          shift and go to state 112
    ID              shift and go to state 113
    NOTOP           shift and go to state 114
    ADDOP           shift and go to state 107
    ICONST          shift and go to state 42
    RCONST          shift and go to state 43
    CCONST          shift and go to state 44
    BCONST          shift and go to state 45
    STRING          shift and go to state 47

    expression                     shift and go to state 234
    simple_expression              shift and go to state 106
    term                           shift and go to state 108
    factor                         shift and go to state 109
    const_value                    shift and go to state 110
    variable                       shift and go to state 111
    string                         shift and go to state 46

state 225

    (93) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 93 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 93 (expression_list -> expression_list COMMA expression .)
    RBRACK          reduce using rule 93 (expression_list -> expression_list COMMA expression .)


state 226

    (85) id_varpart -> LBRACK expression_list RBRACK id_varpart .

    ASSIGN          reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    MULDIVANDOP     reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    RELOP           reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    EQU             reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    ADDOP           reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    OROP            reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    THEN            reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    DO              reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    END             reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    SEMI            reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    UNTIL           reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    ELSE            reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    RPAREN          reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    COMMA           reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    RBRACK          reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)
    TO              reduce using rule 85 (id_varpart -> LBRACK expression_list RBRACK id_varpart .)


state 227

    (83) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 83 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 83 (variable_list -> variable_list COMMA variable .)


state 228

    (60) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 60 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 60 (parameter_list -> parameter_list SEMI parameter .)


state 229

    (65) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 65 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 65 (value_parameter -> idlist COLON basic_type .)


state 230

    (66) value_parameter -> idlist error basic_type .

    RPAREN          reduce using rule 66 (value_parameter -> idlist error basic_type .)
    SEMI            reduce using rule 66 (value_parameter -> idlist error basic_type .)


state 231

    (34) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 34 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 232

    (46) period -> period COMMA my_period_part DOTDOT . my_period_part
    (41) my_period_part -> . ADDOP ICONST
    (42) my_period_part -> . ICONST
    (43) my_period_part -> . CCONST
    (44) my_period_part -> . ID

    ADDOP           shift and go to state 139
    ICONST          shift and go to state 140
    CCONST          shift and go to state 141
    ID              shift and go to state 142

    my_period_part                 shift and go to state 235

state 233

    (91) else_part -> ELSE statement .

    ELSE            reduce using rule 91 (else_part -> ELSE statement .)
    END             reduce using rule 91 (else_part -> ELSE statement .)
    SEMI            reduce using rule 91 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 91 (else_part -> ELSE statement .)


state 234

    (76) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 236


state 235

    (46) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 46 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 46 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 236

    (76) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (71) statement -> . empty
    (72) statement -> . variable ASSIGN expression
    (73) statement -> . procedure_call
    (74) statement -> . compound_statement
    (75) statement -> . IF expression THEN statement else_part
    (76) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (77) statement -> . READ LPAREN variable_list RPAREN
    (78) statement -> . WRITE LPAREN expression_list RPAREN
    (79) statement -> . READLN LPAREN variable_list RPAREN
    (80) statement -> . WRITELN LPAREN expression_list RPAREN
    (81) statement -> . REPEAT statement_list UNTIL expression
    (82) statement -> . WHILE expression DO statement
    (110) empty -> .
    (88) variable -> . ID id_varpart
    (89) procedure_call -> . ID
    (90) procedure_call -> . ID LPAREN expression_list RPAREN
    (68) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 81
    FOR             shift and go to state 82
    READ            shift and go to state 84
    WRITE           shift and go to state 85
    READLN          shift and go to state 86
    WRITELN         shift and go to state 87
    REPEAT          shift and go to state 88
    WHILE           shift and go to state 89
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    SEMI            reduce using rule 110 (empty -> .)
    UNTIL           reduce using rule 110 (empty -> .)
    ID              shift and go to state 83
    BEGIN           shift and go to state 52

    statement                      shift and go to state 237
    empty                          shift and go to state 77
    variable                       shift and go to state 78
    procedure_call                 shift and go to state 79
    compound_statement             shift and go to state 80

state 237

    (76) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 76 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 76 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 76 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 76 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 17 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 189 resolved as shift
WARNING: reduce/reduce conflict in state 156 resolved using rule (const_value -> ADDOP ICONST)
WARNING: rejected rule (const_value -> ICONST) in state 156
