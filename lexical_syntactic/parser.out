Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    RCURL
    SET
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program -> program_head SEMI program_body
Rule 3     program_head -> PROGRAM ID
Rule 4     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 5     idlist -> idlist COMMA ID
Rule 6     idlist -> ID
Rule 7     idlist -> idlist error ID
Rule 8     idlist -> ID error
Rule 9     program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement
Rule 10    type_declarations -> TYPE type_declaration SEMI
Rule 11    type_declarations -> empty
Rule 12    type_declaration -> ID EQU type_define
Rule 13    type_declaration -> type_declaration SEMI ID EQU type_define
Rule 14    type_define -> simple_type
Rule 15    type_define -> array_type
Rule 16    type_define -> record_type
Rule 17    simple_type -> ID
Rule 18    simple_type -> LPAREN ID DOTDOT ID RPAREN
Rule 19    array_type -> ARRAY LPAREN index_range RPAREN OF ID
Rule 20    index_range -> simple_type DOTDOT simple_type
Rule 21    record_type -> RECORD field_declarations END
Rule 22    field_declarations -> field_declaration SEMI
Rule 23    field_declarations -> field_declarations field_declaration SEMI
Rule 24    field_declaration -> ID COLON ID
Rule 25    field_declaration -> ID COLON basic_type
Rule 26    const_declarations -> CONST const_declaration SEMI
Rule 27    const_declarations -> empty
Rule 28    const_declaration -> ID EQU const_value
Rule 29    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 30    const_declaration -> ID EQU error ID
Rule 31    const_declaration -> const_declaration SEMI ID EQU error ID
Rule 32    const_value -> ADDOP ICONST
Rule 33    const_value -> ICONST
Rule 34    const_value -> RCONST
Rule 35    const_value -> CCONST
Rule 36    const_value -> BCONST
Rule 37    const_value -> string
Rule 38    var_declarations -> VAR var_declaration SEMI
Rule 39    var_declarations -> empty
Rule 40    var_declaration -> idlist COLON type
Rule 41    var_declaration -> var_declaration SEMI idlist COLON type
Rule 42    type -> basic_type
Rule 43    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 44    type -> ID
Rule 45    basic_type -> INTEGER
Rule 46    basic_type -> REAL
Rule 47    basic_type -> CHAR
Rule 48    basic_type -> BOOLEAN
Rule 49    basic_type -> TYPE_STRING
Rule 50    my_period_part -> ADDOP ICONST
Rule 51    my_period_part -> ICONST
Rule 52    my_period_part -> CCONST
Rule 53    my_period_part -> ID
Rule 54    period -> my_period_part DOTDOT my_period_part
Rule 55    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 56    period -> RCONST
Rule 57    period -> period COMMA RCONST
Rule 58    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 59    subprogram_declarations -> empty
Rule 60    subprogram -> subprogram_head SEMI subprogram_body
Rule 61    subprogram_head -> PROCEDURE ID formal_parameter
Rule 62    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 63    formal_parameter -> LPAREN parameter_list RPAREN
Rule 64    formal_parameter -> empty
Rule 65    parameter_list -> parameter_list SEMI parameter
Rule 66    parameter_list -> parameter
Rule 67    parameter -> var_parameter
Rule 68    parameter -> value_parameter
Rule 69    var_parameter -> VAR value_parameter
Rule 70    value_parameter -> idlist COLON basic_type
Rule 71    value_parameter -> idlist error basic_type
Rule 72    subprogram_body -> const_declarations var_declarations compound_statement
Rule 73    compound_statement -> BEGIN statement_list END
Rule 74    statement_list -> statement_list SEMI statement
Rule 75    statement_list -> statement
Rule 76    statement -> empty
Rule 77    statement -> variable ASSIGN expression
Rule 78    statement -> procedure_call
Rule 79    statement -> compound_statement
Rule 80    statement -> IF expression THEN statement else_part
Rule 81    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 82    statement -> READ LPAREN variable_list RPAREN
Rule 83    statement -> WRITE LPAREN expression_list RPAREN
Rule 84    statement -> READLN LPAREN variable_list RPAREN
Rule 85    statement -> WRITELN LPAREN expression_list RPAREN
Rule 86    statement -> REPEAT statement_list UNTIL expression
Rule 87    statement -> WHILE expression DO statement
Rule 88    variable_list -> variable_list COMMA variable
Rule 89    variable_list -> variable
Rule 90    variable -> ID id_varpart
Rule 91    id_varpart -> LBRACK expression_list RBRACK
Rule 92    id_varpart -> DOT ID id_varpart
Rule 93    id_varpart -> empty
Rule 94    procedure_call -> ID
Rule 95    procedure_call -> ID LPAREN expression_list RPAREN
Rule 96    else_part -> ELSE statement
Rule 97    else_part -> empty
Rule 98    expression_list -> expression_list COMMA expression
Rule 99    expression_list -> expression
Rule 100   expression -> simple_expression RELOP simple_expression
Rule 101   expression -> simple_expression EQU simple_expression
Rule 102   expression -> simple_expression
Rule 103   simple_expression -> simple_expression ADDOP term
Rule 104   simple_expression -> simple_expression OROP term
Rule 105   simple_expression -> term
Rule 106   term -> term MULDIVANDOP factor
Rule 107   term -> factor
Rule 108   factor -> const_value
Rule 109   factor -> variable
Rule 110   factor -> LPAREN expression RPAREN
Rule 111   factor -> ID LPAREN expression_list RPAREN
Rule 112   factor -> NOTOP factor
Rule 113   factor -> ADDOP factor
Rule 114   string -> STRING
Rule 115   empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 32 50 103 113
ARRAY                : 19 43
ASSIGN               : 77 81
BCONST               : 36
BEGIN                : 73
BOOLEAN              : 48
CCONST               : 35 52
CHAR                 : 47
COLON                : 24 25 40 41 62 70
COMMA                : 5 55 57 88 98
CONST                : 26
DO                   : 81 87
DOT                  : 1 92
DOTDOT               : 18 20 54 55
DOWNTO               : 
ELSE                 : 96
END                  : 21 73
EOF                  : 
EQU                  : 12 13 28 29 30 31 101
FOR                  : 81
FORWARD              : 
FUNCTION             : 62
ICONST               : 32 33 50 51
ID                   : 3 4 5 6 7 8 12 13 17 18 18 19 24 24 25 28 29 30 30 31 31 44 53 61 62 81 90 92 94 95 111
IF                   : 80
INOP                 : 
INTEGER              : 45
LBRACK               : 43 91
LCURL                : 
LPAREN               : 4 18 19 63 82 83 84 85 95 110 111
MULDIVANDOP          : 106
NOTOP                : 112
OF                   : 19 43
OROP                 : 104
PROCEDURE            : 61
PROGRAM              : 3 4
RBRACK               : 43 91
RCONST               : 34 56 57
RCURL                : 
READ                 : 82
READLN               : 84
REAL                 : 46
RECORD               : 21
RELOP                : 100
REPEAT               : 86
RPAREN               : 4 18 19 63 82 83 84 85 95 110 111
SEMI                 : 1 2 10 13 22 23 26 29 31 38 41 58 60 65 74
SET                  : 
STRING               : 114
THEN                 : 80
TO                   : 81
TYPE                 : 10
TYPE_STRING          : 49
UNTIL                : 86
VAR                  : 38 69
WHILE                : 87
WITH                 : 
WRITE                : 83
WRITELN              : 85
error                : 7 8 30 31 71

Nonterminals, with rules where they appear

array_type           : 15
basic_type           : 25 42 43 62 70 71
compound_statement   : 9 72 79
const_declaration    : 26 29 31
const_declarations   : 9 72
const_value          : 28 29 108
else_part            : 80
empty                : 11 27 39 59 64 76 93 97
expression           : 77 80 81 81 86 87 98 99 110
expression_list      : 83 85 91 95 98 111
factor               : 106 107 112 113
field_declaration    : 22 23
field_declarations   : 21 23
formal_parameter     : 61 62
id_varpart           : 90 92
idlist               : 4 5 7 40 41 70 71
index_range          : 19
my_period_part       : 54 54 55 55
parameter            : 65 66
parameter_list       : 63 65
period               : 43 55 57
procedure_call       : 78
program              : 0
program_body         : 1 2
program_head         : 1 2
record_type          : 16
simple_expression    : 100 100 101 101 102 103 104
simple_type          : 14 20 20
statement            : 74 75 80 81 87 96
statement_list       : 73 74 86
string               : 37
subprogram           : 58
subprogram_body      : 60
subprogram_declarations : 9 58
subprogram_head      : 60
term                 : 103 104 105 106
type                 : 40 41
type_declaration     : 10 13
type_declarations    : 9
type_define          : 12 13
value_parameter      : 68 69
var_declaration      : 38 41
var_declarations     : 9 72
var_parameter        : 67
variable             : 77 88 89 109
variable_list        : 82 84 88

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program -> . program_head SEMI program_body
    (3) program_head -> . PROGRAM ID
    (4) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT
    (2) program -> program_head . SEMI program_body

    SEMI            shift and go to state 4


state 3

    (3) program_head -> PROGRAM . ID
    (4) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (2) program -> program_head SEMI . program_body
    (9) program_body -> . const_declarations type_declarations var_declarations subprogram_declarations compound_statement
    (26) const_declarations -> . CONST const_declaration SEMI
    (27) const_declarations -> . empty
    (115) empty -> .

    CONST           shift and go to state 8
    TYPE            reduce using rule 115 (empty -> .)
    VAR             reduce using rule 115 (empty -> .)
    BEGIN           reduce using rule 115 (empty -> .)
    PROCEDURE       reduce using rule 115 (empty -> .)
    FUNCTION        reduce using rule 115 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (3) program_head -> PROGRAM ID .
    (4) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT
    (2) program -> program_head SEMI program_body .

    DOT             shift and go to state 11
    $end            reduce using rule 2 (program -> program_head SEMI program_body .)


state 7

    (9) program_body -> const_declarations . type_declarations var_declarations subprogram_declarations compound_statement
    (10) type_declarations -> . TYPE type_declaration SEMI
    (11) type_declarations -> . empty
    (115) empty -> .

    TYPE            shift and go to state 13
    VAR             reduce using rule 115 (empty -> .)
    BEGIN           reduce using rule 115 (empty -> .)
    PROCEDURE       reduce using rule 115 (empty -> .)
    FUNCTION        reduce using rule 115 (empty -> .)

    type_declarations              shift and go to state 12
    empty                          shift and go to state 14

state 8

    (26) const_declarations -> CONST . const_declaration SEMI
    (28) const_declaration -> . ID EQU const_value
    (29) const_declaration -> . const_declaration SEMI ID EQU const_value
    (30) const_declaration -> . ID EQU error ID
    (31) const_declaration -> . const_declaration SEMI ID EQU error ID

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (27) const_declarations -> empty .

    TYPE            reduce using rule 27 (const_declarations -> empty .)
    VAR             reduce using rule 27 (const_declarations -> empty .)
    BEGIN           reduce using rule 27 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 27 (const_declarations -> empty .)
    FUNCTION        reduce using rule 27 (const_declarations -> empty .)


state 10

    (4) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (9) program_body -> const_declarations type_declarations . var_declarations subprogram_declarations compound_statement
    (38) var_declarations -> . VAR var_declaration SEMI
    (39) var_declarations -> . empty
    (115) empty -> .

    VAR             shift and go to state 20
    BEGIN           reduce using rule 115 (empty -> .)
    PROCEDURE       reduce using rule 115 (empty -> .)
    FUNCTION        reduce using rule 115 (empty -> .)

    var_declarations               shift and go to state 19
    empty                          shift and go to state 21

state 13

    (10) type_declarations -> TYPE . type_declaration SEMI
    (12) type_declaration -> . ID EQU type_define
    (13) type_declaration -> . type_declaration SEMI ID EQU type_define

    ID              shift and go to state 23

    type_declaration               shift and go to state 22

state 14

    (11) type_declarations -> empty .

    VAR             reduce using rule 11 (type_declarations -> empty .)
    BEGIN           reduce using rule 11 (type_declarations -> empty .)
    PROCEDURE       reduce using rule 11 (type_declarations -> empty .)
    FUNCTION        reduce using rule 11 (type_declarations -> empty .)


state 15

    (26) const_declarations -> CONST const_declaration . SEMI
    (29) const_declaration -> const_declaration . SEMI ID EQU const_value
    (31) const_declaration -> const_declaration . SEMI ID EQU error ID

    SEMI            shift and go to state 24


state 16

    (28) const_declaration -> ID . EQU const_value
    (30) const_declaration -> ID . EQU error ID

    EQU             shift and go to state 25


state 17

    (6) idlist -> ID .
    (8) idlist -> ID . error

  ! shift/reduce conflict for error resolved as shift
    RPAREN          reduce using rule 6 (idlist -> ID .)
    COMMA           reduce using rule 6 (idlist -> ID .)
    COLON           reduce using rule 6 (idlist -> ID .)
    error           shift and go to state 26

  ! error           [ reduce using rule 6 (idlist -> ID .) ]


state 18

    (4) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    RPAREN          shift and go to state 27
    COMMA           shift and go to state 28
    error           shift and go to state 29


state 19

    (9) program_body -> const_declarations type_declarations var_declarations . subprogram_declarations compound_statement
    (58) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (59) subprogram_declarations -> . empty
    (115) empty -> .

    BEGIN           reduce using rule 115 (empty -> .)
    PROCEDURE       reduce using rule 115 (empty -> .)
    FUNCTION        reduce using rule 115 (empty -> .)

    subprogram_declarations        shift and go to state 30
    empty                          shift and go to state 31

state 20

    (38) var_declarations -> VAR . var_declaration SEMI
    (40) var_declaration -> . idlist COLON type
    (41) var_declaration -> . var_declaration SEMI idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 32
    idlist                         shift and go to state 33

state 21

    (39) var_declarations -> empty .

    BEGIN           reduce using rule 39 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 39 (var_declarations -> empty .)
    FUNCTION        reduce using rule 39 (var_declarations -> empty .)


state 22

    (10) type_declarations -> TYPE type_declaration . SEMI
    (13) type_declaration -> type_declaration . SEMI ID EQU type_define

    SEMI            shift and go to state 34


state 23

    (12) type_declaration -> ID . EQU type_define

    EQU             shift and go to state 35


state 24

    (26) const_declarations -> CONST const_declaration SEMI .
    (29) const_declaration -> const_declaration SEMI . ID EQU const_value
    (31) const_declaration -> const_declaration SEMI . ID EQU error ID

    TYPE            reduce using rule 26 (const_declarations -> CONST const_declaration SEMI .)
    VAR             reduce using rule 26 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 26 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 26 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 26 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 36


state 25

    (28) const_declaration -> ID EQU . const_value
    (30) const_declaration -> ID EQU . error ID
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (114) string -> . STRING

    error           shift and go to state 38
    ADDOP           shift and go to state 39
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    const_value                    shift and go to state 37
    string                         shift and go to state 44

state 26

    (8) idlist -> ID error .

    RPAREN          reduce using rule 8 (idlist -> ID error .)
    COMMA           reduce using rule 8 (idlist -> ID error .)
    error           reduce using rule 8 (idlist -> ID error .)
    COLON           reduce using rule 8 (idlist -> ID error .)


state 27

    (4) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 4 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 28

    (5) idlist -> idlist COMMA . ID

    ID              shift and go to state 46


state 29

    (7) idlist -> idlist error . ID

    ID              shift and go to state 47


state 30

    (9) program_body -> const_declarations type_declarations var_declarations subprogram_declarations . compound_statement
    (58) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (73) compound_statement -> . BEGIN statement_list END
    (60) subprogram -> . subprogram_head SEMI subprogram_body
    (61) subprogram_head -> . PROCEDURE ID formal_parameter
    (62) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 50
    PROCEDURE       shift and go to state 52
    FUNCTION        shift and go to state 53

    compound_statement             shift and go to state 48
    subprogram                     shift and go to state 49
    subprogram_head                shift and go to state 51

state 31

    (59) subprogram_declarations -> empty .

    BEGIN           reduce using rule 59 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 59 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 59 (subprogram_declarations -> empty .)


state 32

    (38) var_declarations -> VAR var_declaration . SEMI
    (41) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 54


state 33

    (40) var_declaration -> idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 55
    COMMA           shift and go to state 28
    error           shift and go to state 29


state 34

    (10) type_declarations -> TYPE type_declaration SEMI .
    (13) type_declaration -> type_declaration SEMI . ID EQU type_define

    VAR             reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    BEGIN           reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    PROCEDURE       reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    FUNCTION        reduce using rule 10 (type_declarations -> TYPE type_declaration SEMI .)
    ID              shift and go to state 56


state 35

    (12) type_declaration -> ID EQU . type_define
    (14) type_define -> . simple_type
    (15) type_define -> . array_type
    (16) type_define -> . record_type
    (17) simple_type -> . ID
    (18) simple_type -> . LPAREN ID DOTDOT ID RPAREN
    (19) array_type -> . ARRAY LPAREN index_range RPAREN OF ID
    (21) record_type -> . RECORD field_declarations END

    ID              shift and go to state 57
    LPAREN          shift and go to state 62
    ARRAY           shift and go to state 63
    RECORD          shift and go to state 64

    type_define                    shift and go to state 58
    simple_type                    shift and go to state 59
    array_type                     shift and go to state 60
    record_type                    shift and go to state 61

state 36

    (29) const_declaration -> const_declaration SEMI ID . EQU const_value
    (31) const_declaration -> const_declaration SEMI ID . EQU error ID

    EQU             shift and go to state 65


state 37

    (28) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 28 (const_declaration -> ID EQU const_value .)


state 38

    (30) const_declaration -> ID EQU error . ID

    ID              shift and go to state 66


state 39

    (32) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 67


state 40

    (33) const_value -> ICONST .

    SEMI            reduce using rule 33 (const_value -> ICONST .)
    MULDIVANDOP     reduce using rule 33 (const_value -> ICONST .)
    RELOP           reduce using rule 33 (const_value -> ICONST .)
    EQU             reduce using rule 33 (const_value -> ICONST .)
    ADDOP           reduce using rule 33 (const_value -> ICONST .)
    OROP            reduce using rule 33 (const_value -> ICONST .)
    THEN            reduce using rule 33 (const_value -> ICONST .)
    DO              reduce using rule 33 (const_value -> ICONST .)
    END             reduce using rule 33 (const_value -> ICONST .)
    UNTIL           reduce using rule 33 (const_value -> ICONST .)
    ELSE            reduce using rule 33 (const_value -> ICONST .)
    RPAREN          reduce using rule 33 (const_value -> ICONST .)
    COMMA           reduce using rule 33 (const_value -> ICONST .)
    RBRACK          reduce using rule 33 (const_value -> ICONST .)
    TO              reduce using rule 33 (const_value -> ICONST .)


state 41

    (34) const_value -> RCONST .

    SEMI            reduce using rule 34 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 34 (const_value -> RCONST .)
    RELOP           reduce using rule 34 (const_value -> RCONST .)
    EQU             reduce using rule 34 (const_value -> RCONST .)
    ADDOP           reduce using rule 34 (const_value -> RCONST .)
    OROP            reduce using rule 34 (const_value -> RCONST .)
    THEN            reduce using rule 34 (const_value -> RCONST .)
    DO              reduce using rule 34 (const_value -> RCONST .)
    END             reduce using rule 34 (const_value -> RCONST .)
    UNTIL           reduce using rule 34 (const_value -> RCONST .)
    ELSE            reduce using rule 34 (const_value -> RCONST .)
    RPAREN          reduce using rule 34 (const_value -> RCONST .)
    COMMA           reduce using rule 34 (const_value -> RCONST .)
    RBRACK          reduce using rule 34 (const_value -> RCONST .)
    TO              reduce using rule 34 (const_value -> RCONST .)


state 42

    (35) const_value -> CCONST .

    SEMI            reduce using rule 35 (const_value -> CCONST .)
    MULDIVANDOP     reduce using rule 35 (const_value -> CCONST .)
    RELOP           reduce using rule 35 (const_value -> CCONST .)
    EQU             reduce using rule 35 (const_value -> CCONST .)
    ADDOP           reduce using rule 35 (const_value -> CCONST .)
    OROP            reduce using rule 35 (const_value -> CCONST .)
    THEN            reduce using rule 35 (const_value -> CCONST .)
    DO              reduce using rule 35 (const_value -> CCONST .)
    END             reduce using rule 35 (const_value -> CCONST .)
    UNTIL           reduce using rule 35 (const_value -> CCONST .)
    ELSE            reduce using rule 35 (const_value -> CCONST .)
    RPAREN          reduce using rule 35 (const_value -> CCONST .)
    COMMA           reduce using rule 35 (const_value -> CCONST .)
    RBRACK          reduce using rule 35 (const_value -> CCONST .)
    TO              reduce using rule 35 (const_value -> CCONST .)


state 43

    (36) const_value -> BCONST .

    SEMI            reduce using rule 36 (const_value -> BCONST .)
    MULDIVANDOP     reduce using rule 36 (const_value -> BCONST .)
    RELOP           reduce using rule 36 (const_value -> BCONST .)
    EQU             reduce using rule 36 (const_value -> BCONST .)
    ADDOP           reduce using rule 36 (const_value -> BCONST .)
    OROP            reduce using rule 36 (const_value -> BCONST .)
    THEN            reduce using rule 36 (const_value -> BCONST .)
    DO              reduce using rule 36 (const_value -> BCONST .)
    END             reduce using rule 36 (const_value -> BCONST .)
    UNTIL           reduce using rule 36 (const_value -> BCONST .)
    ELSE            reduce using rule 36 (const_value -> BCONST .)
    RPAREN          reduce using rule 36 (const_value -> BCONST .)
    COMMA           reduce using rule 36 (const_value -> BCONST .)
    RBRACK          reduce using rule 36 (const_value -> BCONST .)
    TO              reduce using rule 36 (const_value -> BCONST .)


state 44

    (37) const_value -> string .

    SEMI            reduce using rule 37 (const_value -> string .)
    MULDIVANDOP     reduce using rule 37 (const_value -> string .)
    RELOP           reduce using rule 37 (const_value -> string .)
    EQU             reduce using rule 37 (const_value -> string .)
    ADDOP           reduce using rule 37 (const_value -> string .)
    OROP            reduce using rule 37 (const_value -> string .)
    THEN            reduce using rule 37 (const_value -> string .)
    DO              reduce using rule 37 (const_value -> string .)
    END             reduce using rule 37 (const_value -> string .)
    UNTIL           reduce using rule 37 (const_value -> string .)
    ELSE            reduce using rule 37 (const_value -> string .)
    RPAREN          reduce using rule 37 (const_value -> string .)
    COMMA           reduce using rule 37 (const_value -> string .)
    RBRACK          reduce using rule 37 (const_value -> string .)
    TO              reduce using rule 37 (const_value -> string .)


state 45

    (114) string -> STRING .

    SEMI            reduce using rule 114 (string -> STRING .)
    MULDIVANDOP     reduce using rule 114 (string -> STRING .)
    RELOP           reduce using rule 114 (string -> STRING .)
    EQU             reduce using rule 114 (string -> STRING .)
    ADDOP           reduce using rule 114 (string -> STRING .)
    OROP            reduce using rule 114 (string -> STRING .)
    THEN            reduce using rule 114 (string -> STRING .)
    DO              reduce using rule 114 (string -> STRING .)
    END             reduce using rule 114 (string -> STRING .)
    UNTIL           reduce using rule 114 (string -> STRING .)
    ELSE            reduce using rule 114 (string -> STRING .)
    RPAREN          reduce using rule 114 (string -> STRING .)
    COMMA           reduce using rule 114 (string -> STRING .)
    RBRACK          reduce using rule 114 (string -> STRING .)
    TO              reduce using rule 114 (string -> STRING .)


state 46

    (5) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 5 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 5 (idlist -> idlist COMMA ID .)
    error           reduce using rule 5 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 5 (idlist -> idlist COMMA ID .)


state 47

    (7) idlist -> idlist error ID .

    RPAREN          reduce using rule 7 (idlist -> idlist error ID .)
    COMMA           reduce using rule 7 (idlist -> idlist error ID .)
    error           reduce using rule 7 (idlist -> idlist error ID .)
    COLON           reduce using rule 7 (idlist -> idlist error ID .)


state 48

    (9) program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 9 (program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .)
    $end            reduce using rule 9 (program_body -> const_declarations type_declarations var_declarations subprogram_declarations compound_statement .)


state 49

    (58) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 68


state 50

    (73) compound_statement -> BEGIN . statement_list END
    (74) statement_list -> . statement_list SEMI statement
    (75) statement_list -> . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement_list                 shift and go to state 69
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 51

    (60) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 84


state 52

    (61) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 85


state 53

    (62) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 86


state 54

    (38) var_declarations -> VAR var_declaration SEMI .
    (41) var_declaration -> var_declaration SEMI . idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    BEGIN           reduce using rule 38 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 38 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 38 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 87

state 55

    (40) var_declaration -> idlist COLON . type
    (42) type -> . basic_type
    (43) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (44) type -> . ID
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 90
    ID              shift and go to state 91
    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    type                           shift and go to state 88
    basic_type                     shift and go to state 89

state 56

    (13) type_declaration -> type_declaration SEMI ID . EQU type_define

    EQU             shift and go to state 97


state 57

    (17) simple_type -> ID .

    SEMI            reduce using rule 17 (simple_type -> ID .)
    DOTDOT          reduce using rule 17 (simple_type -> ID .)
    RPAREN          reduce using rule 17 (simple_type -> ID .)


state 58

    (12) type_declaration -> ID EQU type_define .

    SEMI            reduce using rule 12 (type_declaration -> ID EQU type_define .)


state 59

    (14) type_define -> simple_type .

    SEMI            reduce using rule 14 (type_define -> simple_type .)


state 60

    (15) type_define -> array_type .

    SEMI            reduce using rule 15 (type_define -> array_type .)


state 61

    (16) type_define -> record_type .

    SEMI            reduce using rule 16 (type_define -> record_type .)


state 62

    (18) simple_type -> LPAREN . ID DOTDOT ID RPAREN

    ID              shift and go to state 98


state 63

    (19) array_type -> ARRAY . LPAREN index_range RPAREN OF ID

    LPAREN          shift and go to state 99


state 64

    (21) record_type -> RECORD . field_declarations END
    (22) field_declarations -> . field_declaration SEMI
    (23) field_declarations -> . field_declarations field_declaration SEMI
    (24) field_declaration -> . ID COLON ID
    (25) field_declaration -> . ID COLON basic_type

    ID              shift and go to state 102

    field_declarations             shift and go to state 100
    field_declaration              shift and go to state 101

state 65

    (29) const_declaration -> const_declaration SEMI ID EQU . const_value
    (31) const_declaration -> const_declaration SEMI ID EQU . error ID
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (114) string -> . STRING

    error           shift and go to state 104
    ADDOP           shift and go to state 39
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    const_value                    shift and go to state 103
    string                         shift and go to state 44

state 66

    (30) const_declaration -> ID EQU error ID .

    SEMI            reduce using rule 30 (const_declaration -> ID EQU error ID .)


state 67

    (32) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 32 (const_value -> ADDOP ICONST .)


state 68

    (58) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 58 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 58 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 58 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 69

    (73) compound_statement -> BEGIN statement_list . END
    (74) statement_list -> statement_list . SEMI statement

    END             shift and go to state 105
    SEMI            shift and go to state 106


state 70

    (75) statement_list -> statement .

    END             reduce using rule 75 (statement_list -> statement .)
    SEMI            reduce using rule 75 (statement_list -> statement .)
    UNTIL           reduce using rule 75 (statement_list -> statement .)


state 71

    (76) statement -> empty .

    END             reduce using rule 76 (statement -> empty .)
    SEMI            reduce using rule 76 (statement -> empty .)
    UNTIL           reduce using rule 76 (statement -> empty .)
    ELSE            reduce using rule 76 (statement -> empty .)


state 72

    (77) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 107


state 73

    (78) statement -> procedure_call .

    END             reduce using rule 78 (statement -> procedure_call .)
    SEMI            reduce using rule 78 (statement -> procedure_call .)
    UNTIL           reduce using rule 78 (statement -> procedure_call .)
    ELSE            reduce using rule 78 (statement -> procedure_call .)


state 74

    (79) statement -> compound_statement .

    END             reduce using rule 79 (statement -> compound_statement .)
    SEMI            reduce using rule 79 (statement -> compound_statement .)
    UNTIL           reduce using rule 79 (statement -> compound_statement .)
    ELSE            reduce using rule 79 (statement -> compound_statement .)


state 75

    (80) statement -> IF . expression THEN statement else_part
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 108
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 76

    (81) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 118


state 77

    (90) variable -> ID . id_varpart
    (94) procedure_call -> ID .
    (95) procedure_call -> ID . LPAREN expression_list RPAREN
    (91) id_varpart -> . LBRACK expression_list RBRACK
    (92) id_varpart -> . DOT ID id_varpart
    (93) id_varpart -> . empty
    (115) empty -> .

    END             reduce using rule 94 (procedure_call -> ID .)
    SEMI            reduce using rule 94 (procedure_call -> ID .)
    UNTIL           reduce using rule 94 (procedure_call -> ID .)
    ELSE            reduce using rule 94 (procedure_call -> ID .)
    LPAREN          shift and go to state 120
    LBRACK          shift and go to state 121
    DOT             shift and go to state 122
    ASSIGN          reduce using rule 115 (empty -> .)

    id_varpart                     shift and go to state 119
    empty                          shift and go to state 123

state 78

    (82) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 124


state 79

    (83) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 125


state 80

    (84) statement -> READLN . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 126


state 81

    (85) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 127


state 82

    (86) statement -> REPEAT . statement_list UNTIL expression
    (74) statement_list -> . statement_list SEMI statement
    (75) statement_list -> . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    UNTIL           reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement_list                 shift and go to state 128
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 83

    (87) statement -> WHILE . expression DO statement
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 129
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 84

    (60) subprogram -> subprogram_head SEMI . subprogram_body
    (72) subprogram_body -> . const_declarations var_declarations compound_statement
    (26) const_declarations -> . CONST const_declaration SEMI
    (27) const_declarations -> . empty
    (115) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 115 (empty -> .)
    BEGIN           reduce using rule 115 (empty -> .)

    subprogram_body                shift and go to state 130
    const_declarations             shift and go to state 131
    empty                          shift and go to state 9

state 85

    (61) subprogram_head -> PROCEDURE ID . formal_parameter
    (63) formal_parameter -> . LPAREN parameter_list RPAREN
    (64) formal_parameter -> . empty
    (115) empty -> .

    LPAREN          shift and go to state 133
    SEMI            reduce using rule 115 (empty -> .)

    formal_parameter               shift and go to state 132
    empty                          shift and go to state 134

state 86

    (62) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (63) formal_parameter -> . LPAREN parameter_list RPAREN
    (64) formal_parameter -> . empty
    (115) empty -> .

    LPAREN          shift and go to state 133
    COLON           reduce using rule 115 (empty -> .)

    formal_parameter               shift and go to state 135
    empty                          shift and go to state 134

state 87

    (41) var_declaration -> var_declaration SEMI idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 136
    COMMA           shift and go to state 28
    error           shift and go to state 29


state 88

    (40) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 40 (var_declaration -> idlist COLON type .)


state 89

    (42) type -> basic_type .

    SEMI            reduce using rule 42 (type -> basic_type .)


state 90

    (43) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 137


state 91

    (44) type -> ID .

    SEMI            reduce using rule 44 (type -> ID .)


state 92

    (45) basic_type -> INTEGER .

    SEMI            reduce using rule 45 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 45 (basic_type -> INTEGER .)


state 93

    (46) basic_type -> REAL .

    SEMI            reduce using rule 46 (basic_type -> REAL .)
    RPAREN          reduce using rule 46 (basic_type -> REAL .)


state 94

    (47) basic_type -> CHAR .

    SEMI            reduce using rule 47 (basic_type -> CHAR .)
    RPAREN          reduce using rule 47 (basic_type -> CHAR .)


state 95

    (48) basic_type -> BOOLEAN .

    SEMI            reduce using rule 48 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 48 (basic_type -> BOOLEAN .)


state 96

    (49) basic_type -> TYPE_STRING .

    SEMI            reduce using rule 49 (basic_type -> TYPE_STRING .)
    RPAREN          reduce using rule 49 (basic_type -> TYPE_STRING .)


state 97

    (13) type_declaration -> type_declaration SEMI ID EQU . type_define
    (14) type_define -> . simple_type
    (15) type_define -> . array_type
    (16) type_define -> . record_type
    (17) simple_type -> . ID
    (18) simple_type -> . LPAREN ID DOTDOT ID RPAREN
    (19) array_type -> . ARRAY LPAREN index_range RPAREN OF ID
    (21) record_type -> . RECORD field_declarations END

    ID              shift and go to state 57
    LPAREN          shift and go to state 62
    ARRAY           shift and go to state 63
    RECORD          shift and go to state 64

    type_define                    shift and go to state 138
    simple_type                    shift and go to state 59
    array_type                     shift and go to state 60
    record_type                    shift and go to state 61

state 98

    (18) simple_type -> LPAREN ID . DOTDOT ID RPAREN

    DOTDOT          shift and go to state 139


state 99

    (19) array_type -> ARRAY LPAREN . index_range RPAREN OF ID
    (20) index_range -> . simple_type DOTDOT simple_type
    (17) simple_type -> . ID
    (18) simple_type -> . LPAREN ID DOTDOT ID RPAREN

    ID              shift and go to state 57
    LPAREN          shift and go to state 62

    index_range                    shift and go to state 140
    simple_type                    shift and go to state 141

state 100

    (21) record_type -> RECORD field_declarations . END
    (23) field_declarations -> field_declarations . field_declaration SEMI
    (24) field_declaration -> . ID COLON ID
    (25) field_declaration -> . ID COLON basic_type

    END             shift and go to state 142
    ID              shift and go to state 102

    field_declaration              shift and go to state 143

state 101

    (22) field_declarations -> field_declaration . SEMI

    SEMI            shift and go to state 144


state 102

    (24) field_declaration -> ID . COLON ID
    (25) field_declaration -> ID . COLON basic_type

    COLON           shift and go to state 145


state 103

    (29) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 29 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 104

    (31) const_declaration -> const_declaration SEMI ID EQU error . ID

    ID              shift and go to state 146


state 105

    (73) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    $end            reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    UNTIL           reduce using rule 73 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 73 (compound_statement -> BEGIN statement_list END .)


state 106

    (74) statement_list -> statement_list SEMI . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement                      shift and go to state 147
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 107

    (77) statement -> variable ASSIGN . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    variable                       shift and go to state 114
    expression                     shift and go to state 148
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    string                         shift and go to state 44

state 108

    (80) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 149


state 109

    (100) expression -> simple_expression . RELOP simple_expression
    (101) expression -> simple_expression . EQU simple_expression
    (102) expression -> simple_expression .
    (103) simple_expression -> simple_expression . ADDOP term
    (104) simple_expression -> simple_expression . OROP term

    RELOP           shift and go to state 150
    EQU             shift and go to state 151
    THEN            reduce using rule 102 (expression -> simple_expression .)
    DO              reduce using rule 102 (expression -> simple_expression .)
    END             reduce using rule 102 (expression -> simple_expression .)
    SEMI            reduce using rule 102 (expression -> simple_expression .)
    UNTIL           reduce using rule 102 (expression -> simple_expression .)
    ELSE            reduce using rule 102 (expression -> simple_expression .)
    RPAREN          reduce using rule 102 (expression -> simple_expression .)
    COMMA           reduce using rule 102 (expression -> simple_expression .)
    RBRACK          reduce using rule 102 (expression -> simple_expression .)
    TO              reduce using rule 102 (expression -> simple_expression .)
    ADDOP           shift and go to state 152
    OROP            shift and go to state 153


state 110

    (113) factor -> ADDOP . factor
    (32) const_value -> ADDOP . ICONST
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    ICONST          shift and go to state 155
    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    factor                         shift and go to state 154
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 111

    (105) simple_expression -> term .
    (106) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 105 (simple_expression -> term .)
    EQU             reduce using rule 105 (simple_expression -> term .)
    ADDOP           reduce using rule 105 (simple_expression -> term .)
    OROP            reduce using rule 105 (simple_expression -> term .)
    THEN            reduce using rule 105 (simple_expression -> term .)
    DO              reduce using rule 105 (simple_expression -> term .)
    END             reduce using rule 105 (simple_expression -> term .)
    SEMI            reduce using rule 105 (simple_expression -> term .)
    UNTIL           reduce using rule 105 (simple_expression -> term .)
    ELSE            reduce using rule 105 (simple_expression -> term .)
    RPAREN          reduce using rule 105 (simple_expression -> term .)
    COMMA           reduce using rule 105 (simple_expression -> term .)
    RBRACK          reduce using rule 105 (simple_expression -> term .)
    TO              reduce using rule 105 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 156


state 112

    (107) term -> factor .

    MULDIVANDOP     reduce using rule 107 (term -> factor .)
    RELOP           reduce using rule 107 (term -> factor .)
    EQU             reduce using rule 107 (term -> factor .)
    ADDOP           reduce using rule 107 (term -> factor .)
    OROP            reduce using rule 107 (term -> factor .)
    THEN            reduce using rule 107 (term -> factor .)
    DO              reduce using rule 107 (term -> factor .)
    END             reduce using rule 107 (term -> factor .)
    SEMI            reduce using rule 107 (term -> factor .)
    UNTIL           reduce using rule 107 (term -> factor .)
    ELSE            reduce using rule 107 (term -> factor .)
    RPAREN          reduce using rule 107 (term -> factor .)
    COMMA           reduce using rule 107 (term -> factor .)
    RBRACK          reduce using rule 107 (term -> factor .)
    TO              reduce using rule 107 (term -> factor .)


state 113

    (108) factor -> const_value .

    MULDIVANDOP     reduce using rule 108 (factor -> const_value .)
    RELOP           reduce using rule 108 (factor -> const_value .)
    EQU             reduce using rule 108 (factor -> const_value .)
    ADDOP           reduce using rule 108 (factor -> const_value .)
    OROP            reduce using rule 108 (factor -> const_value .)
    THEN            reduce using rule 108 (factor -> const_value .)
    DO              reduce using rule 108 (factor -> const_value .)
    END             reduce using rule 108 (factor -> const_value .)
    SEMI            reduce using rule 108 (factor -> const_value .)
    UNTIL           reduce using rule 108 (factor -> const_value .)
    ELSE            reduce using rule 108 (factor -> const_value .)
    RPAREN          reduce using rule 108 (factor -> const_value .)
    COMMA           reduce using rule 108 (factor -> const_value .)
    RBRACK          reduce using rule 108 (factor -> const_value .)
    TO              reduce using rule 108 (factor -> const_value .)


state 114

    (109) factor -> variable .

    MULDIVANDOP     reduce using rule 109 (factor -> variable .)
    RELOP           reduce using rule 109 (factor -> variable .)
    EQU             reduce using rule 109 (factor -> variable .)
    ADDOP           reduce using rule 109 (factor -> variable .)
    OROP            reduce using rule 109 (factor -> variable .)
    THEN            reduce using rule 109 (factor -> variable .)
    DO              reduce using rule 109 (factor -> variable .)
    END             reduce using rule 109 (factor -> variable .)
    SEMI            reduce using rule 109 (factor -> variable .)
    UNTIL           reduce using rule 109 (factor -> variable .)
    ELSE            reduce using rule 109 (factor -> variable .)
    RPAREN          reduce using rule 109 (factor -> variable .)
    COMMA           reduce using rule 109 (factor -> variable .)
    RBRACK          reduce using rule 109 (factor -> variable .)
    TO              reduce using rule 109 (factor -> variable .)


state 115

    (110) factor -> LPAREN . expression RPAREN
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 157
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 116

    (111) factor -> ID . LPAREN expression_list RPAREN
    (90) variable -> ID . id_varpart
    (91) id_varpart -> . LBRACK expression_list RBRACK
    (92) id_varpart -> . DOT ID id_varpart
    (93) id_varpart -> . empty
    (115) empty -> .

    LPAREN          shift and go to state 158
    LBRACK          shift and go to state 121
    DOT             shift and go to state 122
    MULDIVANDOP     reduce using rule 115 (empty -> .)
    RELOP           reduce using rule 115 (empty -> .)
    EQU             reduce using rule 115 (empty -> .)
    ADDOP           reduce using rule 115 (empty -> .)
    OROP            reduce using rule 115 (empty -> .)
    THEN            reduce using rule 115 (empty -> .)
    DO              reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    RPAREN          reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    RBRACK          reduce using rule 115 (empty -> .)
    TO              reduce using rule 115 (empty -> .)

    id_varpart                     shift and go to state 119
    empty                          shift and go to state 123

state 117

    (112) factor -> NOTOP . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    factor                         shift and go to state 159
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 118

    (81) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 160


state 119

    (90) variable -> ID id_varpart .

    ASSIGN          reduce using rule 90 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 90 (variable -> ID id_varpart .)
    RELOP           reduce using rule 90 (variable -> ID id_varpart .)
    EQU             reduce using rule 90 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 90 (variable -> ID id_varpart .)
    OROP            reduce using rule 90 (variable -> ID id_varpart .)
    THEN            reduce using rule 90 (variable -> ID id_varpart .)
    DO              reduce using rule 90 (variable -> ID id_varpart .)
    END             reduce using rule 90 (variable -> ID id_varpart .)
    SEMI            reduce using rule 90 (variable -> ID id_varpart .)
    UNTIL           reduce using rule 90 (variable -> ID id_varpart .)
    ELSE            reduce using rule 90 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 90 (variable -> ID id_varpart .)
    COMMA           reduce using rule 90 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 90 (variable -> ID id_varpart .)
    TO              reduce using rule 90 (variable -> ID id_varpart .)


state 120

    (95) procedure_call -> ID LPAREN . expression_list RPAREN
    (98) expression_list -> . expression_list COMMA expression
    (99) expression_list -> . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression_list                shift and go to state 161
    expression                     shift and go to state 162
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 121

    (91) id_varpart -> LBRACK . expression_list RBRACK
    (98) expression_list -> . expression_list COMMA expression
    (99) expression_list -> . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression_list                shift and go to state 163
    expression                     shift and go to state 162
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 122

    (92) id_varpart -> DOT . ID id_varpart

    ID              shift and go to state 164


state 123

    (93) id_varpart -> empty .

    ASSIGN          reduce using rule 93 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 93 (id_varpart -> empty .)
    RELOP           reduce using rule 93 (id_varpart -> empty .)
    EQU             reduce using rule 93 (id_varpart -> empty .)
    ADDOP           reduce using rule 93 (id_varpart -> empty .)
    OROP            reduce using rule 93 (id_varpart -> empty .)
    THEN            reduce using rule 93 (id_varpart -> empty .)
    DO              reduce using rule 93 (id_varpart -> empty .)
    END             reduce using rule 93 (id_varpart -> empty .)
    SEMI            reduce using rule 93 (id_varpart -> empty .)
    UNTIL           reduce using rule 93 (id_varpart -> empty .)
    ELSE            reduce using rule 93 (id_varpart -> empty .)
    RPAREN          reduce using rule 93 (id_varpart -> empty .)
    COMMA           reduce using rule 93 (id_varpart -> empty .)
    RBRACK          reduce using rule 93 (id_varpart -> empty .)
    TO              reduce using rule 93 (id_varpart -> empty .)


state 124

    (82) statement -> READ LPAREN . variable_list RPAREN
    (88) variable_list -> . variable_list COMMA variable
    (89) variable_list -> . variable
    (90) variable -> . ID id_varpart

    ID              shift and go to state 167

    variable_list                  shift and go to state 165
    variable                       shift and go to state 166

state 125

    (83) statement -> WRITE LPAREN . expression_list RPAREN
    (98) expression_list -> . expression_list COMMA expression
    (99) expression_list -> . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression_list                shift and go to state 168
    expression                     shift and go to state 162
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 126

    (84) statement -> READLN LPAREN . variable_list RPAREN
    (88) variable_list -> . variable_list COMMA variable
    (89) variable_list -> . variable
    (90) variable -> . ID id_varpart

    ID              shift and go to state 167

    variable_list                  shift and go to state 169
    variable                       shift and go to state 166

state 127

    (85) statement -> WRITELN LPAREN . expression_list RPAREN
    (98) expression_list -> . expression_list COMMA expression
    (99) expression_list -> . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression_list                shift and go to state 170
    expression                     shift and go to state 162
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 128

    (86) statement -> REPEAT statement_list . UNTIL expression
    (74) statement_list -> statement_list . SEMI statement

    UNTIL           shift and go to state 171
    SEMI            shift and go to state 106


state 129

    (87) statement -> WHILE expression . DO statement

    DO              shift and go to state 172


state 130

    (60) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 60 (subprogram -> subprogram_head SEMI subprogram_body .)


state 131

    (72) subprogram_body -> const_declarations . var_declarations compound_statement
    (38) var_declarations -> . VAR var_declaration SEMI
    (39) var_declarations -> . empty
    (115) empty -> .

    VAR             shift and go to state 20
    BEGIN           reduce using rule 115 (empty -> .)

    var_declarations               shift and go to state 173
    empty                          shift and go to state 21

state 132

    (61) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 61 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 133

    (63) formal_parameter -> LPAREN . parameter_list RPAREN
    (65) parameter_list -> . parameter_list SEMI parameter
    (66) parameter_list -> . parameter
    (67) parameter -> . var_parameter
    (68) parameter -> . value_parameter
    (69) var_parameter -> . VAR value_parameter
    (70) value_parameter -> . idlist COLON basic_type
    (71) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 178
    ID              shift and go to state 17

    parameter_list                 shift and go to state 174
    parameter                      shift and go to state 175
    var_parameter                  shift and go to state 176
    value_parameter                shift and go to state 177
    idlist                         shift and go to state 179

state 134

    (64) formal_parameter -> empty .

    SEMI            reduce using rule 64 (formal_parameter -> empty .)
    COLON           reduce using rule 64 (formal_parameter -> empty .)


state 135

    (62) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 180


state 136

    (41) var_declaration -> var_declaration SEMI idlist COLON . type
    (42) type -> . basic_type
    (43) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (44) type -> . ID
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 90
    ID              shift and go to state 91
    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    type                           shift and go to state 181
    basic_type                     shift and go to state 89

state 137

    (43) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (54) period -> . my_period_part DOTDOT my_period_part
    (55) period -> . period COMMA my_period_part DOTDOT my_period_part
    (56) period -> . RCONST
    (57) period -> . period COMMA RCONST
    (50) my_period_part -> . ADDOP ICONST
    (51) my_period_part -> . ICONST
    (52) my_period_part -> . CCONST
    (53) my_period_part -> . ID

    RCONST          shift and go to state 184
    ADDOP           shift and go to state 185
    ICONST          shift and go to state 186
    CCONST          shift and go to state 187
    ID              shift and go to state 188

    period                         shift and go to state 182
    my_period_part                 shift and go to state 183

state 138

    (13) type_declaration -> type_declaration SEMI ID EQU type_define .

    SEMI            reduce using rule 13 (type_declaration -> type_declaration SEMI ID EQU type_define .)


state 139

    (18) simple_type -> LPAREN ID DOTDOT . ID RPAREN

    ID              shift and go to state 189


state 140

    (19) array_type -> ARRAY LPAREN index_range . RPAREN OF ID

    RPAREN          shift and go to state 190


state 141

    (20) index_range -> simple_type . DOTDOT simple_type

    DOTDOT          shift and go to state 191


state 142

    (21) record_type -> RECORD field_declarations END .

    SEMI            reduce using rule 21 (record_type -> RECORD field_declarations END .)


state 143

    (23) field_declarations -> field_declarations field_declaration . SEMI

    SEMI            shift and go to state 192


state 144

    (22) field_declarations -> field_declaration SEMI .

    END             reduce using rule 22 (field_declarations -> field_declaration SEMI .)
    ID              reduce using rule 22 (field_declarations -> field_declaration SEMI .)


state 145

    (24) field_declaration -> ID COLON . ID
    (25) field_declaration -> ID COLON . basic_type
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    ID              shift and go to state 193
    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    basic_type                     shift and go to state 194

state 146

    (31) const_declaration -> const_declaration SEMI ID EQU error ID .

    SEMI            reduce using rule 31 (const_declaration -> const_declaration SEMI ID EQU error ID .)


state 147

    (74) statement_list -> statement_list SEMI statement .

    END             reduce using rule 74 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 74 (statement_list -> statement_list SEMI statement .)
    UNTIL           reduce using rule 74 (statement_list -> statement_list SEMI statement .)


state 148

    (77) statement -> variable ASSIGN expression .

    END             reduce using rule 77 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 77 (statement -> variable ASSIGN expression .)
    UNTIL           reduce using rule 77 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 77 (statement -> variable ASSIGN expression .)


state 149

    (80) statement -> IF expression THEN . statement else_part
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    ELSE            reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement                      shift and go to state 195
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 150

    (100) expression -> simple_expression RELOP . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    simple_expression              shift and go to state 196
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 151

    (101) expression -> simple_expression EQU . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    simple_expression              shift and go to state 197
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 152

    (103) simple_expression -> simple_expression ADDOP . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    term                           shift and go to state 198
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 153

    (104) simple_expression -> simple_expression OROP . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    term                           shift and go to state 199
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 154

    (113) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 113 (factor -> ADDOP factor .)
    RELOP           reduce using rule 113 (factor -> ADDOP factor .)
    EQU             reduce using rule 113 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 113 (factor -> ADDOP factor .)
    OROP            reduce using rule 113 (factor -> ADDOP factor .)
    THEN            reduce using rule 113 (factor -> ADDOP factor .)
    DO              reduce using rule 113 (factor -> ADDOP factor .)
    END             reduce using rule 113 (factor -> ADDOP factor .)
    SEMI            reduce using rule 113 (factor -> ADDOP factor .)
    UNTIL           reduce using rule 113 (factor -> ADDOP factor .)
    ELSE            reduce using rule 113 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 113 (factor -> ADDOP factor .)
    COMMA           reduce using rule 113 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 113 (factor -> ADDOP factor .)
    TO              reduce using rule 113 (factor -> ADDOP factor .)


state 155

    (32) const_value -> ADDOP ICONST .
    (33) const_value -> ICONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for EQU resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for OROP resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for THEN resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for DO resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for END resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for UNTIL resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 32 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for TO resolved using rule 32 (const_value -> ADDOP ICONST .)
    MULDIVANDOP     reduce using rule 32 (const_value -> ADDOP ICONST .)
    RELOP           reduce using rule 32 (const_value -> ADDOP ICONST .)
    EQU             reduce using rule 32 (const_value -> ADDOP ICONST .)
    ADDOP           reduce using rule 32 (const_value -> ADDOP ICONST .)
    OROP            reduce using rule 32 (const_value -> ADDOP ICONST .)
    THEN            reduce using rule 32 (const_value -> ADDOP ICONST .)
    DO              reduce using rule 32 (const_value -> ADDOP ICONST .)
    END             reduce using rule 32 (const_value -> ADDOP ICONST .)
    SEMI            reduce using rule 32 (const_value -> ADDOP ICONST .)
    UNTIL           reduce using rule 32 (const_value -> ADDOP ICONST .)
    ELSE            reduce using rule 32 (const_value -> ADDOP ICONST .)
    RPAREN          reduce using rule 32 (const_value -> ADDOP ICONST .)
    COMMA           reduce using rule 32 (const_value -> ADDOP ICONST .)
    RBRACK          reduce using rule 32 (const_value -> ADDOP ICONST .)
    TO              reduce using rule 32 (const_value -> ADDOP ICONST .)

  ! MULDIVANDOP     [ reduce using rule 33 (const_value -> ICONST .) ]
  ! RELOP           [ reduce using rule 33 (const_value -> ICONST .) ]
  ! EQU             [ reduce using rule 33 (const_value -> ICONST .) ]
  ! ADDOP           [ reduce using rule 33 (const_value -> ICONST .) ]
  ! OROP            [ reduce using rule 33 (const_value -> ICONST .) ]
  ! THEN            [ reduce using rule 33 (const_value -> ICONST .) ]
  ! DO              [ reduce using rule 33 (const_value -> ICONST .) ]
  ! END             [ reduce using rule 33 (const_value -> ICONST .) ]
  ! SEMI            [ reduce using rule 33 (const_value -> ICONST .) ]
  ! UNTIL           [ reduce using rule 33 (const_value -> ICONST .) ]
  ! ELSE            [ reduce using rule 33 (const_value -> ICONST .) ]
  ! RPAREN          [ reduce using rule 33 (const_value -> ICONST .) ]
  ! COMMA           [ reduce using rule 33 (const_value -> ICONST .) ]
  ! RBRACK          [ reduce using rule 33 (const_value -> ICONST .) ]
  ! TO              [ reduce using rule 33 (const_value -> ICONST .) ]


state 156

    (106) term -> term MULDIVANDOP . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    factor                         shift and go to state 200
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 157

    (110) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 201


state 158

    (111) factor -> ID LPAREN . expression_list RPAREN
    (98) expression_list -> . expression_list COMMA expression
    (99) expression_list -> . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression_list                shift and go to state 202
    expression                     shift and go to state 162
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 159

    (112) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 112 (factor -> NOTOP factor .)
    RELOP           reduce using rule 112 (factor -> NOTOP factor .)
    EQU             reduce using rule 112 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 112 (factor -> NOTOP factor .)
    OROP            reduce using rule 112 (factor -> NOTOP factor .)
    THEN            reduce using rule 112 (factor -> NOTOP factor .)
    DO              reduce using rule 112 (factor -> NOTOP factor .)
    END             reduce using rule 112 (factor -> NOTOP factor .)
    SEMI            reduce using rule 112 (factor -> NOTOP factor .)
    UNTIL           reduce using rule 112 (factor -> NOTOP factor .)
    ELSE            reduce using rule 112 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 112 (factor -> NOTOP factor .)
    COMMA           reduce using rule 112 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 112 (factor -> NOTOP factor .)
    TO              reduce using rule 112 (factor -> NOTOP factor .)


state 160

    (81) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 203
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 161

    (95) procedure_call -> ID LPAREN expression_list . RPAREN
    (98) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 205


state 162

    (99) expression_list -> expression .

    RPAREN          reduce using rule 99 (expression_list -> expression .)
    COMMA           reduce using rule 99 (expression_list -> expression .)
    RBRACK          reduce using rule 99 (expression_list -> expression .)


state 163

    (91) id_varpart -> LBRACK expression_list . RBRACK
    (98) expression_list -> expression_list . COMMA expression

    RBRACK          shift and go to state 206
    COMMA           shift and go to state 205


state 164

    (92) id_varpart -> DOT ID . id_varpart
    (91) id_varpart -> . LBRACK expression_list RBRACK
    (92) id_varpart -> . DOT ID id_varpart
    (93) id_varpart -> . empty
    (115) empty -> .

    LBRACK          shift and go to state 121
    DOT             shift and go to state 122
    ASSIGN          reduce using rule 115 (empty -> .)
    MULDIVANDOP     reduce using rule 115 (empty -> .)
    RELOP           reduce using rule 115 (empty -> .)
    EQU             reduce using rule 115 (empty -> .)
    ADDOP           reduce using rule 115 (empty -> .)
    OROP            reduce using rule 115 (empty -> .)
    THEN            reduce using rule 115 (empty -> .)
    DO              reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    RPAREN          reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    RBRACK          reduce using rule 115 (empty -> .)
    TO              reduce using rule 115 (empty -> .)

    id_varpart                     shift and go to state 207
    empty                          shift and go to state 123

state 165

    (82) statement -> READ LPAREN variable_list . RPAREN
    (88) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 208
    COMMA           shift and go to state 209


state 166

    (89) variable_list -> variable .

    RPAREN          reduce using rule 89 (variable_list -> variable .)
    COMMA           reduce using rule 89 (variable_list -> variable .)


state 167

    (90) variable -> ID . id_varpart
    (91) id_varpart -> . LBRACK expression_list RBRACK
    (92) id_varpart -> . DOT ID id_varpart
    (93) id_varpart -> . empty
    (115) empty -> .

    LBRACK          shift and go to state 121
    DOT             shift and go to state 122
    RPAREN          reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)

    id_varpart                     shift and go to state 119
    empty                          shift and go to state 123

state 168

    (83) statement -> WRITE LPAREN expression_list . RPAREN
    (98) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 205


state 169

    (84) statement -> READLN LPAREN variable_list . RPAREN
    (88) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 211
    COMMA           shift and go to state 209


state 170

    (85) statement -> WRITELN LPAREN expression_list . RPAREN
    (98) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 212
    COMMA           shift and go to state 205


state 171

    (86) statement -> REPEAT statement_list UNTIL . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 213
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 172

    (87) statement -> WHILE expression DO . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    ELSE            reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement                      shift and go to state 214
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 173

    (72) subprogram_body -> const_declarations var_declarations . compound_statement
    (73) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 50

    compound_statement             shift and go to state 215

state 174

    (63) formal_parameter -> LPAREN parameter_list . RPAREN
    (65) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 216
    SEMI            shift and go to state 217


state 175

    (66) parameter_list -> parameter .

    RPAREN          reduce using rule 66 (parameter_list -> parameter .)
    SEMI            reduce using rule 66 (parameter_list -> parameter .)


state 176

    (67) parameter -> var_parameter .

    RPAREN          reduce using rule 67 (parameter -> var_parameter .)
    SEMI            reduce using rule 67 (parameter -> var_parameter .)


state 177

    (68) parameter -> value_parameter .

    RPAREN          reduce using rule 68 (parameter -> value_parameter .)
    SEMI            reduce using rule 68 (parameter -> value_parameter .)


state 178

    (69) var_parameter -> VAR . value_parameter
    (70) value_parameter -> . idlist COLON basic_type
    (71) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    value_parameter                shift and go to state 218
    idlist                         shift and go to state 179

state 179

    (70) value_parameter -> idlist . COLON basic_type
    (71) value_parameter -> idlist . error basic_type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 219
    error           shift and go to state 220
    COMMA           shift and go to state 28


state 180

    (62) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    basic_type                     shift and go to state 221

state 181

    (41) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 41 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 182

    (43) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (55) period -> period . COMMA my_period_part DOTDOT my_period_part
    (57) period -> period . COMMA RCONST

    RBRACK          shift and go to state 222
    COMMA           shift and go to state 223


state 183

    (54) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 224


state 184

    (56) period -> RCONST .

    RBRACK          reduce using rule 56 (period -> RCONST .)
    COMMA           reduce using rule 56 (period -> RCONST .)


state 185

    (50) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 225


state 186

    (51) my_period_part -> ICONST .

    DOTDOT          reduce using rule 51 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 51 (my_period_part -> ICONST .)
    COMMA           reduce using rule 51 (my_period_part -> ICONST .)


state 187

    (52) my_period_part -> CCONST .

    DOTDOT          reduce using rule 52 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 52 (my_period_part -> CCONST .)
    COMMA           reduce using rule 52 (my_period_part -> CCONST .)


state 188

    (53) my_period_part -> ID .

    DOTDOT          reduce using rule 53 (my_period_part -> ID .)
    RBRACK          reduce using rule 53 (my_period_part -> ID .)
    COMMA           reduce using rule 53 (my_period_part -> ID .)


state 189

    (18) simple_type -> LPAREN ID DOTDOT ID . RPAREN

    RPAREN          shift and go to state 226


state 190

    (19) array_type -> ARRAY LPAREN index_range RPAREN . OF ID

    OF              shift and go to state 227


state 191

    (20) index_range -> simple_type DOTDOT . simple_type
    (17) simple_type -> . ID
    (18) simple_type -> . LPAREN ID DOTDOT ID RPAREN

    ID              shift and go to state 57
    LPAREN          shift and go to state 62

    simple_type                    shift and go to state 228

state 192

    (23) field_declarations -> field_declarations field_declaration SEMI .

    END             reduce using rule 23 (field_declarations -> field_declarations field_declaration SEMI .)
    ID              reduce using rule 23 (field_declarations -> field_declarations field_declaration SEMI .)


state 193

    (24) field_declaration -> ID COLON ID .

    SEMI            reduce using rule 24 (field_declaration -> ID COLON ID .)


state 194

    (25) field_declaration -> ID COLON basic_type .

    SEMI            reduce using rule 25 (field_declaration -> ID COLON basic_type .)


state 195

    (80) statement -> IF expression THEN statement . else_part
    (96) else_part -> . ELSE statement
    (97) else_part -> . empty
    (115) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 230
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)

  ! ELSE            [ reduce using rule 115 (empty -> .) ]

    else_part                      shift and go to state 229
    empty                          shift and go to state 231

state 196

    (100) expression -> simple_expression RELOP simple_expression .
    (103) simple_expression -> simple_expression . ADDOP term
    (104) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    UNTIL           reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 100 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 152
    OROP            shift and go to state 153


state 197

    (101) expression -> simple_expression EQU simple_expression .
    (103) simple_expression -> simple_expression . ADDOP term
    (104) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    UNTIL           reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 101 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 152
    OROP            shift and go to state 153


state 198

    (103) simple_expression -> simple_expression ADDOP term .
    (106) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    OROP            reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    UNTIL           reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 103 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 156


state 199

    (104) simple_expression -> simple_expression OROP term .
    (106) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    EQU             reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    ADDOP           reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    OROP            reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    THEN            reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    DO              reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    END             reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    SEMI            reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    UNTIL           reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    ELSE            reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    RPAREN          reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    COMMA           reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    RBRACK          reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    TO              reduce using rule 104 (simple_expression -> simple_expression OROP term .)
    MULDIVANDOP     shift and go to state 156


state 200

    (106) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 106 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 106 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 106 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 106 (term -> term MULDIVANDOP factor .)
    OROP            reduce using rule 106 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 106 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 106 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 106 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 106 (term -> term MULDIVANDOP factor .)
    UNTIL           reduce using rule 106 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 106 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 106 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 106 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 106 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 106 (term -> term MULDIVANDOP factor .)


state 201

    (110) factor -> LPAREN expression RPAREN .

    MULDIVANDOP     reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    EQU             reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    OROP            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 110 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 110 (factor -> LPAREN expression RPAREN .)


state 202

    (111) factor -> ID LPAREN expression_list . RPAREN
    (98) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 232
    COMMA           shift and go to state 205


state 203

    (81) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 233


state 204

    (95) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 95 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 95 (procedure_call -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 95 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 95 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 205

    (98) expression_list -> expression_list COMMA . expression
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 234
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 206

    (91) id_varpart -> LBRACK expression_list RBRACK .

    ASSIGN          reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    MULDIVANDOP     reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    RELOP           reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    EQU             reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    ADDOP           reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    OROP            reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    THEN            reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    DO              reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    END             reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    SEMI            reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    UNTIL           reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    ELSE            reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    RPAREN          reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    COMMA           reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    RBRACK          reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)
    TO              reduce using rule 91 (id_varpart -> LBRACK expression_list RBRACK .)


state 207

    (92) id_varpart -> DOT ID id_varpart .

    ASSIGN          reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    MULDIVANDOP     reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    RELOP           reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    EQU             reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    ADDOP           reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    OROP            reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    THEN            reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    DO              reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    END             reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    SEMI            reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    UNTIL           reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    ELSE            reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    RPAREN          reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    COMMA           reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    RBRACK          reduce using rule 92 (id_varpart -> DOT ID id_varpart .)
    TO              reduce using rule 92 (id_varpart -> DOT ID id_varpart .)


state 208

    (82) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 82 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 82 (statement -> READ LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 82 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 82 (statement -> READ LPAREN variable_list RPAREN .)


state 209

    (88) variable_list -> variable_list COMMA . variable
    (90) variable -> . ID id_varpart

    ID              shift and go to state 167

    variable                       shift and go to state 235

state 210

    (83) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 83 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 83 (statement -> WRITE LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 83 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 83 (statement -> WRITE LPAREN expression_list RPAREN .)


state 211

    (84) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 84 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 84 (statement -> READLN LPAREN variable_list RPAREN .)
    UNTIL           reduce using rule 84 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 84 (statement -> READLN LPAREN variable_list RPAREN .)


state 212

    (85) statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 85 (statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 85 (statement -> WRITELN LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 85 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 85 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 213

    (86) statement -> REPEAT statement_list UNTIL expression .

    END             reduce using rule 86 (statement -> REPEAT statement_list UNTIL expression .)
    SEMI            reduce using rule 86 (statement -> REPEAT statement_list UNTIL expression .)
    UNTIL           reduce using rule 86 (statement -> REPEAT statement_list UNTIL expression .)
    ELSE            reduce using rule 86 (statement -> REPEAT statement_list UNTIL expression .)


state 214

    (87) statement -> WHILE expression DO statement .

    END             reduce using rule 87 (statement -> WHILE expression DO statement .)
    SEMI            reduce using rule 87 (statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 87 (statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 87 (statement -> WHILE expression DO statement .)


state 215

    (72) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 72 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 216

    (63) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 63 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 63 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 217

    (65) parameter_list -> parameter_list SEMI . parameter
    (67) parameter -> . var_parameter
    (68) parameter -> . value_parameter
    (69) var_parameter -> . VAR value_parameter
    (70) value_parameter -> . idlist COLON basic_type
    (71) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 178
    ID              shift and go to state 17

    parameter                      shift and go to state 236
    var_parameter                  shift and go to state 176
    value_parameter                shift and go to state 177
    idlist                         shift and go to state 179

state 218

    (69) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 69 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 69 (var_parameter -> VAR value_parameter .)


state 219

    (70) value_parameter -> idlist COLON . basic_type
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    basic_type                     shift and go to state 237

state 220

    (71) value_parameter -> idlist error . basic_type
    (7) idlist -> idlist error . ID
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    ID              shift and go to state 47
    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    basic_type                     shift and go to state 238

state 221

    (62) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 62 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 222

    (43) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 239


state 223

    (55) period -> period COMMA . my_period_part DOTDOT my_period_part
    (57) period -> period COMMA . RCONST
    (50) my_period_part -> . ADDOP ICONST
    (51) my_period_part -> . ICONST
    (52) my_period_part -> . CCONST
    (53) my_period_part -> . ID

    RCONST          shift and go to state 241
    ADDOP           shift and go to state 185
    ICONST          shift and go to state 186
    CCONST          shift and go to state 187
    ID              shift and go to state 188

    my_period_part                 shift and go to state 240

state 224

    (54) period -> my_period_part DOTDOT . my_period_part
    (50) my_period_part -> . ADDOP ICONST
    (51) my_period_part -> . ICONST
    (52) my_period_part -> . CCONST
    (53) my_period_part -> . ID

    ADDOP           shift and go to state 185
    ICONST          shift and go to state 186
    CCONST          shift and go to state 187
    ID              shift and go to state 188

    my_period_part                 shift and go to state 242

state 225

    (50) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 50 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 50 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 50 (my_period_part -> ADDOP ICONST .)


state 226

    (18) simple_type -> LPAREN ID DOTDOT ID RPAREN .

    SEMI            reduce using rule 18 (simple_type -> LPAREN ID DOTDOT ID RPAREN .)
    DOTDOT          reduce using rule 18 (simple_type -> LPAREN ID DOTDOT ID RPAREN .)
    RPAREN          reduce using rule 18 (simple_type -> LPAREN ID DOTDOT ID RPAREN .)


state 227

    (19) array_type -> ARRAY LPAREN index_range RPAREN OF . ID

    ID              shift and go to state 243


state 228

    (20) index_range -> simple_type DOTDOT simple_type .

    RPAREN          reduce using rule 20 (index_range -> simple_type DOTDOT simple_type .)


state 229

    (80) statement -> IF expression THEN statement else_part .

    END             reduce using rule 80 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 80 (statement -> IF expression THEN statement else_part .)
    UNTIL           reduce using rule 80 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 80 (statement -> IF expression THEN statement else_part .)


state 230

    (96) else_part -> ELSE . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    ELSE            reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement                      shift and go to state 244
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 231

    (97) else_part -> empty .

    ELSE            reduce using rule 97 (else_part -> empty .)
    END             reduce using rule 97 (else_part -> empty .)
    SEMI            reduce using rule 97 (else_part -> empty .)
    UNTIL           reduce using rule 97 (else_part -> empty .)


state 232

    (111) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    OROP            reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    UNTIL           reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 111 (factor -> ID LPAREN expression_list RPAREN .)


state 233

    (81) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (100) expression -> . simple_expression RELOP simple_expression
    (101) expression -> . simple_expression EQU simple_expression
    (102) expression -> . simple_expression
    (103) simple_expression -> . simple_expression ADDOP term
    (104) simple_expression -> . simple_expression OROP term
    (105) simple_expression -> . term
    (106) term -> . term MULDIVANDOP factor
    (107) term -> . factor
    (108) factor -> . const_value
    (109) factor -> . variable
    (110) factor -> . LPAREN expression RPAREN
    (111) factor -> . ID LPAREN expression_list RPAREN
    (112) factor -> . NOTOP factor
    (113) factor -> . ADDOP factor
    (32) const_value -> . ADDOP ICONST
    (33) const_value -> . ICONST
    (34) const_value -> . RCONST
    (35) const_value -> . CCONST
    (36) const_value -> . BCONST
    (37) const_value -> . string
    (90) variable -> . ID id_varpart
    (114) string -> . STRING

    LPAREN          shift and go to state 115
    ID              shift and go to state 116
    NOTOP           shift and go to state 117
    ADDOP           shift and go to state 110
    ICONST          shift and go to state 40
    RCONST          shift and go to state 41
    CCONST          shift and go to state 42
    BCONST          shift and go to state 43
    STRING          shift and go to state 45

    expression                     shift and go to state 245
    simple_expression              shift and go to state 109
    term                           shift and go to state 111
    factor                         shift and go to state 112
    const_value                    shift and go to state 113
    variable                       shift and go to state 114
    string                         shift and go to state 44

state 234

    (98) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 98 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 98 (expression_list -> expression_list COMMA expression .)
    RBRACK          reduce using rule 98 (expression_list -> expression_list COMMA expression .)


state 235

    (88) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 88 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 88 (variable_list -> variable_list COMMA variable .)


state 236

    (65) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 65 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 65 (parameter_list -> parameter_list SEMI parameter .)


state 237

    (70) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 70 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 70 (value_parameter -> idlist COLON basic_type .)


state 238

    (71) value_parameter -> idlist error basic_type .

    RPAREN          reduce using rule 71 (value_parameter -> idlist error basic_type .)
    SEMI            reduce using rule 71 (value_parameter -> idlist error basic_type .)


state 239

    (43) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (45) basic_type -> . INTEGER
    (46) basic_type -> . REAL
    (47) basic_type -> . CHAR
    (48) basic_type -> . BOOLEAN
    (49) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 92
    REAL            shift and go to state 93
    CHAR            shift and go to state 94
    BOOLEAN         shift and go to state 95
    TYPE_STRING     shift and go to state 96

    basic_type                     shift and go to state 246

state 240

    (55) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 247


state 241

    (57) period -> period COMMA RCONST .

    RBRACK          reduce using rule 57 (period -> period COMMA RCONST .)
    COMMA           reduce using rule 57 (period -> period COMMA RCONST .)


state 242

    (54) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 54 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 54 (period -> my_period_part DOTDOT my_period_part .)


state 243

    (19) array_type -> ARRAY LPAREN index_range RPAREN OF ID .

    SEMI            reduce using rule 19 (array_type -> ARRAY LPAREN index_range RPAREN OF ID .)


state 244

    (96) else_part -> ELSE statement .

    ELSE            reduce using rule 96 (else_part -> ELSE statement .)
    END             reduce using rule 96 (else_part -> ELSE statement .)
    SEMI            reduce using rule 96 (else_part -> ELSE statement .)
    UNTIL           reduce using rule 96 (else_part -> ELSE statement .)


state 245

    (81) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 248


state 246

    (43) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 43 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 247

    (55) period -> period COMMA my_period_part DOTDOT . my_period_part
    (50) my_period_part -> . ADDOP ICONST
    (51) my_period_part -> . ICONST
    (52) my_period_part -> . CCONST
    (53) my_period_part -> . ID

    ADDOP           shift and go to state 185
    ICONST          shift and go to state 186
    CCONST          shift and go to state 187
    ID              shift and go to state 188

    my_period_part                 shift and go to state 249

state 248

    (81) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (76) statement -> . empty
    (77) statement -> . variable ASSIGN expression
    (78) statement -> . procedure_call
    (79) statement -> . compound_statement
    (80) statement -> . IF expression THEN statement else_part
    (81) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (82) statement -> . READ LPAREN variable_list RPAREN
    (83) statement -> . WRITE LPAREN expression_list RPAREN
    (84) statement -> . READLN LPAREN variable_list RPAREN
    (85) statement -> . WRITELN LPAREN expression_list RPAREN
    (86) statement -> . REPEAT statement_list UNTIL expression
    (87) statement -> . WHILE expression DO statement
    (115) empty -> .
    (90) variable -> . ID id_varpart
    (94) procedure_call -> . ID
    (95) procedure_call -> . ID LPAREN expression_list RPAREN
    (73) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 75
    FOR             shift and go to state 76
    READ            shift and go to state 78
    WRITE           shift and go to state 79
    READLN          shift and go to state 80
    WRITELN         shift and go to state 81
    REPEAT          shift and go to state 82
    WHILE           shift and go to state 83
    ELSE            reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    SEMI            reduce using rule 115 (empty -> .)
    UNTIL           reduce using rule 115 (empty -> .)
    ID              shift and go to state 77
    BEGIN           shift and go to state 50

    statement                      shift and go to state 250
    empty                          shift and go to state 71
    variable                       shift and go to state 72
    procedure_call                 shift and go to state 73
    compound_statement             shift and go to state 74

state 249

    (55) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 55 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 55 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 250

    (81) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 81 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 81 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    UNTIL           reduce using rule 81 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 81 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 17 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 195 resolved as shift
WARNING: reduce/reduce conflict in state 155 resolved using rule (const_value -> ADDOP ICONST)
WARNING: rejected rule (const_value -> ICONST) in state 155
