Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    RCURL
    RECORD
    SET
    TYPE
    WHILE
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program -> program_head SEMI program_body
Rule 3     program_head -> PROGRAM ID
Rule 4     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 5     idlist -> idlist COMMA ID
Rule 6     idlist -> ID
Rule 7     idlist -> idlist error ID
Rule 8     idlist -> ID error
Rule 9     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 10    const_declarations -> CONST const_declaration SEMI
Rule 11    const_declarations -> empty
Rule 12    const_declaration -> ID EQU const_value
Rule 13    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 14    const_declaration -> ID EQU error ID
Rule 15    const_declaration -> const_declaration SEMI ID EQU error ID
Rule 16    const_value -> ADDOP ICONST
Rule 17    const_value -> ICONST
Rule 18    const_value -> RCONST
Rule 19    const_value -> ADDOP RCONST
Rule 20    const_value -> CCONST
Rule 21    const_value -> BCONST
Rule 22    const_value -> string
Rule 23    var_declarations -> VAR var_declaration SEMI
Rule 24    var_declarations -> empty
Rule 25    var_declaration -> idlist COLON type
Rule 26    var_declaration -> var_declaration SEMI idlist COLON type
Rule 27    type -> basic_type
Rule 28    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 29    basic_type -> INTEGER
Rule 30    basic_type -> REAL
Rule 31    basic_type -> CHAR
Rule 32    basic_type -> BOOLEAN
Rule 33    basic_type -> TYPE_STRING
Rule 34    my_period_part -> ADDOP ICONST
Rule 35    my_period_part -> ICONST
Rule 36    my_period_part -> CCONST
Rule 37    my_period_part -> ID
Rule 38    period -> my_period_part DOTDOT my_period_part
Rule 39    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 40    period -> RCONST
Rule 41    period -> period COMMA RCONST
Rule 42    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 43    subprogram_declarations -> empty
Rule 44    subprogram -> subprogram_head SEMI subprogram_body
Rule 45    subprogram_head -> PROCEDURE ID formal_parameter
Rule 46    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 47    formal_parameter -> LPAREN parameter_list RPAREN
Rule 48    formal_parameter -> empty
Rule 49    parameter_list -> parameter_list SEMI parameter
Rule 50    parameter_list -> parameter
Rule 51    parameter -> var_parameter
Rule 52    parameter -> value_parameter
Rule 53    var_parameter -> VAR value_parameter
Rule 54    value_parameter -> idlist COLON basic_type
Rule 55    value_parameter -> idlist error basic_type
Rule 56    subprogram_body -> const_declarations var_declarations compound_statement
Rule 57    compound_statement -> BEGIN statement_list END
Rule 58    statement_list -> statement_list SEMI statement
Rule 59    statement_list -> statement
Rule 60    statement -> empty
Rule 61    statement -> variable ASSIGN expression
Rule 62    statement -> procedure_call
Rule 63    statement -> compound_statement
Rule 64    statement -> IF expression THEN statement else_part
Rule 65    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 66    statement -> READ LPAREN variable_list RPAREN
Rule 67    statement -> WRITE LPAREN expression_list RPAREN
Rule 68    statement -> READLN LPAREN variable_list RPAREN
Rule 69    statement -> WRITELN LPAREN expression_list RPAREN
Rule 70    variable_list -> variable_list COMMA variable
Rule 71    variable_list -> variable
Rule 72    variable -> ID id_varpart
Rule 73    id_varpart -> LBRACK expression_list RBRACK
Rule 74    id_varpart -> empty
Rule 75    procedure_call -> ID
Rule 76    procedure_call -> ID LPAREN expression_list RPAREN
Rule 77    else_part -> ELSE statement
Rule 78    else_part -> empty
Rule 79    expression_list -> expression_list COMMA expression
Rule 80    expression_list -> expression
Rule 81    expression -> simple_expression RELOP simple_expression
Rule 82    expression -> simple_expression EQU simple_expression
Rule 83    expression -> simple_expression
Rule 84    simple_expression -> simple_expression ADDOP term
Rule 85    simple_expression -> simple_expression OROP term
Rule 86    simple_expression -> term
Rule 87    term -> term MULDIVANDOP factor
Rule 88    term -> factor
Rule 89    factor -> const_value
Rule 90    factor -> variable
Rule 91    factor -> LPAREN expression RPAREN
Rule 92    factor -> ID LPAREN expression_list RPAREN
Rule 93    factor -> NOTOP factor
Rule 94    factor -> ADDOP factor
Rule 95    string -> STRING
Rule 96    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 16 19 34 84 94
ARRAY                : 28
ASSIGN               : 61 65
BCONST               : 21
BEGIN                : 57
BOOLEAN              : 32
CCONST               : 20 36
CHAR                 : 31
COLON                : 25 26 46 54
COMMA                : 5 39 41 70 79
CONST                : 10
DO                   : 65
DOT                  : 1
DOTDOT               : 38 39
DOWNTO               : 
ELSE                 : 77
END                  : 57
EOF                  : 
EQU                  : 12 13 14 15 82
FOR                  : 65
FORWARD              : 
FUNCTION             : 46
ICONST               : 16 17 34 35
ID                   : 3 4 5 6 7 8 12 13 14 14 15 15 37 45 46 65 72 75 76 92
IF                   : 64
INOP                 : 
INTEGER              : 29
LBRACK               : 28 73
LCURL                : 
LPAREN               : 4 47 66 67 68 69 76 91 92
MULDIVANDOP          : 87
NOTOP                : 93
OF                   : 28
OROP                 : 85
PROCEDURE            : 45
PROGRAM              : 3 4
RBRACK               : 28 73
RCONST               : 18 19 40 41
RCURL                : 
READ                 : 66
READLN               : 68
REAL                 : 30
RECORD               : 
RELOP                : 81
RPAREN               : 4 47 66 67 68 69 76 91 92
SEMI                 : 1 2 10 13 15 23 26 42 44 49 58
SET                  : 
STRING               : 95
THEN                 : 64
TO                   : 65
TYPE                 : 
TYPE_STRING          : 33
VAR                  : 23 53
WHILE                : 
WITH                 : 
WRITE                : 67
WRITELN              : 69
error                : 7 8 14 15 55

Nonterminals, with rules where they appear

basic_type           : 27 28 46 54 55
compound_statement   : 9 56 63
const_declaration    : 10 13 15
const_declarations   : 9 56
const_value          : 12 13 89
else_part            : 64
empty                : 11 24 43 48 60 74 78
expression           : 61 64 65 65 79 80 91
expression_list      : 67 69 73 76 79 92
factor               : 87 88 93 94
formal_parameter     : 45 46
id_varpart           : 72
idlist               : 4 5 7 25 26 54 55
my_period_part       : 38 38 39 39
parameter            : 49 50
parameter_list       : 47 49
period               : 28 39 41
procedure_call       : 62
program              : 0
program_body         : 1 2
program_head         : 1 2
simple_expression    : 81 81 82 82 83 84 85
statement            : 58 59 64 65 77
statement_list       : 57 58
string               : 22
subprogram           : 42
subprogram_body      : 44
subprogram_declarations : 9 42
subprogram_head      : 44
term                 : 84 85 86 87
type                 : 25 26
value_parameter      : 52 53
var_declaration      : 23 26
var_declarations     : 9 56
var_parameter        : 51
variable             : 61 70 71 90
variable_list        : 66 68 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program -> . program_head SEMI program_body
    (3) program_head -> . PROGRAM ID
    (4) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT
    (2) program -> program_head . SEMI program_body

    SEMI            shift and go to state 4


state 3

    (3) program_head -> PROGRAM . ID
    (4) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (2) program -> program_head SEMI . program_body
    (9) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (10) const_declarations -> . CONST const_declaration SEMI
    (11) const_declarations -> . empty
    (96) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 96 (empty -> .)
    BEGIN           reduce using rule 96 (empty -> .)
    PROCEDURE       reduce using rule 96 (empty -> .)
    FUNCTION        reduce using rule 96 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (3) program_head -> PROGRAM ID .
    (4) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT
    (2) program -> program_head SEMI program_body .

    DOT             shift and go to state 11
    $end            reduce using rule 2 (program -> program_head SEMI program_body .)


state 7

    (9) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (23) var_declarations -> . VAR var_declaration SEMI
    (24) var_declarations -> . empty
    (96) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 96 (empty -> .)
    PROCEDURE       reduce using rule 96 (empty -> .)
    FUNCTION        reduce using rule 96 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (10) const_declarations -> CONST . const_declaration SEMI
    (12) const_declaration -> . ID EQU const_value
    (13) const_declaration -> . const_declaration SEMI ID EQU const_value
    (14) const_declaration -> . ID EQU error ID
    (15) const_declaration -> . const_declaration SEMI ID EQU error ID

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (11) const_declarations -> empty .

    VAR             reduce using rule 11 (const_declarations -> empty .)
    BEGIN           reduce using rule 11 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 11 (const_declarations -> empty .)
    FUNCTION        reduce using rule 11 (const_declarations -> empty .)


state 10

    (4) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (9) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (42) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (43) subprogram_declarations -> . empty
    (96) empty -> .

    BEGIN           reduce using rule 96 (empty -> .)
    PROCEDURE       reduce using rule 96 (empty -> .)
    FUNCTION        reduce using rule 96 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (23) var_declarations -> VAR . var_declaration SEMI
    (25) var_declaration -> . idlist COLON type
    (26) var_declaration -> . var_declaration SEMI idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (24) var_declarations -> empty .

    BEGIN           reduce using rule 24 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 24 (var_declarations -> empty .)
    FUNCTION        reduce using rule 24 (var_declarations -> empty .)


state 15

    (10) const_declarations -> CONST const_declaration . SEMI
    (13) const_declaration -> const_declaration . SEMI ID EQU const_value
    (15) const_declaration -> const_declaration . SEMI ID EQU error ID

    SEMI            shift and go to state 23


state 16

    (12) const_declaration -> ID . EQU const_value
    (14) const_declaration -> ID . EQU error ID

    EQU             shift and go to state 24


state 17

    (6) idlist -> ID .
    (8) idlist -> ID . error

  ! shift/reduce conflict for error resolved as shift
    RPAREN          reduce using rule 6 (idlist -> ID .)
    COMMA           reduce using rule 6 (idlist -> ID .)
    COLON           reduce using rule 6 (idlist -> ID .)
    error           shift and go to state 25

  ! error           [ reduce using rule 6 (idlist -> ID .) ]


state 18

    (4) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    RPAREN          shift and go to state 26
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 19

    (9) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (42) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (57) compound_statement -> . BEGIN statement_list END
    (44) subprogram -> . subprogram_head SEMI subprogram_body
    (45) subprogram_head -> . PROCEDURE ID formal_parameter
    (46) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 31
    PROCEDURE       shift and go to state 33
    FUNCTION        shift and go to state 34

    compound_statement             shift and go to state 29
    subprogram                     shift and go to state 30
    subprogram_head                shift and go to state 32

state 20

    (43) subprogram_declarations -> empty .

    BEGIN           reduce using rule 43 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 43 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 43 (subprogram_declarations -> empty .)


state 21

    (23) var_declarations -> VAR var_declaration . SEMI
    (26) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 35


state 22

    (25) var_declaration -> idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 36
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 23

    (10) const_declarations -> CONST const_declaration SEMI .
    (13) const_declaration -> const_declaration SEMI . ID EQU const_value
    (15) const_declaration -> const_declaration SEMI . ID EQU error ID

    VAR             reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 37


state 24

    (12) const_declaration -> ID EQU . const_value
    (14) const_declaration -> ID EQU . error ID
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (95) string -> . STRING

    error           shift and go to state 39
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 38
    string                         shift and go to state 45

state 25

    (8) idlist -> ID error .

    RPAREN          reduce using rule 8 (idlist -> ID error .)
    COMMA           reduce using rule 8 (idlist -> ID error .)
    error           reduce using rule 8 (idlist -> ID error .)
    COLON           reduce using rule 8 (idlist -> ID error .)


state 26

    (4) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 4 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 27

    (5) idlist -> idlist COMMA . ID

    ID              shift and go to state 47


state 28

    (7) idlist -> idlist error . ID

    ID              shift and go to state 48


state 29

    (9) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 9 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)
    $end            reduce using rule 9 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 30

    (42) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 49


state 31

    (57) compound_statement -> BEGIN . statement_list END
    (58) statement_list -> . statement_list SEMI statement
    (59) statement_list -> . statement
    (60) statement -> . empty
    (61) statement -> . variable ASSIGN expression
    (62) statement -> . procedure_call
    (63) statement -> . compound_statement
    (64) statement -> . IF expression THEN statement else_part
    (65) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (66) statement -> . READ LPAREN variable_list RPAREN
    (67) statement -> . WRITE LPAREN expression_list RPAREN
    (68) statement -> . READLN LPAREN variable_list RPAREN
    (69) statement -> . WRITELN LPAREN expression_list RPAREN
    (96) empty -> .
    (72) variable -> . ID id_varpart
    (75) procedure_call -> . ID
    (76) procedure_call -> . ID LPAREN expression_list RPAREN
    (57) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement_list                 shift and go to state 50
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 32

    (44) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 63


state 33

    (45) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 64


state 34

    (46) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 65


state 35

    (23) var_declarations -> VAR var_declaration SEMI .
    (26) var_declaration -> var_declaration SEMI . idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    BEGIN           reduce using rule 23 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 23 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 23 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 66

state 36

    (25) var_declaration -> idlist COLON . type
    (27) type -> . basic_type
    (28) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 67
    basic_type                     shift and go to state 68

state 37

    (13) const_declaration -> const_declaration SEMI ID . EQU const_value
    (15) const_declaration -> const_declaration SEMI ID . EQU error ID

    EQU             shift and go to state 75


state 38

    (12) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 12 (const_declaration -> ID EQU const_value .)


state 39

    (14) const_declaration -> ID EQU error . ID

    ID              shift and go to state 76


state 40

    (16) const_value -> ADDOP . ICONST
    (19) const_value -> ADDOP . RCONST

    ICONST          shift and go to state 77
    RCONST          shift and go to state 78


state 41

    (17) const_value -> ICONST .

    SEMI            reduce using rule 17 (const_value -> ICONST .)
    MULDIVANDOP     reduce using rule 17 (const_value -> ICONST .)
    RELOP           reduce using rule 17 (const_value -> ICONST .)
    EQU             reduce using rule 17 (const_value -> ICONST .)
    ADDOP           reduce using rule 17 (const_value -> ICONST .)
    OROP            reduce using rule 17 (const_value -> ICONST .)
    THEN            reduce using rule 17 (const_value -> ICONST .)
    END             reduce using rule 17 (const_value -> ICONST .)
    ELSE            reduce using rule 17 (const_value -> ICONST .)
    RPAREN          reduce using rule 17 (const_value -> ICONST .)
    COMMA           reduce using rule 17 (const_value -> ICONST .)
    RBRACK          reduce using rule 17 (const_value -> ICONST .)
    TO              reduce using rule 17 (const_value -> ICONST .)
    DO              reduce using rule 17 (const_value -> ICONST .)


state 42

    (18) const_value -> RCONST .

    SEMI            reduce using rule 18 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 18 (const_value -> RCONST .)
    RELOP           reduce using rule 18 (const_value -> RCONST .)
    EQU             reduce using rule 18 (const_value -> RCONST .)
    ADDOP           reduce using rule 18 (const_value -> RCONST .)
    OROP            reduce using rule 18 (const_value -> RCONST .)
    THEN            reduce using rule 18 (const_value -> RCONST .)
    END             reduce using rule 18 (const_value -> RCONST .)
    ELSE            reduce using rule 18 (const_value -> RCONST .)
    RPAREN          reduce using rule 18 (const_value -> RCONST .)
    COMMA           reduce using rule 18 (const_value -> RCONST .)
    RBRACK          reduce using rule 18 (const_value -> RCONST .)
    TO              reduce using rule 18 (const_value -> RCONST .)
    DO              reduce using rule 18 (const_value -> RCONST .)


state 43

    (20) const_value -> CCONST .

    SEMI            reduce using rule 20 (const_value -> CCONST .)
    MULDIVANDOP     reduce using rule 20 (const_value -> CCONST .)
    RELOP           reduce using rule 20 (const_value -> CCONST .)
    EQU             reduce using rule 20 (const_value -> CCONST .)
    ADDOP           reduce using rule 20 (const_value -> CCONST .)
    OROP            reduce using rule 20 (const_value -> CCONST .)
    THEN            reduce using rule 20 (const_value -> CCONST .)
    END             reduce using rule 20 (const_value -> CCONST .)
    ELSE            reduce using rule 20 (const_value -> CCONST .)
    RPAREN          reduce using rule 20 (const_value -> CCONST .)
    COMMA           reduce using rule 20 (const_value -> CCONST .)
    RBRACK          reduce using rule 20 (const_value -> CCONST .)
    TO              reduce using rule 20 (const_value -> CCONST .)
    DO              reduce using rule 20 (const_value -> CCONST .)


state 44

    (21) const_value -> BCONST .

    SEMI            reduce using rule 21 (const_value -> BCONST .)
    MULDIVANDOP     reduce using rule 21 (const_value -> BCONST .)
    RELOP           reduce using rule 21 (const_value -> BCONST .)
    EQU             reduce using rule 21 (const_value -> BCONST .)
    ADDOP           reduce using rule 21 (const_value -> BCONST .)
    OROP            reduce using rule 21 (const_value -> BCONST .)
    THEN            reduce using rule 21 (const_value -> BCONST .)
    END             reduce using rule 21 (const_value -> BCONST .)
    ELSE            reduce using rule 21 (const_value -> BCONST .)
    RPAREN          reduce using rule 21 (const_value -> BCONST .)
    COMMA           reduce using rule 21 (const_value -> BCONST .)
    RBRACK          reduce using rule 21 (const_value -> BCONST .)
    TO              reduce using rule 21 (const_value -> BCONST .)
    DO              reduce using rule 21 (const_value -> BCONST .)


state 45

    (22) const_value -> string .

    SEMI            reduce using rule 22 (const_value -> string .)
    MULDIVANDOP     reduce using rule 22 (const_value -> string .)
    RELOP           reduce using rule 22 (const_value -> string .)
    EQU             reduce using rule 22 (const_value -> string .)
    ADDOP           reduce using rule 22 (const_value -> string .)
    OROP            reduce using rule 22 (const_value -> string .)
    THEN            reduce using rule 22 (const_value -> string .)
    END             reduce using rule 22 (const_value -> string .)
    ELSE            reduce using rule 22 (const_value -> string .)
    RPAREN          reduce using rule 22 (const_value -> string .)
    COMMA           reduce using rule 22 (const_value -> string .)
    RBRACK          reduce using rule 22 (const_value -> string .)
    TO              reduce using rule 22 (const_value -> string .)
    DO              reduce using rule 22 (const_value -> string .)


state 46

    (95) string -> STRING .

    SEMI            reduce using rule 95 (string -> STRING .)
    MULDIVANDOP     reduce using rule 95 (string -> STRING .)
    RELOP           reduce using rule 95 (string -> STRING .)
    EQU             reduce using rule 95 (string -> STRING .)
    ADDOP           reduce using rule 95 (string -> STRING .)
    OROP            reduce using rule 95 (string -> STRING .)
    THEN            reduce using rule 95 (string -> STRING .)
    END             reduce using rule 95 (string -> STRING .)
    ELSE            reduce using rule 95 (string -> STRING .)
    RPAREN          reduce using rule 95 (string -> STRING .)
    COMMA           reduce using rule 95 (string -> STRING .)
    RBRACK          reduce using rule 95 (string -> STRING .)
    TO              reduce using rule 95 (string -> STRING .)
    DO              reduce using rule 95 (string -> STRING .)


state 47

    (5) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 5 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 5 (idlist -> idlist COMMA ID .)
    error           reduce using rule 5 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 5 (idlist -> idlist COMMA ID .)


state 48

    (7) idlist -> idlist error ID .

    RPAREN          reduce using rule 7 (idlist -> idlist error ID .)
    COMMA           reduce using rule 7 (idlist -> idlist error ID .)
    error           reduce using rule 7 (idlist -> idlist error ID .)
    COLON           reduce using rule 7 (idlist -> idlist error ID .)


state 49

    (42) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 42 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 42 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 42 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 50

    (57) compound_statement -> BEGIN statement_list . END
    (58) statement_list -> statement_list . SEMI statement

    END             shift and go to state 79
    SEMI            shift and go to state 80


state 51

    (59) statement_list -> statement .

    END             reduce using rule 59 (statement_list -> statement .)
    SEMI            reduce using rule 59 (statement_list -> statement .)


state 52

    (60) statement -> empty .

    END             reduce using rule 60 (statement -> empty .)
    SEMI            reduce using rule 60 (statement -> empty .)
    ELSE            reduce using rule 60 (statement -> empty .)


state 53

    (61) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 81


state 54

    (62) statement -> procedure_call .

    END             reduce using rule 62 (statement -> procedure_call .)
    SEMI            reduce using rule 62 (statement -> procedure_call .)
    ELSE            reduce using rule 62 (statement -> procedure_call .)


state 55

    (63) statement -> compound_statement .

    END             reduce using rule 63 (statement -> compound_statement .)
    SEMI            reduce using rule 63 (statement -> compound_statement .)
    ELSE            reduce using rule 63 (statement -> compound_statement .)


state 56

    (64) statement -> IF . expression THEN statement else_part
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 82
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 57

    (65) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 92


state 58

    (72) variable -> ID . id_varpart
    (75) procedure_call -> ID .
    (76) procedure_call -> ID . LPAREN expression_list RPAREN
    (73) id_varpart -> . LBRACK expression_list RBRACK
    (74) id_varpart -> . empty
    (96) empty -> .

    END             reduce using rule 75 (procedure_call -> ID .)
    SEMI            reduce using rule 75 (procedure_call -> ID .)
    ELSE            reduce using rule 75 (procedure_call -> ID .)
    LPAREN          shift and go to state 94
    LBRACK          shift and go to state 95
    ASSIGN          reduce using rule 96 (empty -> .)

    id_varpart                     shift and go to state 93
    empty                          shift and go to state 96

state 59

    (66) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 97


state 60

    (67) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 98


state 61

    (68) statement -> READLN . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 99


state 62

    (69) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 100


state 63

    (44) subprogram -> subprogram_head SEMI . subprogram_body
    (56) subprogram_body -> . const_declarations var_declarations compound_statement
    (10) const_declarations -> . CONST const_declaration SEMI
    (11) const_declarations -> . empty
    (96) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 96 (empty -> .)
    BEGIN           reduce using rule 96 (empty -> .)

    subprogram_body                shift and go to state 101
    const_declarations             shift and go to state 102
    empty                          shift and go to state 9

state 64

    (45) subprogram_head -> PROCEDURE ID . formal_parameter
    (47) formal_parameter -> . LPAREN parameter_list RPAREN
    (48) formal_parameter -> . empty
    (96) empty -> .

    LPAREN          shift and go to state 104
    SEMI            reduce using rule 96 (empty -> .)

    formal_parameter               shift and go to state 103
    empty                          shift and go to state 105

state 65

    (46) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (47) formal_parameter -> . LPAREN parameter_list RPAREN
    (48) formal_parameter -> . empty
    (96) empty -> .

    LPAREN          shift and go to state 104
    COLON           reduce using rule 96 (empty -> .)

    formal_parameter               shift and go to state 106
    empty                          shift and go to state 105

state 66

    (26) var_declaration -> var_declaration SEMI idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 107
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 67

    (25) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 25 (var_declaration -> idlist COLON type .)


state 68

    (27) type -> basic_type .

    SEMI            reduce using rule 27 (type -> basic_type .)


state 69

    (28) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 108


state 70

    (29) basic_type -> INTEGER .

    SEMI            reduce using rule 29 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 29 (basic_type -> INTEGER .)


state 71

    (30) basic_type -> REAL .

    SEMI            reduce using rule 30 (basic_type -> REAL .)
    RPAREN          reduce using rule 30 (basic_type -> REAL .)


state 72

    (31) basic_type -> CHAR .

    SEMI            reduce using rule 31 (basic_type -> CHAR .)
    RPAREN          reduce using rule 31 (basic_type -> CHAR .)


state 73

    (32) basic_type -> BOOLEAN .

    SEMI            reduce using rule 32 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 32 (basic_type -> BOOLEAN .)


state 74

    (33) basic_type -> TYPE_STRING .

    SEMI            reduce using rule 33 (basic_type -> TYPE_STRING .)
    RPAREN          reduce using rule 33 (basic_type -> TYPE_STRING .)


state 75

    (13) const_declaration -> const_declaration SEMI ID EQU . const_value
    (15) const_declaration -> const_declaration SEMI ID EQU . error ID
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (95) string -> . STRING

    error           shift and go to state 110
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 109
    string                         shift and go to state 45

state 76

    (14) const_declaration -> ID EQU error ID .

    SEMI            reduce using rule 14 (const_declaration -> ID EQU error ID .)


state 77

    (16) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 16 (const_value -> ADDOP ICONST .)


state 78

    (19) const_value -> ADDOP RCONST .

    SEMI            reduce using rule 19 (const_value -> ADDOP RCONST .)


state 79

    (57) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 57 (compound_statement -> BEGIN statement_list END .)
    $end            reduce using rule 57 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 57 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 57 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 57 (compound_statement -> BEGIN statement_list END .)


state 80

    (58) statement_list -> statement_list SEMI . statement
    (60) statement -> . empty
    (61) statement -> . variable ASSIGN expression
    (62) statement -> . procedure_call
    (63) statement -> . compound_statement
    (64) statement -> . IF expression THEN statement else_part
    (65) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (66) statement -> . READ LPAREN variable_list RPAREN
    (67) statement -> . WRITE LPAREN expression_list RPAREN
    (68) statement -> . READLN LPAREN variable_list RPAREN
    (69) statement -> . WRITELN LPAREN expression_list RPAREN
    (96) empty -> .
    (72) variable -> . ID id_varpart
    (75) procedure_call -> . ID
    (76) procedure_call -> . ID LPAREN expression_list RPAREN
    (57) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 111
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 81

    (61) statement -> variable ASSIGN . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    variable                       shift and go to state 88
    expression                     shift and go to state 112
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    string                         shift and go to state 45

state 82

    (64) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 113


state 83

    (81) expression -> simple_expression . RELOP simple_expression
    (82) expression -> simple_expression . EQU simple_expression
    (83) expression -> simple_expression .
    (84) simple_expression -> simple_expression . ADDOP term
    (85) simple_expression -> simple_expression . OROP term

    RELOP           shift and go to state 114
    EQU             shift and go to state 115
    THEN            reduce using rule 83 (expression -> simple_expression .)
    END             reduce using rule 83 (expression -> simple_expression .)
    SEMI            reduce using rule 83 (expression -> simple_expression .)
    ELSE            reduce using rule 83 (expression -> simple_expression .)
    RPAREN          reduce using rule 83 (expression -> simple_expression .)
    COMMA           reduce using rule 83 (expression -> simple_expression .)
    RBRACK          reduce using rule 83 (expression -> simple_expression .)
    TO              reduce using rule 83 (expression -> simple_expression .)
    DO              reduce using rule 83 (expression -> simple_expression .)
    ADDOP           shift and go to state 116
    OROP            shift and go to state 117


state 84

    (94) factor -> ADDOP . factor
    (16) const_value -> ADDOP . ICONST
    (19) const_value -> ADDOP . RCONST
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    ICONST          shift and go to state 119
    RCONST          shift and go to state 120
    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 118
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 85

    (86) simple_expression -> term .
    (87) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 86 (simple_expression -> term .)
    EQU             reduce using rule 86 (simple_expression -> term .)
    ADDOP           reduce using rule 86 (simple_expression -> term .)
    OROP            reduce using rule 86 (simple_expression -> term .)
    THEN            reduce using rule 86 (simple_expression -> term .)
    END             reduce using rule 86 (simple_expression -> term .)
    SEMI            reduce using rule 86 (simple_expression -> term .)
    ELSE            reduce using rule 86 (simple_expression -> term .)
    RPAREN          reduce using rule 86 (simple_expression -> term .)
    COMMA           reduce using rule 86 (simple_expression -> term .)
    RBRACK          reduce using rule 86 (simple_expression -> term .)
    TO              reduce using rule 86 (simple_expression -> term .)
    DO              reduce using rule 86 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 121


state 86

    (88) term -> factor .

    MULDIVANDOP     reduce using rule 88 (term -> factor .)
    RELOP           reduce using rule 88 (term -> factor .)
    EQU             reduce using rule 88 (term -> factor .)
    ADDOP           reduce using rule 88 (term -> factor .)
    OROP            reduce using rule 88 (term -> factor .)
    THEN            reduce using rule 88 (term -> factor .)
    END             reduce using rule 88 (term -> factor .)
    SEMI            reduce using rule 88 (term -> factor .)
    ELSE            reduce using rule 88 (term -> factor .)
    RPAREN          reduce using rule 88 (term -> factor .)
    COMMA           reduce using rule 88 (term -> factor .)
    RBRACK          reduce using rule 88 (term -> factor .)
    TO              reduce using rule 88 (term -> factor .)
    DO              reduce using rule 88 (term -> factor .)


state 87

    (89) factor -> const_value .

    MULDIVANDOP     reduce using rule 89 (factor -> const_value .)
    RELOP           reduce using rule 89 (factor -> const_value .)
    EQU             reduce using rule 89 (factor -> const_value .)
    ADDOP           reduce using rule 89 (factor -> const_value .)
    OROP            reduce using rule 89 (factor -> const_value .)
    THEN            reduce using rule 89 (factor -> const_value .)
    END             reduce using rule 89 (factor -> const_value .)
    SEMI            reduce using rule 89 (factor -> const_value .)
    ELSE            reduce using rule 89 (factor -> const_value .)
    RPAREN          reduce using rule 89 (factor -> const_value .)
    COMMA           reduce using rule 89 (factor -> const_value .)
    RBRACK          reduce using rule 89 (factor -> const_value .)
    TO              reduce using rule 89 (factor -> const_value .)
    DO              reduce using rule 89 (factor -> const_value .)


state 88

    (90) factor -> variable .

    MULDIVANDOP     reduce using rule 90 (factor -> variable .)
    RELOP           reduce using rule 90 (factor -> variable .)
    EQU             reduce using rule 90 (factor -> variable .)
    ADDOP           reduce using rule 90 (factor -> variable .)
    OROP            reduce using rule 90 (factor -> variable .)
    THEN            reduce using rule 90 (factor -> variable .)
    END             reduce using rule 90 (factor -> variable .)
    SEMI            reduce using rule 90 (factor -> variable .)
    ELSE            reduce using rule 90 (factor -> variable .)
    RPAREN          reduce using rule 90 (factor -> variable .)
    COMMA           reduce using rule 90 (factor -> variable .)
    RBRACK          reduce using rule 90 (factor -> variable .)
    TO              reduce using rule 90 (factor -> variable .)
    DO              reduce using rule 90 (factor -> variable .)


state 89

    (91) factor -> LPAREN . expression RPAREN
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 122
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 90

    (92) factor -> ID . LPAREN expression_list RPAREN
    (72) variable -> ID . id_varpart
    (73) id_varpart -> . LBRACK expression_list RBRACK
    (74) id_varpart -> . empty
    (96) empty -> .

    LPAREN          shift and go to state 123
    LBRACK          shift and go to state 95
    MULDIVANDOP     reduce using rule 96 (empty -> .)
    RELOP           reduce using rule 96 (empty -> .)
    EQU             reduce using rule 96 (empty -> .)
    ADDOP           reduce using rule 96 (empty -> .)
    OROP            reduce using rule 96 (empty -> .)
    THEN            reduce using rule 96 (empty -> .)
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ELSE            reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RBRACK          reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    DO              reduce using rule 96 (empty -> .)

    id_varpart                     shift and go to state 93
    empty                          shift and go to state 96

state 91

    (93) factor -> NOTOP . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 124
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 92

    (65) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 125


state 93

    (72) variable -> ID id_varpart .

    ASSIGN          reduce using rule 72 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 72 (variable -> ID id_varpart .)
    RELOP           reduce using rule 72 (variable -> ID id_varpart .)
    EQU             reduce using rule 72 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 72 (variable -> ID id_varpart .)
    OROP            reduce using rule 72 (variable -> ID id_varpart .)
    THEN            reduce using rule 72 (variable -> ID id_varpart .)
    END             reduce using rule 72 (variable -> ID id_varpart .)
    SEMI            reduce using rule 72 (variable -> ID id_varpart .)
    ELSE            reduce using rule 72 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 72 (variable -> ID id_varpart .)
    COMMA           reduce using rule 72 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 72 (variable -> ID id_varpart .)
    TO              reduce using rule 72 (variable -> ID id_varpart .)
    DO              reduce using rule 72 (variable -> ID id_varpart .)


state 94

    (76) procedure_call -> ID LPAREN . expression_list RPAREN
    (79) expression_list -> . expression_list COMMA expression
    (80) expression_list -> . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 126
    expression                     shift and go to state 127
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 95

    (73) id_varpart -> LBRACK . expression_list RBRACK
    (79) expression_list -> . expression_list COMMA expression
    (80) expression_list -> . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 128
    expression                     shift and go to state 127
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 96

    (74) id_varpart -> empty .

    ASSIGN          reduce using rule 74 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 74 (id_varpart -> empty .)
    RELOP           reduce using rule 74 (id_varpart -> empty .)
    EQU             reduce using rule 74 (id_varpart -> empty .)
    ADDOP           reduce using rule 74 (id_varpart -> empty .)
    OROP            reduce using rule 74 (id_varpart -> empty .)
    THEN            reduce using rule 74 (id_varpart -> empty .)
    END             reduce using rule 74 (id_varpart -> empty .)
    SEMI            reduce using rule 74 (id_varpart -> empty .)
    ELSE            reduce using rule 74 (id_varpart -> empty .)
    RPAREN          reduce using rule 74 (id_varpart -> empty .)
    COMMA           reduce using rule 74 (id_varpart -> empty .)
    RBRACK          reduce using rule 74 (id_varpart -> empty .)
    TO              reduce using rule 74 (id_varpart -> empty .)
    DO              reduce using rule 74 (id_varpart -> empty .)


state 97

    (66) statement -> READ LPAREN . variable_list RPAREN
    (70) variable_list -> . variable_list COMMA variable
    (71) variable_list -> . variable
    (72) variable -> . ID id_varpart

    ID              shift and go to state 131

    variable_list                  shift and go to state 129
    variable                       shift and go to state 130

state 98

    (67) statement -> WRITE LPAREN . expression_list RPAREN
    (79) expression_list -> . expression_list COMMA expression
    (80) expression_list -> . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 132
    expression                     shift and go to state 127
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 99

    (68) statement -> READLN LPAREN . variable_list RPAREN
    (70) variable_list -> . variable_list COMMA variable
    (71) variable_list -> . variable
    (72) variable -> . ID id_varpart

    ID              shift and go to state 131

    variable_list                  shift and go to state 133
    variable                       shift and go to state 130

state 100

    (69) statement -> WRITELN LPAREN . expression_list RPAREN
    (79) expression_list -> . expression_list COMMA expression
    (80) expression_list -> . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 134
    expression                     shift and go to state 127
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 101

    (44) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 44 (subprogram -> subprogram_head SEMI subprogram_body .)


state 102

    (56) subprogram_body -> const_declarations . var_declarations compound_statement
    (23) var_declarations -> . VAR var_declaration SEMI
    (24) var_declarations -> . empty
    (96) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 96 (empty -> .)

    var_declarations               shift and go to state 135
    empty                          shift and go to state 14

state 103

    (45) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 45 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 104

    (47) formal_parameter -> LPAREN . parameter_list RPAREN
    (49) parameter_list -> . parameter_list SEMI parameter
    (50) parameter_list -> . parameter
    (51) parameter -> . var_parameter
    (52) parameter -> . value_parameter
    (53) var_parameter -> . VAR value_parameter
    (54) value_parameter -> . idlist COLON basic_type
    (55) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 140
    ID              shift and go to state 17

    parameter_list                 shift and go to state 136
    parameter                      shift and go to state 137
    var_parameter                  shift and go to state 138
    value_parameter                shift and go to state 139
    idlist                         shift and go to state 141

state 105

    (48) formal_parameter -> empty .

    SEMI            reduce using rule 48 (formal_parameter -> empty .)
    COLON           reduce using rule 48 (formal_parameter -> empty .)


state 106

    (46) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 142


state 107

    (26) var_declaration -> var_declaration SEMI idlist COLON . type
    (27) type -> . basic_type
    (28) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 143
    basic_type                     shift and go to state 68

state 108

    (28) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (38) period -> . my_period_part DOTDOT my_period_part
    (39) period -> . period COMMA my_period_part DOTDOT my_period_part
    (40) period -> . RCONST
    (41) period -> . period COMMA RCONST
    (34) my_period_part -> . ADDOP ICONST
    (35) my_period_part -> . ICONST
    (36) my_period_part -> . CCONST
    (37) my_period_part -> . ID

    RCONST          shift and go to state 146
    ADDOP           shift and go to state 147
    ICONST          shift and go to state 148
    CCONST          shift and go to state 149
    ID              shift and go to state 150

    period                         shift and go to state 144
    my_period_part                 shift and go to state 145

state 109

    (13) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 13 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 110

    (15) const_declaration -> const_declaration SEMI ID EQU error . ID

    ID              shift and go to state 151


state 111

    (58) statement_list -> statement_list SEMI statement .

    END             reduce using rule 58 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 58 (statement_list -> statement_list SEMI statement .)


state 112

    (61) statement -> variable ASSIGN expression .

    END             reduce using rule 61 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 61 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 61 (statement -> variable ASSIGN expression .)


state 113

    (64) statement -> IF expression THEN . statement else_part
    (60) statement -> . empty
    (61) statement -> . variable ASSIGN expression
    (62) statement -> . procedure_call
    (63) statement -> . compound_statement
    (64) statement -> . IF expression THEN statement else_part
    (65) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (66) statement -> . READ LPAREN variable_list RPAREN
    (67) statement -> . WRITE LPAREN expression_list RPAREN
    (68) statement -> . READLN LPAREN variable_list RPAREN
    (69) statement -> . WRITELN LPAREN expression_list RPAREN
    (96) empty -> .
    (72) variable -> . ID id_varpart
    (75) procedure_call -> . ID
    (76) procedure_call -> . ID LPAREN expression_list RPAREN
    (57) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 96 (empty -> .)
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 152
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 114

    (81) expression -> simple_expression RELOP . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 153
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 115

    (82) expression -> simple_expression EQU . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 154
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 116

    (84) simple_expression -> simple_expression ADDOP . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    term                           shift and go to state 155
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 117

    (85) simple_expression -> simple_expression OROP . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    term                           shift and go to state 156
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 118

    (94) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 94 (factor -> ADDOP factor .)
    RELOP           reduce using rule 94 (factor -> ADDOP factor .)
    EQU             reduce using rule 94 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 94 (factor -> ADDOP factor .)
    OROP            reduce using rule 94 (factor -> ADDOP factor .)
    THEN            reduce using rule 94 (factor -> ADDOP factor .)
    END             reduce using rule 94 (factor -> ADDOP factor .)
    SEMI            reduce using rule 94 (factor -> ADDOP factor .)
    ELSE            reduce using rule 94 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 94 (factor -> ADDOP factor .)
    COMMA           reduce using rule 94 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 94 (factor -> ADDOP factor .)
    TO              reduce using rule 94 (factor -> ADDOP factor .)
    DO              reduce using rule 94 (factor -> ADDOP factor .)


state 119

    (16) const_value -> ADDOP ICONST .
    (17) const_value -> ICONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for EQU resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for OROP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for THEN resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for END resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for TO resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for DO resolved using rule 16 (const_value -> ADDOP ICONST .)
    MULDIVANDOP     reduce using rule 16 (const_value -> ADDOP ICONST .)
    RELOP           reduce using rule 16 (const_value -> ADDOP ICONST .)
    EQU             reduce using rule 16 (const_value -> ADDOP ICONST .)
    ADDOP           reduce using rule 16 (const_value -> ADDOP ICONST .)
    OROP            reduce using rule 16 (const_value -> ADDOP ICONST .)
    THEN            reduce using rule 16 (const_value -> ADDOP ICONST .)
    END             reduce using rule 16 (const_value -> ADDOP ICONST .)
    SEMI            reduce using rule 16 (const_value -> ADDOP ICONST .)
    ELSE            reduce using rule 16 (const_value -> ADDOP ICONST .)
    RPAREN          reduce using rule 16 (const_value -> ADDOP ICONST .)
    COMMA           reduce using rule 16 (const_value -> ADDOP ICONST .)
    RBRACK          reduce using rule 16 (const_value -> ADDOP ICONST .)
    TO              reduce using rule 16 (const_value -> ADDOP ICONST .)
    DO              reduce using rule 16 (const_value -> ADDOP ICONST .)

  ! MULDIVANDOP     [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RELOP           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! EQU             [ reduce using rule 17 (const_value -> ICONST .) ]
  ! ADDOP           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! OROP            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! THEN            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! END             [ reduce using rule 17 (const_value -> ICONST .) ]
  ! SEMI            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! ELSE            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RPAREN          [ reduce using rule 17 (const_value -> ICONST .) ]
  ! COMMA           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RBRACK          [ reduce using rule 17 (const_value -> ICONST .) ]
  ! TO              [ reduce using rule 17 (const_value -> ICONST .) ]
  ! DO              [ reduce using rule 17 (const_value -> ICONST .) ]


state 120

    (19) const_value -> ADDOP RCONST .
    (18) const_value -> RCONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for EQU resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for OROP resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for THEN resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for END resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for TO resolved using rule 18 (const_value -> RCONST .)
  ! reduce/reduce conflict for DO resolved using rule 18 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 18 (const_value -> RCONST .)
    RELOP           reduce using rule 18 (const_value -> RCONST .)
    EQU             reduce using rule 18 (const_value -> RCONST .)
    ADDOP           reduce using rule 18 (const_value -> RCONST .)
    OROP            reduce using rule 18 (const_value -> RCONST .)
    THEN            reduce using rule 18 (const_value -> RCONST .)
    END             reduce using rule 18 (const_value -> RCONST .)
    SEMI            reduce using rule 18 (const_value -> RCONST .)
    ELSE            reduce using rule 18 (const_value -> RCONST .)
    RPAREN          reduce using rule 18 (const_value -> RCONST .)
    COMMA           reduce using rule 18 (const_value -> RCONST .)
    RBRACK          reduce using rule 18 (const_value -> RCONST .)
    TO              reduce using rule 18 (const_value -> RCONST .)
    DO              reduce using rule 18 (const_value -> RCONST .)

  ! MULDIVANDOP     [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! RELOP           [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! EQU             [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! ADDOP           [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! OROP            [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! THEN            [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! END             [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! SEMI            [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! ELSE            [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! RPAREN          [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! COMMA           [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! RBRACK          [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! TO              [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]
  ! DO              [ reduce using rule 19 (const_value -> ADDOP RCONST .) ]


state 121

    (87) term -> term MULDIVANDOP . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 157
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 122

    (91) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 158


state 123

    (92) factor -> ID LPAREN . expression_list RPAREN
    (79) expression_list -> . expression_list COMMA expression
    (80) expression_list -> . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 159
    expression                     shift and go to state 127
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 124

    (93) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 93 (factor -> NOTOP factor .)
    RELOP           reduce using rule 93 (factor -> NOTOP factor .)
    EQU             reduce using rule 93 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 93 (factor -> NOTOP factor .)
    OROP            reduce using rule 93 (factor -> NOTOP factor .)
    THEN            reduce using rule 93 (factor -> NOTOP factor .)
    END             reduce using rule 93 (factor -> NOTOP factor .)
    SEMI            reduce using rule 93 (factor -> NOTOP factor .)
    ELSE            reduce using rule 93 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 93 (factor -> NOTOP factor .)
    COMMA           reduce using rule 93 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 93 (factor -> NOTOP factor .)
    TO              reduce using rule 93 (factor -> NOTOP factor .)
    DO              reduce using rule 93 (factor -> NOTOP factor .)


state 125

    (65) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 160
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 126

    (76) procedure_call -> ID LPAREN expression_list . RPAREN
    (79) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 161
    COMMA           shift and go to state 162


state 127

    (80) expression_list -> expression .

    RPAREN          reduce using rule 80 (expression_list -> expression .)
    COMMA           reduce using rule 80 (expression_list -> expression .)
    RBRACK          reduce using rule 80 (expression_list -> expression .)


state 128

    (73) id_varpart -> LBRACK expression_list . RBRACK
    (79) expression_list -> expression_list . COMMA expression

    RBRACK          shift and go to state 163
    COMMA           shift and go to state 162


state 129

    (66) statement -> READ LPAREN variable_list . RPAREN
    (70) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 165


state 130

    (71) variable_list -> variable .

    RPAREN          reduce using rule 71 (variable_list -> variable .)
    COMMA           reduce using rule 71 (variable_list -> variable .)


state 131

    (72) variable -> ID . id_varpart
    (73) id_varpart -> . LBRACK expression_list RBRACK
    (74) id_varpart -> . empty
    (96) empty -> .

    LBRACK          shift and go to state 95
    RPAREN          reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

    id_varpart                     shift and go to state 93
    empty                          shift and go to state 96

state 132

    (67) statement -> WRITE LPAREN expression_list . RPAREN
    (79) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 162


state 133

    (68) statement -> READLN LPAREN variable_list . RPAREN
    (70) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 167
    COMMA           shift and go to state 165


state 134

    (69) statement -> WRITELN LPAREN expression_list . RPAREN
    (79) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 168
    COMMA           shift and go to state 162


state 135

    (56) subprogram_body -> const_declarations var_declarations . compound_statement
    (57) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 31

    compound_statement             shift and go to state 169

state 136

    (47) formal_parameter -> LPAREN parameter_list . RPAREN
    (49) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 170
    SEMI            shift and go to state 171


state 137

    (50) parameter_list -> parameter .

    RPAREN          reduce using rule 50 (parameter_list -> parameter .)
    SEMI            reduce using rule 50 (parameter_list -> parameter .)


state 138

    (51) parameter -> var_parameter .

    RPAREN          reduce using rule 51 (parameter -> var_parameter .)
    SEMI            reduce using rule 51 (parameter -> var_parameter .)


state 139

    (52) parameter -> value_parameter .

    RPAREN          reduce using rule 52 (parameter -> value_parameter .)
    SEMI            reduce using rule 52 (parameter -> value_parameter .)


state 140

    (53) var_parameter -> VAR . value_parameter
    (54) value_parameter -> . idlist COLON basic_type
    (55) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    value_parameter                shift and go to state 172
    idlist                         shift and go to state 141

state 141

    (54) value_parameter -> idlist . COLON basic_type
    (55) value_parameter -> idlist . error basic_type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 173
    error           shift and go to state 174
    COMMA           shift and go to state 27


state 142

    (46) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 175

state 143

    (26) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 26 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 144

    (28) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (39) period -> period . COMMA my_period_part DOTDOT my_period_part
    (41) period -> period . COMMA RCONST

    RBRACK          shift and go to state 176
    COMMA           shift and go to state 177


state 145

    (38) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 178


state 146

    (40) period -> RCONST .

    RBRACK          reduce using rule 40 (period -> RCONST .)
    COMMA           reduce using rule 40 (period -> RCONST .)


state 147

    (34) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 179


state 148

    (35) my_period_part -> ICONST .

    DOTDOT          reduce using rule 35 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 35 (my_period_part -> ICONST .)
    COMMA           reduce using rule 35 (my_period_part -> ICONST .)


state 149

    (36) my_period_part -> CCONST .

    DOTDOT          reduce using rule 36 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 36 (my_period_part -> CCONST .)
    COMMA           reduce using rule 36 (my_period_part -> CCONST .)


state 150

    (37) my_period_part -> ID .

    DOTDOT          reduce using rule 37 (my_period_part -> ID .)
    RBRACK          reduce using rule 37 (my_period_part -> ID .)
    COMMA           reduce using rule 37 (my_period_part -> ID .)


state 151

    (15) const_declaration -> const_declaration SEMI ID EQU error ID .

    SEMI            reduce using rule 15 (const_declaration -> const_declaration SEMI ID EQU error ID .)


state 152

    (64) statement -> IF expression THEN statement . else_part
    (77) else_part -> . ELSE statement
    (78) else_part -> . empty
    (96) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 181
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)

  ! ELSE            [ reduce using rule 96 (empty -> .) ]

    else_part                      shift and go to state 180
    empty                          shift and go to state 182

state 153

    (81) expression -> simple_expression RELOP simple_expression .
    (84) simple_expression -> simple_expression . ADDOP term
    (85) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 81 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 116
    OROP            shift and go to state 117


state 154

    (82) expression -> simple_expression EQU simple_expression .
    (84) simple_expression -> simple_expression . ADDOP term
    (85) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 82 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 116
    OROP            shift and go to state 117


state 155

    (84) simple_expression -> simple_expression ADDOP term .
    (87) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    OROP            reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 84 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 121


state 156

    (85) simple_expression -> simple_expression OROP term .
    (87) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    EQU             reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    ADDOP           reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    OROP            reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    THEN            reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    END             reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    SEMI            reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    ELSE            reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    RPAREN          reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    COMMA           reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    RBRACK          reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    TO              reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    DO              reduce using rule 85 (simple_expression -> simple_expression OROP term .)
    MULDIVANDOP     shift and go to state 121


state 157

    (87) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 87 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 87 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 87 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 87 (term -> term MULDIVANDOP factor .)
    OROP            reduce using rule 87 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 87 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 87 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 87 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 87 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 87 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 87 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 87 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 87 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 87 (term -> term MULDIVANDOP factor .)


state 158

    (91) factor -> LPAREN expression RPAREN .

    MULDIVANDOP     reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    EQU             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    OROP            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 91 (factor -> LPAREN expression RPAREN .)


state 159

    (92) factor -> ID LPAREN expression_list . RPAREN
    (79) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 183
    COMMA           shift and go to state 162


state 160

    (65) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 184


state 161

    (76) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 76 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 76 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 76 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 162

    (79) expression_list -> expression_list COMMA . expression
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 185
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 163

    (73) id_varpart -> LBRACK expression_list RBRACK .

    ASSIGN          reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    MULDIVANDOP     reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    RELOP           reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    EQU             reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    ADDOP           reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    OROP            reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    THEN            reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    END             reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    SEMI            reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    ELSE            reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    RPAREN          reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    COMMA           reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    RBRACK          reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    TO              reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)
    DO              reduce using rule 73 (id_varpart -> LBRACK expression_list RBRACK .)


state 164

    (66) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 66 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 66 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 66 (statement -> READ LPAREN variable_list RPAREN .)


state 165

    (70) variable_list -> variable_list COMMA . variable
    (72) variable -> . ID id_varpart

    ID              shift and go to state 131

    variable                       shift and go to state 186

state 166

    (67) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 67 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 67 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 67 (statement -> WRITE LPAREN expression_list RPAREN .)


state 167

    (68) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 68 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 68 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 68 (statement -> READLN LPAREN variable_list RPAREN .)


state 168

    (69) statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 69 (statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 69 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 69 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 169

    (56) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 56 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 170

    (47) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 47 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 47 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 171

    (49) parameter_list -> parameter_list SEMI . parameter
    (51) parameter -> . var_parameter
    (52) parameter -> . value_parameter
    (53) var_parameter -> . VAR value_parameter
    (54) value_parameter -> . idlist COLON basic_type
    (55) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 140
    ID              shift and go to state 17

    parameter                      shift and go to state 187
    var_parameter                  shift and go to state 138
    value_parameter                shift and go to state 139
    idlist                         shift and go to state 141

state 172

    (53) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 53 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 53 (var_parameter -> VAR value_parameter .)


state 173

    (54) value_parameter -> idlist COLON . basic_type
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 188

state 174

    (55) value_parameter -> idlist error . basic_type
    (7) idlist -> idlist error . ID
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    ID              shift and go to state 48
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 189

state 175

    (46) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 46 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 176

    (28) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 190


state 177

    (39) period -> period COMMA . my_period_part DOTDOT my_period_part
    (41) period -> period COMMA . RCONST
    (34) my_period_part -> . ADDOP ICONST
    (35) my_period_part -> . ICONST
    (36) my_period_part -> . CCONST
    (37) my_period_part -> . ID

    RCONST          shift and go to state 192
    ADDOP           shift and go to state 147
    ICONST          shift and go to state 148
    CCONST          shift and go to state 149
    ID              shift and go to state 150

    my_period_part                 shift and go to state 191

state 178

    (38) period -> my_period_part DOTDOT . my_period_part
    (34) my_period_part -> . ADDOP ICONST
    (35) my_period_part -> . ICONST
    (36) my_period_part -> . CCONST
    (37) my_period_part -> . ID

    ADDOP           shift and go to state 147
    ICONST          shift and go to state 148
    CCONST          shift and go to state 149
    ID              shift and go to state 150

    my_period_part                 shift and go to state 193

state 179

    (34) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 34 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 34 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 34 (my_period_part -> ADDOP ICONST .)


state 180

    (64) statement -> IF expression THEN statement else_part .

    END             reduce using rule 64 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 64 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 64 (statement -> IF expression THEN statement else_part .)


state 181

    (77) else_part -> ELSE . statement
    (60) statement -> . empty
    (61) statement -> . variable ASSIGN expression
    (62) statement -> . procedure_call
    (63) statement -> . compound_statement
    (64) statement -> . IF expression THEN statement else_part
    (65) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (66) statement -> . READ LPAREN variable_list RPAREN
    (67) statement -> . WRITE LPAREN expression_list RPAREN
    (68) statement -> . READLN LPAREN variable_list RPAREN
    (69) statement -> . WRITELN LPAREN expression_list RPAREN
    (96) empty -> .
    (72) variable -> . ID id_varpart
    (75) procedure_call -> . ID
    (76) procedure_call -> . ID LPAREN expression_list RPAREN
    (57) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 96 (empty -> .)
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 194
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 182

    (78) else_part -> empty .

    ELSE            reduce using rule 78 (else_part -> empty .)
    END             reduce using rule 78 (else_part -> empty .)
    SEMI            reduce using rule 78 (else_part -> empty .)


state 183

    (92) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    OROP            reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 92 (factor -> ID LPAREN expression_list RPAREN .)


state 184

    (65) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (81) expression -> . simple_expression RELOP simple_expression
    (82) expression -> . simple_expression EQU simple_expression
    (83) expression -> . simple_expression
    (84) simple_expression -> . simple_expression ADDOP term
    (85) simple_expression -> . simple_expression OROP term
    (86) simple_expression -> . term
    (87) term -> . term MULDIVANDOP factor
    (88) term -> . factor
    (89) factor -> . const_value
    (90) factor -> . variable
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . ID LPAREN expression_list RPAREN
    (93) factor -> . NOTOP factor
    (94) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . ADDOP RCONST
    (20) const_value -> . CCONST
    (21) const_value -> . BCONST
    (22) const_value -> . string
    (72) variable -> . ID id_varpart
    (95) string -> . STRING

    LPAREN          shift and go to state 89
    ID              shift and go to state 90
    NOTOP           shift and go to state 91
    ADDOP           shift and go to state 84
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 195
    simple_expression              shift and go to state 83
    term                           shift and go to state 85
    factor                         shift and go to state 86
    const_value                    shift and go to state 87
    variable                       shift and go to state 88
    string                         shift and go to state 45

state 185

    (79) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 79 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 79 (expression_list -> expression_list COMMA expression .)
    RBRACK          reduce using rule 79 (expression_list -> expression_list COMMA expression .)


state 186

    (70) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 70 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 70 (variable_list -> variable_list COMMA variable .)


state 187

    (49) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 49 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 49 (parameter_list -> parameter_list SEMI parameter .)


state 188

    (54) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 54 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 54 (value_parameter -> idlist COLON basic_type .)


state 189

    (55) value_parameter -> idlist error basic_type .

    RPAREN          reduce using rule 55 (value_parameter -> idlist error basic_type .)
    SEMI            reduce using rule 55 (value_parameter -> idlist error basic_type .)


state 190

    (28) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (29) basic_type -> . INTEGER
    (30) basic_type -> . REAL
    (31) basic_type -> . CHAR
    (32) basic_type -> . BOOLEAN
    (33) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 196

state 191

    (39) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 197


state 192

    (41) period -> period COMMA RCONST .

    RBRACK          reduce using rule 41 (period -> period COMMA RCONST .)
    COMMA           reduce using rule 41 (period -> period COMMA RCONST .)


state 193

    (38) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 38 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 38 (period -> my_period_part DOTDOT my_period_part .)


state 194

    (77) else_part -> ELSE statement .

    ELSE            reduce using rule 77 (else_part -> ELSE statement .)
    END             reduce using rule 77 (else_part -> ELSE statement .)
    SEMI            reduce using rule 77 (else_part -> ELSE statement .)


state 195

    (65) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 198


state 196

    (28) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 28 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 197

    (39) period -> period COMMA my_period_part DOTDOT . my_period_part
    (34) my_period_part -> . ADDOP ICONST
    (35) my_period_part -> . ICONST
    (36) my_period_part -> . CCONST
    (37) my_period_part -> . ID

    ADDOP           shift and go to state 147
    ICONST          shift and go to state 148
    CCONST          shift and go to state 149
    ID              shift and go to state 150

    my_period_part                 shift and go to state 199

state 198

    (65) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (60) statement -> . empty
    (61) statement -> . variable ASSIGN expression
    (62) statement -> . procedure_call
    (63) statement -> . compound_statement
    (64) statement -> . IF expression THEN statement else_part
    (65) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (66) statement -> . READ LPAREN variable_list RPAREN
    (67) statement -> . WRITE LPAREN expression_list RPAREN
    (68) statement -> . READLN LPAREN variable_list RPAREN
    (69) statement -> . WRITELN LPAREN expression_list RPAREN
    (96) empty -> .
    (72) variable -> . ID id_varpart
    (75) procedure_call -> . ID
    (76) procedure_call -> . ID LPAREN expression_list RPAREN
    (57) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 96 (empty -> .)
    END             reduce using rule 96 (empty -> .)
    SEMI            reduce using rule 96 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 200
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 199

    (39) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 39 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 39 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 200

    (65) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 65 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 65 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 65 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 17 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 119 resolved using rule (const_value -> ADDOP ICONST)
WARNING: rejected rule (const_value -> ICONST) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (const_value -> RCONST)
WARNING: rejected rule (const_value -> ADDOP RCONST) in state 120
