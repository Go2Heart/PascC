Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    OROP
    RCURL
    RECORD
    SET
    TYPE
    WHILE
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program_head -> PROGRAM ID
Rule 3     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 4     idlist -> idlist COMMA ID
Rule 5     idlist -> ID
Rule 6     idlist -> idlist error ID
Rule 7     idlist -> ID error
Rule 8     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 9     const_declarations -> CONST const_declaration SEMI
Rule 10    const_declarations -> empty
Rule 11    const_declaration -> ID EQU const_value
Rule 12    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 13    const_declaration -> ID EQU error ID
Rule 14    const_declaration -> const_declaration SEMI ID EQU error ID
Rule 15    const_value -> ADDOP ICONST
Rule 16    const_value -> ICONST
Rule 17    const_value -> RCONST
Rule 18    const_value -> CCONST
Rule 19    const_value -> BCONST
Rule 20    const_value -> string
Rule 21    var_declarations -> VAR var_declaration SEMI
Rule 22    var_declarations -> empty
Rule 23    var_declaration -> idlist COLON type
Rule 24    var_declaration -> var_declaration SEMI idlist COLON type
Rule 25    type -> basic_type
Rule 26    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 27    basic_type -> INTEGER
Rule 28    basic_type -> REAL
Rule 29    basic_type -> CHAR
Rule 30    basic_type -> BOOLEAN
Rule 31    basic_type -> TYPE_STRING
Rule 32    my_period_part -> ADDOP ICONST
Rule 33    my_period_part -> ICONST
Rule 34    my_period_part -> CCONST
Rule 35    my_period_part -> ID
Rule 36    period -> my_period_part DOTDOT my_period_part
Rule 37    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 38    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 39    subprogram_declarations -> empty
Rule 40    subprogram -> subprogram_head SEMI subprogram_body
Rule 41    subprogram_head -> PROCEDURE ID formal_parameter
Rule 42    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 43    formal_parameter -> LPAREN parameter_list RPAREN
Rule 44    formal_parameter -> empty
Rule 45    parameter_list -> parameter_list SEMI parameter
Rule 46    parameter_list -> parameter
Rule 47    parameter -> var_parameter
Rule 48    parameter -> value_parameter
Rule 49    var_parameter -> VAR value_parameter
Rule 50    value_parameter -> idlist COLON basic_type
Rule 51    value_parameter -> idlist error basic_type
Rule 52    subprogram_body -> const_declarations var_declarations compound_statement
Rule 53    compound_statement -> BEGIN statement_list END
Rule 54    statement_list -> statement_list SEMI statement
Rule 55    statement_list -> statement
Rule 56    statement -> empty
Rule 57    statement -> variable ASSIGN expression
Rule 58    statement -> procedure_call
Rule 59    statement -> compound_statement
Rule 60    statement -> IF expression THEN statement else_part
Rule 61    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 62    statement -> READ LPAREN variable_list RPAREN
Rule 63    statement -> WRITE LPAREN expression_list RPAREN
Rule 64    statement -> READLN LPAREN variable_list RPAREN
Rule 65    statement -> WRITELN LPAREN expression_list RPAREN
Rule 66    variable_list -> variable_list COMMA variable
Rule 67    variable_list -> variable
Rule 68    variable -> ID id_varpart
Rule 69    id_varpart -> LBRACK expression_list RBRACK
Rule 70    id_varpart -> empty
Rule 71    procedure_call -> ID
Rule 72    procedure_call -> ID LPAREN expression_list RPAREN
Rule 73    else_part -> ELSE statement
Rule 74    else_part -> empty
Rule 75    expression_list -> expression_list COMMA expression
Rule 76    expression_list -> expression
Rule 77    expression -> simple_expression RELOP simple_expression
Rule 78    expression -> simple_expression EQU simple_expression
Rule 79    expression -> simple_expression
Rule 80    simple_expression -> simple_expression ADDOP term
Rule 81    simple_expression -> term
Rule 82    term -> term MULDIVANDOP factor
Rule 83    term -> factor
Rule 84    factor -> const_value
Rule 85    factor -> variable
Rule 86    factor -> LPAREN expression RPAREN
Rule 87    factor -> ID LPAREN expression_list RPAREN
Rule 88    factor -> NOTOP factor
Rule 89    factor -> ADDOP factor
Rule 90    string -> STRING
Rule 91    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 15 32 80 89
ARRAY                : 26
ASSIGN               : 57 61
BCONST               : 19
BEGIN                : 53
BOOLEAN              : 30
CCONST               : 18 34
CHAR                 : 29
COLON                : 23 24 42 50
COMMA                : 4 37 66 75
CONST                : 9
DO                   : 61
DOT                  : 1
DOTDOT               : 36 37
DOWNTO               : 
ELSE                 : 73
END                  : 53
EOF                  : 
EQU                  : 11 12 13 14 78
FOR                  : 61
FORWARD              : 
FUNCTION             : 42
ICONST               : 15 16 32 33
ID                   : 2 3 4 5 6 7 11 12 13 13 14 14 35 41 42 61 68 71 72 87
IF                   : 60
INOP                 : 
INTEGER              : 27
LBRACK               : 26 69
LCURL                : 
LPAREN               : 3 43 62 63 64 65 72 86 87
MULDIVANDOP          : 82
NOTOP                : 88
OF                   : 26
OROP                 : 
PROCEDURE            : 41
PROGRAM              : 2 3
RBRACK               : 26 69
RCONST               : 17
RCURL                : 
READ                 : 62
READLN               : 64
REAL                 : 28
RECORD               : 
RELOP                : 77
RPAREN               : 3 43 62 63 64 65 72 86 87
SEMI                 : 1 9 12 14 21 24 38 40 45 54
SET                  : 
STRING               : 90
THEN                 : 60
TO                   : 61
TYPE                 : 
TYPE_STRING          : 31
VAR                  : 21 49
WHILE                : 
WITH                 : 
WRITE                : 63
WRITELN              : 65
error                : 6 7 13 14 51

Nonterminals, with rules where they appear

basic_type           : 25 26 42 50 51
compound_statement   : 8 52 59
const_declaration    : 9 12 14
const_declarations   : 8 52
const_value          : 11 12 84
else_part            : 60
empty                : 10 22 39 44 56 70 74
expression           : 57 60 61 61 75 76 86
expression_list      : 63 65 69 72 75 87
factor               : 82 83 88 89
formal_parameter     : 41 42
id_varpart           : 68
idlist               : 3 4 6 23 24 50 51
my_period_part       : 36 36 37 37
parameter            : 45 46
parameter_list       : 43 45
period               : 26 37
procedure_call       : 58
program              : 0
program_body         : 1
program_head         : 1
simple_expression    : 77 77 78 78 79 80
statement            : 54 55 60 61 73
statement_list       : 53 54
string               : 20
subprogram           : 38
subprogram_body      : 40
subprogram_declarations : 8 38
subprogram_head      : 40
term                 : 80 81 82
type                 : 23 24
value_parameter      : 48 49
var_declaration      : 21 24
var_declarations     : 8 52
var_parameter        : 47
variable             : 57 66 67 85
variable_list        : 62 64 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program_head -> . PROGRAM ID
    (3) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT

    SEMI            shift and go to state 4


state 3

    (2) program_head -> PROGRAM . ID
    (3) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (8) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (9) const_declarations -> . CONST const_declaration SEMI
    (10) const_declarations -> . empty
    (91) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 91 (empty -> .)
    BEGIN           reduce using rule 91 (empty -> .)
    PROCEDURE       reduce using rule 91 (empty -> .)
    FUNCTION        reduce using rule 91 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (2) program_head -> PROGRAM ID .
    (3) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 2 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT

    DOT             shift and go to state 11


state 7

    (8) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (21) var_declarations -> . VAR var_declaration SEMI
    (22) var_declarations -> . empty
    (91) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 91 (empty -> .)
    PROCEDURE       reduce using rule 91 (empty -> .)
    FUNCTION        reduce using rule 91 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (9) const_declarations -> CONST . const_declaration SEMI
    (11) const_declaration -> . ID EQU const_value
    (12) const_declaration -> . const_declaration SEMI ID EQU const_value
    (13) const_declaration -> . ID EQU error ID
    (14) const_declaration -> . const_declaration SEMI ID EQU error ID

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (10) const_declarations -> empty .

    VAR             reduce using rule 10 (const_declarations -> empty .)
    BEGIN           reduce using rule 10 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 10 (const_declarations -> empty .)
    FUNCTION        reduce using rule 10 (const_declarations -> empty .)


state 10

    (3) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (8) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (38) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (39) subprogram_declarations -> . empty
    (91) empty -> .

    BEGIN           reduce using rule 91 (empty -> .)
    PROCEDURE       reduce using rule 91 (empty -> .)
    FUNCTION        reduce using rule 91 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (21) var_declarations -> VAR . var_declaration SEMI
    (23) var_declaration -> . idlist COLON type
    (24) var_declaration -> . var_declaration SEMI idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (22) var_declarations -> empty .

    BEGIN           reduce using rule 22 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 22 (var_declarations -> empty .)
    FUNCTION        reduce using rule 22 (var_declarations -> empty .)


state 15

    (9) const_declarations -> CONST const_declaration . SEMI
    (12) const_declaration -> const_declaration . SEMI ID EQU const_value
    (14) const_declaration -> const_declaration . SEMI ID EQU error ID

    SEMI            shift and go to state 23


state 16

    (11) const_declaration -> ID . EQU const_value
    (13) const_declaration -> ID . EQU error ID

    EQU             shift and go to state 24


state 17

    (5) idlist -> ID .
    (7) idlist -> ID . error

  ! shift/reduce conflict for error resolved as shift
    RPAREN          reduce using rule 5 (idlist -> ID .)
    COMMA           reduce using rule 5 (idlist -> ID .)
    COLON           reduce using rule 5 (idlist -> ID .)
    error           shift and go to state 25

  ! error           [ reduce using rule 5 (idlist -> ID .) ]


state 18

    (3) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (4) idlist -> idlist . COMMA ID
    (6) idlist -> idlist . error ID

    RPAREN          shift and go to state 26
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 19

    (8) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (38) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (53) compound_statement -> . BEGIN statement_list END
    (40) subprogram -> . subprogram_head SEMI subprogram_body
    (41) subprogram_head -> . PROCEDURE ID formal_parameter
    (42) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 31
    PROCEDURE       shift and go to state 33
    FUNCTION        shift and go to state 34

    compound_statement             shift and go to state 29
    subprogram                     shift and go to state 30
    subprogram_head                shift and go to state 32

state 20

    (39) subprogram_declarations -> empty .

    BEGIN           reduce using rule 39 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 39 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 39 (subprogram_declarations -> empty .)


state 21

    (21) var_declarations -> VAR var_declaration . SEMI
    (24) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 35


state 22

    (23) var_declaration -> idlist . COLON type
    (4) idlist -> idlist . COMMA ID
    (6) idlist -> idlist . error ID

    COLON           shift and go to state 36
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 23

    (9) const_declarations -> CONST const_declaration SEMI .
    (12) const_declaration -> const_declaration SEMI . ID EQU const_value
    (14) const_declaration -> const_declaration SEMI . ID EQU error ID

    VAR             reduce using rule 9 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 9 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 9 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 9 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 37


state 24

    (11) const_declaration -> ID EQU . const_value
    (13) const_declaration -> ID EQU . error ID
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (90) string -> . STRING

    error           shift and go to state 39
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 38
    string                         shift and go to state 45

state 25

    (7) idlist -> ID error .

    RPAREN          reduce using rule 7 (idlist -> ID error .)
    COMMA           reduce using rule 7 (idlist -> ID error .)
    error           reduce using rule 7 (idlist -> ID error .)
    COLON           reduce using rule 7 (idlist -> ID error .)


state 26

    (3) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 27

    (4) idlist -> idlist COMMA . ID

    ID              shift and go to state 47


state 28

    (6) idlist -> idlist error . ID

    ID              shift and go to state 48


state 29

    (8) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 8 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 30

    (38) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 49


state 31

    (53) compound_statement -> BEGIN . statement_list END
    (54) statement_list -> . statement_list SEMI statement
    (55) statement_list -> . statement
    (56) statement -> . empty
    (57) statement -> . variable ASSIGN expression
    (58) statement -> . procedure_call
    (59) statement -> . compound_statement
    (60) statement -> . IF expression THEN statement else_part
    (61) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (62) statement -> . READ LPAREN variable_list RPAREN
    (63) statement -> . WRITE LPAREN expression_list RPAREN
    (64) statement -> . READLN LPAREN variable_list RPAREN
    (65) statement -> . WRITELN LPAREN expression_list RPAREN
    (91) empty -> .
    (68) variable -> . ID id_varpart
    (71) procedure_call -> . ID
    (72) procedure_call -> . ID LPAREN expression_list RPAREN
    (53) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement_list                 shift and go to state 50
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 32

    (40) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 63


state 33

    (41) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 64


state 34

    (42) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 65


state 35

    (21) var_declarations -> VAR var_declaration SEMI .
    (24) var_declaration -> var_declaration SEMI . idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    BEGIN           reduce using rule 21 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 21 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 21 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 66

state 36

    (23) var_declaration -> idlist COLON . type
    (25) type -> . basic_type
    (26) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 67
    basic_type                     shift and go to state 68

state 37

    (12) const_declaration -> const_declaration SEMI ID . EQU const_value
    (14) const_declaration -> const_declaration SEMI ID . EQU error ID

    EQU             shift and go to state 75


state 38

    (11) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 11 (const_declaration -> ID EQU const_value .)


state 39

    (13) const_declaration -> ID EQU error . ID

    ID              shift and go to state 76


state 40

    (15) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 77


state 41

    (16) const_value -> ICONST .

    SEMI            reduce using rule 16 (const_value -> ICONST .)
    MULDIVANDOP     reduce using rule 16 (const_value -> ICONST .)
    RELOP           reduce using rule 16 (const_value -> ICONST .)
    EQU             reduce using rule 16 (const_value -> ICONST .)
    ADDOP           reduce using rule 16 (const_value -> ICONST .)
    THEN            reduce using rule 16 (const_value -> ICONST .)
    END             reduce using rule 16 (const_value -> ICONST .)
    ELSE            reduce using rule 16 (const_value -> ICONST .)
    RPAREN          reduce using rule 16 (const_value -> ICONST .)
    COMMA           reduce using rule 16 (const_value -> ICONST .)
    RBRACK          reduce using rule 16 (const_value -> ICONST .)
    TO              reduce using rule 16 (const_value -> ICONST .)
    DO              reduce using rule 16 (const_value -> ICONST .)


state 42

    (17) const_value -> RCONST .

    SEMI            reduce using rule 17 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 17 (const_value -> RCONST .)
    RELOP           reduce using rule 17 (const_value -> RCONST .)
    EQU             reduce using rule 17 (const_value -> RCONST .)
    ADDOP           reduce using rule 17 (const_value -> RCONST .)
    THEN            reduce using rule 17 (const_value -> RCONST .)
    END             reduce using rule 17 (const_value -> RCONST .)
    ELSE            reduce using rule 17 (const_value -> RCONST .)
    RPAREN          reduce using rule 17 (const_value -> RCONST .)
    COMMA           reduce using rule 17 (const_value -> RCONST .)
    RBRACK          reduce using rule 17 (const_value -> RCONST .)
    TO              reduce using rule 17 (const_value -> RCONST .)
    DO              reduce using rule 17 (const_value -> RCONST .)


state 43

    (18) const_value -> CCONST .

    SEMI            reduce using rule 18 (const_value -> CCONST .)
    MULDIVANDOP     reduce using rule 18 (const_value -> CCONST .)
    RELOP           reduce using rule 18 (const_value -> CCONST .)
    EQU             reduce using rule 18 (const_value -> CCONST .)
    ADDOP           reduce using rule 18 (const_value -> CCONST .)
    THEN            reduce using rule 18 (const_value -> CCONST .)
    END             reduce using rule 18 (const_value -> CCONST .)
    ELSE            reduce using rule 18 (const_value -> CCONST .)
    RPAREN          reduce using rule 18 (const_value -> CCONST .)
    COMMA           reduce using rule 18 (const_value -> CCONST .)
    RBRACK          reduce using rule 18 (const_value -> CCONST .)
    TO              reduce using rule 18 (const_value -> CCONST .)
    DO              reduce using rule 18 (const_value -> CCONST .)


state 44

    (19) const_value -> BCONST .

    SEMI            reduce using rule 19 (const_value -> BCONST .)
    MULDIVANDOP     reduce using rule 19 (const_value -> BCONST .)
    RELOP           reduce using rule 19 (const_value -> BCONST .)
    EQU             reduce using rule 19 (const_value -> BCONST .)
    ADDOP           reduce using rule 19 (const_value -> BCONST .)
    THEN            reduce using rule 19 (const_value -> BCONST .)
    END             reduce using rule 19 (const_value -> BCONST .)
    ELSE            reduce using rule 19 (const_value -> BCONST .)
    RPAREN          reduce using rule 19 (const_value -> BCONST .)
    COMMA           reduce using rule 19 (const_value -> BCONST .)
    RBRACK          reduce using rule 19 (const_value -> BCONST .)
    TO              reduce using rule 19 (const_value -> BCONST .)
    DO              reduce using rule 19 (const_value -> BCONST .)


state 45

    (20) const_value -> string .

    SEMI            reduce using rule 20 (const_value -> string .)
    MULDIVANDOP     reduce using rule 20 (const_value -> string .)
    RELOP           reduce using rule 20 (const_value -> string .)
    EQU             reduce using rule 20 (const_value -> string .)
    ADDOP           reduce using rule 20 (const_value -> string .)
    THEN            reduce using rule 20 (const_value -> string .)
    END             reduce using rule 20 (const_value -> string .)
    ELSE            reduce using rule 20 (const_value -> string .)
    RPAREN          reduce using rule 20 (const_value -> string .)
    COMMA           reduce using rule 20 (const_value -> string .)
    RBRACK          reduce using rule 20 (const_value -> string .)
    TO              reduce using rule 20 (const_value -> string .)
    DO              reduce using rule 20 (const_value -> string .)


state 46

    (90) string -> STRING .

    SEMI            reduce using rule 90 (string -> STRING .)
    MULDIVANDOP     reduce using rule 90 (string -> STRING .)
    RELOP           reduce using rule 90 (string -> STRING .)
    EQU             reduce using rule 90 (string -> STRING .)
    ADDOP           reduce using rule 90 (string -> STRING .)
    THEN            reduce using rule 90 (string -> STRING .)
    END             reduce using rule 90 (string -> STRING .)
    ELSE            reduce using rule 90 (string -> STRING .)
    RPAREN          reduce using rule 90 (string -> STRING .)
    COMMA           reduce using rule 90 (string -> STRING .)
    RBRACK          reduce using rule 90 (string -> STRING .)
    TO              reduce using rule 90 (string -> STRING .)
    DO              reduce using rule 90 (string -> STRING .)


state 47

    (4) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 4 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 4 (idlist -> idlist COMMA ID .)
    error           reduce using rule 4 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 4 (idlist -> idlist COMMA ID .)


state 48

    (6) idlist -> idlist error ID .

    RPAREN          reduce using rule 6 (idlist -> idlist error ID .)
    COMMA           reduce using rule 6 (idlist -> idlist error ID .)
    error           reduce using rule 6 (idlist -> idlist error ID .)
    COLON           reduce using rule 6 (idlist -> idlist error ID .)


state 49

    (38) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 38 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 38 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 38 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 50

    (53) compound_statement -> BEGIN statement_list . END
    (54) statement_list -> statement_list . SEMI statement

    END             shift and go to state 78
    SEMI            shift and go to state 79


state 51

    (55) statement_list -> statement .

    END             reduce using rule 55 (statement_list -> statement .)
    SEMI            reduce using rule 55 (statement_list -> statement .)


state 52

    (56) statement -> empty .

    END             reduce using rule 56 (statement -> empty .)
    SEMI            reduce using rule 56 (statement -> empty .)
    ELSE            reduce using rule 56 (statement -> empty .)


state 53

    (57) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 80


state 54

    (58) statement -> procedure_call .

    END             reduce using rule 58 (statement -> procedure_call .)
    SEMI            reduce using rule 58 (statement -> procedure_call .)
    ELSE            reduce using rule 58 (statement -> procedure_call .)


state 55

    (59) statement -> compound_statement .

    END             reduce using rule 59 (statement -> compound_statement .)
    SEMI            reduce using rule 59 (statement -> compound_statement .)
    ELSE            reduce using rule 59 (statement -> compound_statement .)


state 56

    (60) statement -> IF . expression THEN statement else_part
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 81
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 57

    (61) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 91


state 58

    (68) variable -> ID . id_varpart
    (71) procedure_call -> ID .
    (72) procedure_call -> ID . LPAREN expression_list RPAREN
    (69) id_varpart -> . LBRACK expression_list RBRACK
    (70) id_varpart -> . empty
    (91) empty -> .

    END             reduce using rule 71 (procedure_call -> ID .)
    SEMI            reduce using rule 71 (procedure_call -> ID .)
    ELSE            reduce using rule 71 (procedure_call -> ID .)
    LPAREN          shift and go to state 93
    LBRACK          shift and go to state 94
    ASSIGN          reduce using rule 91 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 59

    (62) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 96


state 60

    (63) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 97


state 61

    (64) statement -> READLN . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 98


state 62

    (65) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 99


state 63

    (40) subprogram -> subprogram_head SEMI . subprogram_body
    (52) subprogram_body -> . const_declarations var_declarations compound_statement
    (9) const_declarations -> . CONST const_declaration SEMI
    (10) const_declarations -> . empty
    (91) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 91 (empty -> .)
    BEGIN           reduce using rule 91 (empty -> .)

    subprogram_body                shift and go to state 100
    const_declarations             shift and go to state 101
    empty                          shift and go to state 9

state 64

    (41) subprogram_head -> PROCEDURE ID . formal_parameter
    (43) formal_parameter -> . LPAREN parameter_list RPAREN
    (44) formal_parameter -> . empty
    (91) empty -> .

    LPAREN          shift and go to state 103
    SEMI            reduce using rule 91 (empty -> .)

    formal_parameter               shift and go to state 102
    empty                          shift and go to state 104

state 65

    (42) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (43) formal_parameter -> . LPAREN parameter_list RPAREN
    (44) formal_parameter -> . empty
    (91) empty -> .

    LPAREN          shift and go to state 103
    COLON           reduce using rule 91 (empty -> .)

    formal_parameter               shift and go to state 105
    empty                          shift and go to state 104

state 66

    (24) var_declaration -> var_declaration SEMI idlist . COLON type
    (4) idlist -> idlist . COMMA ID
    (6) idlist -> idlist . error ID

    COLON           shift and go to state 106
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 67

    (23) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 23 (var_declaration -> idlist COLON type .)


state 68

    (25) type -> basic_type .

    SEMI            reduce using rule 25 (type -> basic_type .)


state 69

    (26) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 107


state 70

    (27) basic_type -> INTEGER .

    SEMI            reduce using rule 27 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 27 (basic_type -> INTEGER .)


state 71

    (28) basic_type -> REAL .

    SEMI            reduce using rule 28 (basic_type -> REAL .)
    RPAREN          reduce using rule 28 (basic_type -> REAL .)


state 72

    (29) basic_type -> CHAR .

    SEMI            reduce using rule 29 (basic_type -> CHAR .)
    RPAREN          reduce using rule 29 (basic_type -> CHAR .)


state 73

    (30) basic_type -> BOOLEAN .

    SEMI            reduce using rule 30 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 30 (basic_type -> BOOLEAN .)


state 74

    (31) basic_type -> TYPE_STRING .

    SEMI            reduce using rule 31 (basic_type -> TYPE_STRING .)
    RPAREN          reduce using rule 31 (basic_type -> TYPE_STRING .)


state 75

    (12) const_declaration -> const_declaration SEMI ID EQU . const_value
    (14) const_declaration -> const_declaration SEMI ID EQU . error ID
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (90) string -> . STRING

    error           shift and go to state 109
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 108
    string                         shift and go to state 45

state 76

    (13) const_declaration -> ID EQU error ID .

    SEMI            reduce using rule 13 (const_declaration -> ID EQU error ID .)


state 77

    (15) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 15 (const_value -> ADDOP ICONST .)


state 78

    (53) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 53 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 53 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 53 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 53 (compound_statement -> BEGIN statement_list END .)


state 79

    (54) statement_list -> statement_list SEMI . statement
    (56) statement -> . empty
    (57) statement -> . variable ASSIGN expression
    (58) statement -> . procedure_call
    (59) statement -> . compound_statement
    (60) statement -> . IF expression THEN statement else_part
    (61) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (62) statement -> . READ LPAREN variable_list RPAREN
    (63) statement -> . WRITE LPAREN expression_list RPAREN
    (64) statement -> . READLN LPAREN variable_list RPAREN
    (65) statement -> . WRITELN LPAREN expression_list RPAREN
    (91) empty -> .
    (68) variable -> . ID id_varpart
    (71) procedure_call -> . ID
    (72) procedure_call -> . ID LPAREN expression_list RPAREN
    (53) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 110
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 80

    (57) statement -> variable ASSIGN . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    variable                       shift and go to state 87
    expression                     shift and go to state 111
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    string                         shift and go to state 45

state 81

    (60) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 112


state 82

    (77) expression -> simple_expression . RELOP simple_expression
    (78) expression -> simple_expression . EQU simple_expression
    (79) expression -> simple_expression .
    (80) simple_expression -> simple_expression . ADDOP term

    RELOP           shift and go to state 113
    EQU             shift and go to state 114
    THEN            reduce using rule 79 (expression -> simple_expression .)
    END             reduce using rule 79 (expression -> simple_expression .)
    SEMI            reduce using rule 79 (expression -> simple_expression .)
    ELSE            reduce using rule 79 (expression -> simple_expression .)
    RPAREN          reduce using rule 79 (expression -> simple_expression .)
    COMMA           reduce using rule 79 (expression -> simple_expression .)
    RBRACK          reduce using rule 79 (expression -> simple_expression .)
    TO              reduce using rule 79 (expression -> simple_expression .)
    DO              reduce using rule 79 (expression -> simple_expression .)
    ADDOP           shift and go to state 115


state 83

    (89) factor -> ADDOP . factor
    (15) const_value -> ADDOP . ICONST
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    ICONST          shift and go to state 117
    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 116
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 84

    (81) simple_expression -> term .
    (82) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 81 (simple_expression -> term .)
    EQU             reduce using rule 81 (simple_expression -> term .)
    ADDOP           reduce using rule 81 (simple_expression -> term .)
    THEN            reduce using rule 81 (simple_expression -> term .)
    END             reduce using rule 81 (simple_expression -> term .)
    SEMI            reduce using rule 81 (simple_expression -> term .)
    ELSE            reduce using rule 81 (simple_expression -> term .)
    RPAREN          reduce using rule 81 (simple_expression -> term .)
    COMMA           reduce using rule 81 (simple_expression -> term .)
    RBRACK          reduce using rule 81 (simple_expression -> term .)
    TO              reduce using rule 81 (simple_expression -> term .)
    DO              reduce using rule 81 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 118


state 85

    (83) term -> factor .

    MULDIVANDOP     reduce using rule 83 (term -> factor .)
    RELOP           reduce using rule 83 (term -> factor .)
    EQU             reduce using rule 83 (term -> factor .)
    ADDOP           reduce using rule 83 (term -> factor .)
    THEN            reduce using rule 83 (term -> factor .)
    END             reduce using rule 83 (term -> factor .)
    SEMI            reduce using rule 83 (term -> factor .)
    ELSE            reduce using rule 83 (term -> factor .)
    RPAREN          reduce using rule 83 (term -> factor .)
    COMMA           reduce using rule 83 (term -> factor .)
    RBRACK          reduce using rule 83 (term -> factor .)
    TO              reduce using rule 83 (term -> factor .)
    DO              reduce using rule 83 (term -> factor .)


state 86

    (84) factor -> const_value .

    MULDIVANDOP     reduce using rule 84 (factor -> const_value .)
    RELOP           reduce using rule 84 (factor -> const_value .)
    EQU             reduce using rule 84 (factor -> const_value .)
    ADDOP           reduce using rule 84 (factor -> const_value .)
    THEN            reduce using rule 84 (factor -> const_value .)
    END             reduce using rule 84 (factor -> const_value .)
    SEMI            reduce using rule 84 (factor -> const_value .)
    ELSE            reduce using rule 84 (factor -> const_value .)
    RPAREN          reduce using rule 84 (factor -> const_value .)
    COMMA           reduce using rule 84 (factor -> const_value .)
    RBRACK          reduce using rule 84 (factor -> const_value .)
    TO              reduce using rule 84 (factor -> const_value .)
    DO              reduce using rule 84 (factor -> const_value .)


state 87

    (85) factor -> variable .

    MULDIVANDOP     reduce using rule 85 (factor -> variable .)
    RELOP           reduce using rule 85 (factor -> variable .)
    EQU             reduce using rule 85 (factor -> variable .)
    ADDOP           reduce using rule 85 (factor -> variable .)
    THEN            reduce using rule 85 (factor -> variable .)
    END             reduce using rule 85 (factor -> variable .)
    SEMI            reduce using rule 85 (factor -> variable .)
    ELSE            reduce using rule 85 (factor -> variable .)
    RPAREN          reduce using rule 85 (factor -> variable .)
    COMMA           reduce using rule 85 (factor -> variable .)
    RBRACK          reduce using rule 85 (factor -> variable .)
    TO              reduce using rule 85 (factor -> variable .)
    DO              reduce using rule 85 (factor -> variable .)


state 88

    (86) factor -> LPAREN . expression RPAREN
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 119
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 89

    (87) factor -> ID . LPAREN expression_list RPAREN
    (68) variable -> ID . id_varpart
    (69) id_varpart -> . LBRACK expression_list RBRACK
    (70) id_varpart -> . empty
    (91) empty -> .

    LPAREN          shift and go to state 120
    LBRACK          shift and go to state 94
    MULDIVANDOP     reduce using rule 91 (empty -> .)
    RELOP           reduce using rule 91 (empty -> .)
    EQU             reduce using rule 91 (empty -> .)
    ADDOP           reduce using rule 91 (empty -> .)
    THEN            reduce using rule 91 (empty -> .)
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ELSE            reduce using rule 91 (empty -> .)
    RPAREN          reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    RBRACK          reduce using rule 91 (empty -> .)
    TO              reduce using rule 91 (empty -> .)
    DO              reduce using rule 91 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 90

    (88) factor -> NOTOP . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 121
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 91

    (61) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 122


state 92

    (68) variable -> ID id_varpart .

    ASSIGN          reduce using rule 68 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 68 (variable -> ID id_varpart .)
    RELOP           reduce using rule 68 (variable -> ID id_varpart .)
    EQU             reduce using rule 68 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 68 (variable -> ID id_varpart .)
    THEN            reduce using rule 68 (variable -> ID id_varpart .)
    END             reduce using rule 68 (variable -> ID id_varpart .)
    SEMI            reduce using rule 68 (variable -> ID id_varpart .)
    ELSE            reduce using rule 68 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 68 (variable -> ID id_varpart .)
    COMMA           reduce using rule 68 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 68 (variable -> ID id_varpart .)
    TO              reduce using rule 68 (variable -> ID id_varpart .)
    DO              reduce using rule 68 (variable -> ID id_varpart .)


state 93

    (72) procedure_call -> ID LPAREN . expression_list RPAREN
    (75) expression_list -> . expression_list COMMA expression
    (76) expression_list -> . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 123
    expression                     shift and go to state 124
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 94

    (69) id_varpart -> LBRACK . expression_list RBRACK
    (75) expression_list -> . expression_list COMMA expression
    (76) expression_list -> . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 125
    expression                     shift and go to state 124
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 95

    (70) id_varpart -> empty .

    ASSIGN          reduce using rule 70 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 70 (id_varpart -> empty .)
    RELOP           reduce using rule 70 (id_varpart -> empty .)
    EQU             reduce using rule 70 (id_varpart -> empty .)
    ADDOP           reduce using rule 70 (id_varpart -> empty .)
    THEN            reduce using rule 70 (id_varpart -> empty .)
    END             reduce using rule 70 (id_varpart -> empty .)
    SEMI            reduce using rule 70 (id_varpart -> empty .)
    ELSE            reduce using rule 70 (id_varpart -> empty .)
    RPAREN          reduce using rule 70 (id_varpart -> empty .)
    COMMA           reduce using rule 70 (id_varpart -> empty .)
    RBRACK          reduce using rule 70 (id_varpart -> empty .)
    TO              reduce using rule 70 (id_varpart -> empty .)
    DO              reduce using rule 70 (id_varpart -> empty .)


state 96

    (62) statement -> READ LPAREN . variable_list RPAREN
    (66) variable_list -> . variable_list COMMA variable
    (67) variable_list -> . variable
    (68) variable -> . ID id_varpart

    ID              shift and go to state 128

    variable_list                  shift and go to state 126
    variable                       shift and go to state 127

state 97

    (63) statement -> WRITE LPAREN . expression_list RPAREN
    (75) expression_list -> . expression_list COMMA expression
    (76) expression_list -> . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 129
    expression                     shift and go to state 124
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 98

    (64) statement -> READLN LPAREN . variable_list RPAREN
    (66) variable_list -> . variable_list COMMA variable
    (67) variable_list -> . variable
    (68) variable -> . ID id_varpart

    ID              shift and go to state 128

    variable_list                  shift and go to state 130
    variable                       shift and go to state 127

state 99

    (65) statement -> WRITELN LPAREN . expression_list RPAREN
    (75) expression_list -> . expression_list COMMA expression
    (76) expression_list -> . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 131
    expression                     shift and go to state 124
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 100

    (40) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 40 (subprogram -> subprogram_head SEMI subprogram_body .)


state 101

    (52) subprogram_body -> const_declarations . var_declarations compound_statement
    (21) var_declarations -> . VAR var_declaration SEMI
    (22) var_declarations -> . empty
    (91) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 91 (empty -> .)

    var_declarations               shift and go to state 132
    empty                          shift and go to state 14

state 102

    (41) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 41 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 103

    (43) formal_parameter -> LPAREN . parameter_list RPAREN
    (45) parameter_list -> . parameter_list SEMI parameter
    (46) parameter_list -> . parameter
    (47) parameter -> . var_parameter
    (48) parameter -> . value_parameter
    (49) var_parameter -> . VAR value_parameter
    (50) value_parameter -> . idlist COLON basic_type
    (51) value_parameter -> . idlist error basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    VAR             shift and go to state 137
    ID              shift and go to state 17

    parameter_list                 shift and go to state 133
    parameter                      shift and go to state 134
    var_parameter                  shift and go to state 135
    value_parameter                shift and go to state 136
    idlist                         shift and go to state 138

state 104

    (44) formal_parameter -> empty .

    SEMI            reduce using rule 44 (formal_parameter -> empty .)
    COLON           reduce using rule 44 (formal_parameter -> empty .)


state 105

    (42) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 139


state 106

    (24) var_declaration -> var_declaration SEMI idlist COLON . type
    (25) type -> . basic_type
    (26) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 140
    basic_type                     shift and go to state 68

state 107

    (26) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (36) period -> . my_period_part DOTDOT my_period_part
    (37) period -> . period COMMA my_period_part DOTDOT my_period_part
    (32) my_period_part -> . ADDOP ICONST
    (33) my_period_part -> . ICONST
    (34) my_period_part -> . CCONST
    (35) my_period_part -> . ID

    ADDOP           shift and go to state 143
    ICONST          shift and go to state 144
    CCONST          shift and go to state 145
    ID              shift and go to state 146

    period                         shift and go to state 141
    my_period_part                 shift and go to state 142

state 108

    (12) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 12 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 109

    (14) const_declaration -> const_declaration SEMI ID EQU error . ID

    ID              shift and go to state 147


state 110

    (54) statement_list -> statement_list SEMI statement .

    END             reduce using rule 54 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 54 (statement_list -> statement_list SEMI statement .)


state 111

    (57) statement -> variable ASSIGN expression .

    END             reduce using rule 57 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 57 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 57 (statement -> variable ASSIGN expression .)


state 112

    (60) statement -> IF expression THEN . statement else_part
    (56) statement -> . empty
    (57) statement -> . variable ASSIGN expression
    (58) statement -> . procedure_call
    (59) statement -> . compound_statement
    (60) statement -> . IF expression THEN statement else_part
    (61) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (62) statement -> . READ LPAREN variable_list RPAREN
    (63) statement -> . WRITE LPAREN expression_list RPAREN
    (64) statement -> . READLN LPAREN variable_list RPAREN
    (65) statement -> . WRITELN LPAREN expression_list RPAREN
    (91) empty -> .
    (68) variable -> . ID id_varpart
    (71) procedure_call -> . ID
    (72) procedure_call -> . ID LPAREN expression_list RPAREN
    (53) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 91 (empty -> .)
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 148
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 113

    (77) expression -> simple_expression RELOP . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 149
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 114

    (78) expression -> simple_expression EQU . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 150
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 115

    (80) simple_expression -> simple_expression ADDOP . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    term                           shift and go to state 151
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 116

    (89) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 89 (factor -> ADDOP factor .)
    RELOP           reduce using rule 89 (factor -> ADDOP factor .)
    EQU             reduce using rule 89 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 89 (factor -> ADDOP factor .)
    THEN            reduce using rule 89 (factor -> ADDOP factor .)
    END             reduce using rule 89 (factor -> ADDOP factor .)
    SEMI            reduce using rule 89 (factor -> ADDOP factor .)
    ELSE            reduce using rule 89 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 89 (factor -> ADDOP factor .)
    COMMA           reduce using rule 89 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 89 (factor -> ADDOP factor .)
    TO              reduce using rule 89 (factor -> ADDOP factor .)
    DO              reduce using rule 89 (factor -> ADDOP factor .)


state 117

    (15) const_value -> ADDOP ICONST .
    (16) const_value -> ICONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for EQU resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for THEN resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for END resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for TO resolved using rule 15 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for DO resolved using rule 15 (const_value -> ADDOP ICONST .)
    MULDIVANDOP     reduce using rule 15 (const_value -> ADDOP ICONST .)
    RELOP           reduce using rule 15 (const_value -> ADDOP ICONST .)
    EQU             reduce using rule 15 (const_value -> ADDOP ICONST .)
    ADDOP           reduce using rule 15 (const_value -> ADDOP ICONST .)
    THEN            reduce using rule 15 (const_value -> ADDOP ICONST .)
    END             reduce using rule 15 (const_value -> ADDOP ICONST .)
    SEMI            reduce using rule 15 (const_value -> ADDOP ICONST .)
    ELSE            reduce using rule 15 (const_value -> ADDOP ICONST .)
    RPAREN          reduce using rule 15 (const_value -> ADDOP ICONST .)
    COMMA           reduce using rule 15 (const_value -> ADDOP ICONST .)
    RBRACK          reduce using rule 15 (const_value -> ADDOP ICONST .)
    TO              reduce using rule 15 (const_value -> ADDOP ICONST .)
    DO              reduce using rule 15 (const_value -> ADDOP ICONST .)

  ! MULDIVANDOP     [ reduce using rule 16 (const_value -> ICONST .) ]
  ! RELOP           [ reduce using rule 16 (const_value -> ICONST .) ]
  ! EQU             [ reduce using rule 16 (const_value -> ICONST .) ]
  ! ADDOP           [ reduce using rule 16 (const_value -> ICONST .) ]
  ! THEN            [ reduce using rule 16 (const_value -> ICONST .) ]
  ! END             [ reduce using rule 16 (const_value -> ICONST .) ]
  ! SEMI            [ reduce using rule 16 (const_value -> ICONST .) ]
  ! ELSE            [ reduce using rule 16 (const_value -> ICONST .) ]
  ! RPAREN          [ reduce using rule 16 (const_value -> ICONST .) ]
  ! COMMA           [ reduce using rule 16 (const_value -> ICONST .) ]
  ! RBRACK          [ reduce using rule 16 (const_value -> ICONST .) ]
  ! TO              [ reduce using rule 16 (const_value -> ICONST .) ]
  ! DO              [ reduce using rule 16 (const_value -> ICONST .) ]


state 118

    (82) term -> term MULDIVANDOP . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 152
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 119

    (86) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 153


state 120

    (87) factor -> ID LPAREN . expression_list RPAREN
    (75) expression_list -> . expression_list COMMA expression
    (76) expression_list -> . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 154
    expression                     shift and go to state 124
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 121

    (88) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 88 (factor -> NOTOP factor .)
    RELOP           reduce using rule 88 (factor -> NOTOP factor .)
    EQU             reduce using rule 88 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 88 (factor -> NOTOP factor .)
    THEN            reduce using rule 88 (factor -> NOTOP factor .)
    END             reduce using rule 88 (factor -> NOTOP factor .)
    SEMI            reduce using rule 88 (factor -> NOTOP factor .)
    ELSE            reduce using rule 88 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 88 (factor -> NOTOP factor .)
    COMMA           reduce using rule 88 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 88 (factor -> NOTOP factor .)
    TO              reduce using rule 88 (factor -> NOTOP factor .)
    DO              reduce using rule 88 (factor -> NOTOP factor .)


state 122

    (61) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 155
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 123

    (72) procedure_call -> ID LPAREN expression_list . RPAREN
    (75) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 156
    COMMA           shift and go to state 157


state 124

    (76) expression_list -> expression .

    RPAREN          reduce using rule 76 (expression_list -> expression .)
    COMMA           reduce using rule 76 (expression_list -> expression .)
    RBRACK          reduce using rule 76 (expression_list -> expression .)


state 125

    (69) id_varpart -> LBRACK expression_list . RBRACK
    (75) expression_list -> expression_list . COMMA expression

    RBRACK          shift and go to state 158
    COMMA           shift and go to state 157


state 126

    (62) statement -> READ LPAREN variable_list . RPAREN
    (66) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 127

    (67) variable_list -> variable .

    RPAREN          reduce using rule 67 (variable_list -> variable .)
    COMMA           reduce using rule 67 (variable_list -> variable .)


state 128

    (68) variable -> ID . id_varpart
    (69) id_varpart -> . LBRACK expression_list RBRACK
    (70) id_varpart -> . empty
    (91) empty -> .

    LBRACK          shift and go to state 94
    RPAREN          reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 129

    (63) statement -> WRITE LPAREN expression_list . RPAREN
    (75) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 161
    COMMA           shift and go to state 157


state 130

    (64) statement -> READLN LPAREN variable_list . RPAREN
    (66) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 162
    COMMA           shift and go to state 160


state 131

    (65) statement -> WRITELN LPAREN expression_list . RPAREN
    (75) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 157


state 132

    (52) subprogram_body -> const_declarations var_declarations . compound_statement
    (53) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 31

    compound_statement             shift and go to state 164

state 133

    (43) formal_parameter -> LPAREN parameter_list . RPAREN
    (45) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 165
    SEMI            shift and go to state 166


state 134

    (46) parameter_list -> parameter .

    RPAREN          reduce using rule 46 (parameter_list -> parameter .)
    SEMI            reduce using rule 46 (parameter_list -> parameter .)


state 135

    (47) parameter -> var_parameter .

    RPAREN          reduce using rule 47 (parameter -> var_parameter .)
    SEMI            reduce using rule 47 (parameter -> var_parameter .)


state 136

    (48) parameter -> value_parameter .

    RPAREN          reduce using rule 48 (parameter -> value_parameter .)
    SEMI            reduce using rule 48 (parameter -> value_parameter .)


state 137

    (49) var_parameter -> VAR . value_parameter
    (50) value_parameter -> . idlist COLON basic_type
    (51) value_parameter -> . idlist error basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    ID              shift and go to state 17

    value_parameter                shift and go to state 167
    idlist                         shift and go to state 138

state 138

    (50) value_parameter -> idlist . COLON basic_type
    (51) value_parameter -> idlist . error basic_type
    (4) idlist -> idlist . COMMA ID
    (6) idlist -> idlist . error ID

    COLON           shift and go to state 168
    error           shift and go to state 169
    COMMA           shift and go to state 27


state 139

    (42) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 170

state 140

    (24) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 24 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 141

    (26) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (37) period -> period . COMMA my_period_part DOTDOT my_period_part

    RBRACK          shift and go to state 171
    COMMA           shift and go to state 172


state 142

    (36) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 173


state 143

    (32) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 174


state 144

    (33) my_period_part -> ICONST .

    DOTDOT          reduce using rule 33 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 33 (my_period_part -> ICONST .)
    COMMA           reduce using rule 33 (my_period_part -> ICONST .)


state 145

    (34) my_period_part -> CCONST .

    DOTDOT          reduce using rule 34 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 34 (my_period_part -> CCONST .)
    COMMA           reduce using rule 34 (my_period_part -> CCONST .)


state 146

    (35) my_period_part -> ID .

    DOTDOT          reduce using rule 35 (my_period_part -> ID .)
    RBRACK          reduce using rule 35 (my_period_part -> ID .)
    COMMA           reduce using rule 35 (my_period_part -> ID .)


state 147

    (14) const_declaration -> const_declaration SEMI ID EQU error ID .

    SEMI            reduce using rule 14 (const_declaration -> const_declaration SEMI ID EQU error ID .)


state 148

    (60) statement -> IF expression THEN statement . else_part
    (73) else_part -> . ELSE statement
    (74) else_part -> . empty
    (91) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 176
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)

  ! ELSE            [ reduce using rule 91 (empty -> .) ]

    else_part                      shift and go to state 175
    empty                          shift and go to state 177

state 149

    (77) expression -> simple_expression RELOP simple_expression .
    (80) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 77 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 115


state 150

    (78) expression -> simple_expression EQU simple_expression .
    (80) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 78 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 115


state 151

    (80) simple_expression -> simple_expression ADDOP term .
    (82) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 80 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 118


state 152

    (82) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 82 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 82 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 82 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 82 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 82 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 82 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 82 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 82 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 82 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 82 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 82 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 82 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 82 (term -> term MULDIVANDOP factor .)


state 153

    (86) factor -> LPAREN expression RPAREN .

    MULDIVANDOP     reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    EQU             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 86 (factor -> LPAREN expression RPAREN .)


state 154

    (87) factor -> ID LPAREN expression_list . RPAREN
    (75) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 178
    COMMA           shift and go to state 157


state 155

    (61) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 179


state 156

    (72) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 72 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 72 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 72 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 157

    (75) expression_list -> expression_list COMMA . expression
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 180
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 158

    (69) id_varpart -> LBRACK expression_list RBRACK .

    ASSIGN          reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    MULDIVANDOP     reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    RELOP           reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    EQU             reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    ADDOP           reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    THEN            reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    END             reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    SEMI            reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    ELSE            reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    RPAREN          reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    COMMA           reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    RBRACK          reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    TO              reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)
    DO              reduce using rule 69 (id_varpart -> LBRACK expression_list RBRACK .)


state 159

    (62) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 62 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 62 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 62 (statement -> READ LPAREN variable_list RPAREN .)


state 160

    (66) variable_list -> variable_list COMMA . variable
    (68) variable -> . ID id_varpart

    ID              shift and go to state 128

    variable                       shift and go to state 181

state 161

    (63) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 63 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 63 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 63 (statement -> WRITE LPAREN expression_list RPAREN .)


state 162

    (64) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 64 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 64 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 64 (statement -> READLN LPAREN variable_list RPAREN .)


state 163

    (65) statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 65 (statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 65 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 65 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 164

    (52) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 52 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 165

    (43) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 43 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 43 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 166

    (45) parameter_list -> parameter_list SEMI . parameter
    (47) parameter -> . var_parameter
    (48) parameter -> . value_parameter
    (49) var_parameter -> . VAR value_parameter
    (50) value_parameter -> . idlist COLON basic_type
    (51) value_parameter -> . idlist error basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID
    (6) idlist -> . idlist error ID
    (7) idlist -> . ID error

    VAR             shift and go to state 137
    ID              shift and go to state 17

    parameter                      shift and go to state 182
    var_parameter                  shift and go to state 135
    value_parameter                shift and go to state 136
    idlist                         shift and go to state 138

state 167

    (49) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 49 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 49 (var_parameter -> VAR value_parameter .)


state 168

    (50) value_parameter -> idlist COLON . basic_type
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 183

state 169

    (51) value_parameter -> idlist error . basic_type
    (6) idlist -> idlist error . ID
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    ID              shift and go to state 48
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 184

state 170

    (42) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 42 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 171

    (26) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 185


state 172

    (37) period -> period COMMA . my_period_part DOTDOT my_period_part
    (32) my_period_part -> . ADDOP ICONST
    (33) my_period_part -> . ICONST
    (34) my_period_part -> . CCONST
    (35) my_period_part -> . ID

    ADDOP           shift and go to state 143
    ICONST          shift and go to state 144
    CCONST          shift and go to state 145
    ID              shift and go to state 146

    my_period_part                 shift and go to state 186

state 173

    (36) period -> my_period_part DOTDOT . my_period_part
    (32) my_period_part -> . ADDOP ICONST
    (33) my_period_part -> . ICONST
    (34) my_period_part -> . CCONST
    (35) my_period_part -> . ID

    ADDOP           shift and go to state 143
    ICONST          shift and go to state 144
    CCONST          shift and go to state 145
    ID              shift and go to state 146

    my_period_part                 shift and go to state 187

state 174

    (32) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 32 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 32 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 32 (my_period_part -> ADDOP ICONST .)


state 175

    (60) statement -> IF expression THEN statement else_part .

    END             reduce using rule 60 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 60 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 60 (statement -> IF expression THEN statement else_part .)


state 176

    (73) else_part -> ELSE . statement
    (56) statement -> . empty
    (57) statement -> . variable ASSIGN expression
    (58) statement -> . procedure_call
    (59) statement -> . compound_statement
    (60) statement -> . IF expression THEN statement else_part
    (61) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (62) statement -> . READ LPAREN variable_list RPAREN
    (63) statement -> . WRITE LPAREN expression_list RPAREN
    (64) statement -> . READLN LPAREN variable_list RPAREN
    (65) statement -> . WRITELN LPAREN expression_list RPAREN
    (91) empty -> .
    (68) variable -> . ID id_varpart
    (71) procedure_call -> . ID
    (72) procedure_call -> . ID LPAREN expression_list RPAREN
    (53) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 91 (empty -> .)
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 188
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 177

    (74) else_part -> empty .

    ELSE            reduce using rule 74 (else_part -> empty .)
    END             reduce using rule 74 (else_part -> empty .)
    SEMI            reduce using rule 74 (else_part -> empty .)


state 178

    (87) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 87 (factor -> ID LPAREN expression_list RPAREN .)


state 179

    (61) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (77) expression -> . simple_expression RELOP simple_expression
    (78) expression -> . simple_expression EQU simple_expression
    (79) expression -> . simple_expression
    (80) simple_expression -> . simple_expression ADDOP term
    (81) simple_expression -> . term
    (82) term -> . term MULDIVANDOP factor
    (83) term -> . factor
    (84) factor -> . const_value
    (85) factor -> . variable
    (86) factor -> . LPAREN expression RPAREN
    (87) factor -> . ID LPAREN expression_list RPAREN
    (88) factor -> . NOTOP factor
    (89) factor -> . ADDOP factor
    (15) const_value -> . ADDOP ICONST
    (16) const_value -> . ICONST
    (17) const_value -> . RCONST
    (18) const_value -> . CCONST
    (19) const_value -> . BCONST
    (20) const_value -> . string
    (68) variable -> . ID id_varpart
    (90) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 189
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 180

    (75) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 75 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 75 (expression_list -> expression_list COMMA expression .)
    RBRACK          reduce using rule 75 (expression_list -> expression_list COMMA expression .)


state 181

    (66) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 66 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 66 (variable_list -> variable_list COMMA variable .)


state 182

    (45) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 45 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 45 (parameter_list -> parameter_list SEMI parameter .)


state 183

    (50) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 50 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 50 (value_parameter -> idlist COLON basic_type .)


state 184

    (51) value_parameter -> idlist error basic_type .

    RPAREN          reduce using rule 51 (value_parameter -> idlist error basic_type .)
    SEMI            reduce using rule 51 (value_parameter -> idlist error basic_type .)


state 185

    (26) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (27) basic_type -> . INTEGER
    (28) basic_type -> . REAL
    (29) basic_type -> . CHAR
    (30) basic_type -> . BOOLEAN
    (31) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 190

state 186

    (37) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 191


state 187

    (36) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 36 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 36 (period -> my_period_part DOTDOT my_period_part .)


state 188

    (73) else_part -> ELSE statement .

    ELSE            reduce using rule 73 (else_part -> ELSE statement .)
    END             reduce using rule 73 (else_part -> ELSE statement .)
    SEMI            reduce using rule 73 (else_part -> ELSE statement .)


state 189

    (61) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 192


state 190

    (26) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 26 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 191

    (37) period -> period COMMA my_period_part DOTDOT . my_period_part
    (32) my_period_part -> . ADDOP ICONST
    (33) my_period_part -> . ICONST
    (34) my_period_part -> . CCONST
    (35) my_period_part -> . ID

    ADDOP           shift and go to state 143
    ICONST          shift and go to state 144
    CCONST          shift and go to state 145
    ID              shift and go to state 146

    my_period_part                 shift and go to state 193

state 192

    (61) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (56) statement -> . empty
    (57) statement -> . variable ASSIGN expression
    (58) statement -> . procedure_call
    (59) statement -> . compound_statement
    (60) statement -> . IF expression THEN statement else_part
    (61) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (62) statement -> . READ LPAREN variable_list RPAREN
    (63) statement -> . WRITE LPAREN expression_list RPAREN
    (64) statement -> . READLN LPAREN variable_list RPAREN
    (65) statement -> . WRITELN LPAREN expression_list RPAREN
    (91) empty -> .
    (68) variable -> . ID id_varpart
    (71) procedure_call -> . ID
    (72) procedure_call -> . ID LPAREN expression_list RPAREN
    (53) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 91 (empty -> .)
    END             reduce using rule 91 (empty -> .)
    SEMI            reduce using rule 91 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 194
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 193

    (37) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 37 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 37 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 194

    (61) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 61 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 61 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 61 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 17 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 117 resolved using rule (const_value -> ADDOP ICONST)
WARNING: rejected rule (const_value -> ICONST) in state 117
