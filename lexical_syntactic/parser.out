Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BCONST
    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    OROP
    RCURL
    RECORD
    SET
    TYPE
    WHILE
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program_head -> PROGRAM ID
Rule 3     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 4     idlist -> idlist COMMA ID
Rule 5     idlist -> ID
Rule 6     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 7     const_declarations -> CONST const_declaration SEMI
Rule 8     const_declarations -> empty
Rule 9     const_declaration -> ID EQU const_value
Rule 10    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 11    const_value -> ADDOP ICONST
Rule 12    const_value -> ICONST
Rule 13    const_value -> CCONST
Rule 14    var_declarations -> VAR var_declaration SEMI
Rule 15    var_declarations -> empty
Rule 16    var_declaration -> idlist COLON type
Rule 17    var_declaration -> var_declaration SEMI idlist COLON type
Rule 18    type -> basic_type
Rule 19    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 20    basic_type -> INTEGER
Rule 21    basic_type -> REAL
Rule 22    basic_type -> CHAR
Rule 23    basic_type -> STRING
Rule 24    basic_type -> BOOLEAN
Rule 25    period -> ICONST DOTDOT ICONST
Rule 26    period -> period COMMA ICONST DOTDOT ICONST
Rule 27    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 28    subprogram_declarations -> empty
Rule 29    subprogram -> subprogram_head SEMI subprogram_body
Rule 30    subprogram_head -> PROCEDURE ID formal_parameter
Rule 31    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 32    formal_parameter -> LPAREN parameter_list RPAREN
Rule 33    formal_parameter -> empty
Rule 34    parameter_list -> parameter_list SEMI parameter
Rule 35    parameter_list -> parameter
Rule 36    parameter -> var_parameter
Rule 37    parameter -> value_parameter
Rule 38    var_parameter -> VAR value_parameter
Rule 39    value_parameter -> idlist COLON basic_type
Rule 40    subprogram_body -> const_declarations var_declarations compound_statement
Rule 41    compound_statement -> BEGIN statement_list END
Rule 42    statement_list -> statement_list SEMI statement
Rule 43    statement_list -> statement
Rule 44    statement -> empty
Rule 45    statement -> variable ASSIGN expression
Rule 46    statement -> ID ASSIGN expression
Rule 47    statement -> procedure_call
Rule 48    statement -> compound_statement
Rule 49    statement -> IF expression THEN statement else_part
Rule 50    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 51    statement -> READ LPAREN variable_list RPAREN
Rule 52    statement -> WRITE LPAREN expression_list RPAREN
Rule 53    variable_list -> variable_list COMMA variable
Rule 54    variable_list -> variable
Rule 55    variable -> ID id_varpart
Rule 56    id_varpart -> LBRACK expression RBRACK
Rule 57    id_varpart -> empty
Rule 58    procedure_call -> ID
Rule 59    procedure_call -> ID LPAREN expression_list RPAREN
Rule 60    else_part -> ELSE statement
Rule 61    else_part -> empty
Rule 62    expression_list -> expression_list COMMA expression
Rule 63    expression_list -> expression
Rule 64    expression -> simple_expression RELOP simple_expression
Rule 65    expression -> simple_expression EQU simple_expression
Rule 66    expression -> simple_expression
Rule 67    simple_expression -> simple_expression ADDOP term
Rule 68    simple_expression -> term
Rule 69    term -> term MULDIVANDOP factor
Rule 70    term -> factor
Rule 71    factor -> number
Rule 72    factor -> variable
Rule 73    factor -> ID LPAREN expression_list RPAREN
Rule 74    factor -> NOTOP factor
Rule 75    factor -> ADDOP factor
Rule 76    number -> ICONST
Rule 77    number -> RCONST
Rule 78    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 11 67 75
ARRAY                : 19
ASSIGN               : 45 46 50
BCONST               : 
BEGIN                : 41
BOOLEAN              : 24
CCONST               : 13
CHAR                 : 22
COLON                : 16 17 31 39
COMMA                : 4 26 53 62
CONST                : 7
DO                   : 50
DOT                  : 1
DOTDOT               : 25 26
DOWNTO               : 
ELSE                 : 60
END                  : 41
EOF                  : 
EQU                  : 9 10 65
FOR                  : 50
FORWARD              : 
FUNCTION             : 31
ICONST               : 11 12 25 25 26 26 76
ID                   : 2 3 4 5 9 10 30 31 46 50 55 58 59 73
IF                   : 49
INOP                 : 
INTEGER              : 20
LBRACK               : 19 56
LCURL                : 
LPAREN               : 3 32 51 52 59 73
MULDIVANDOP          : 69
NOTOP                : 74
OF                   : 19
OROP                 : 
PROCEDURE            : 30
PROGRAM              : 2 3
RBRACK               : 19 56
RCONST               : 77
RCURL                : 
READ                 : 51
REAL                 : 21
RECORD               : 
RELOP                : 64
RPAREN               : 3 32 51 52 59 73
SEMI                 : 1 7 10 14 17 27 29 34 42
SET                  : 
STRING               : 23
THEN                 : 49
TO                   : 50
TYPE                 : 
VAR                  : 14 38
WHILE                : 
WITH                 : 
WRITE                : 52
error                : 

Nonterminals, with rules where they appear

basic_type           : 18 19 31 39
compound_statement   : 6 40 48
const_declaration    : 7 10
const_declarations   : 6 40
const_value          : 9 10
else_part            : 49
empty                : 8 15 28 33 44 57 61
expression           : 45 46 49 50 50 56 62 63
expression_list      : 52 59 62 73
factor               : 69 70 74 75
formal_parameter     : 30 31
id_varpart           : 55
idlist               : 3 4 16 17 39
number               : 71
parameter            : 34 35
parameter_list       : 32 34
period               : 19 26
procedure_call       : 47
program              : 0
program_body         : 1
program_head         : 1
simple_expression    : 64 64 65 65 66 67
statement            : 42 43 49 50 60
statement_list       : 41 42
subprogram           : 27
subprogram_body      : 29
subprogram_declarations : 6 27
subprogram_head      : 29
term                 : 67 68 69
type                 : 16 17
value_parameter      : 37 38
var_declaration      : 14 17
var_declarations     : 6 40
var_parameter        : 36
variable             : 45 53 54 72
variable_list        : 51 53

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program_head -> . PROGRAM ID
    (3) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT

    SEMI            shift and go to state 4


state 3

    (2) program_head -> PROGRAM . ID
    (3) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (6) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (7) const_declarations -> . CONST const_declaration SEMI
    (8) const_declarations -> . empty
    (78) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 78 (empty -> .)
    BEGIN           reduce using rule 78 (empty -> .)
    PROCEDURE       reduce using rule 78 (empty -> .)
    FUNCTION        reduce using rule 78 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (2) program_head -> PROGRAM ID .
    (3) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 2 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT

    DOT             shift and go to state 11


state 7

    (6) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (14) var_declarations -> . VAR var_declaration SEMI
    (15) var_declarations -> . empty
    (78) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 78 (empty -> .)
    PROCEDURE       reduce using rule 78 (empty -> .)
    FUNCTION        reduce using rule 78 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (7) const_declarations -> CONST . const_declaration SEMI
    (9) const_declaration -> . ID EQU const_value
    (10) const_declaration -> . const_declaration SEMI ID EQU const_value

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (8) const_declarations -> empty .

    VAR             reduce using rule 8 (const_declarations -> empty .)
    BEGIN           reduce using rule 8 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 8 (const_declarations -> empty .)
    FUNCTION        reduce using rule 8 (const_declarations -> empty .)


state 10

    (3) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (6) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (27) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (28) subprogram_declarations -> . empty
    (78) empty -> .

    BEGIN           reduce using rule 78 (empty -> .)
    PROCEDURE       reduce using rule 78 (empty -> .)
    FUNCTION        reduce using rule 78 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (14) var_declarations -> VAR . var_declaration SEMI
    (16) var_declaration -> . idlist COLON type
    (17) var_declaration -> . var_declaration SEMI idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (15) var_declarations -> empty .

    BEGIN           reduce using rule 15 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 15 (var_declarations -> empty .)
    FUNCTION        reduce using rule 15 (var_declarations -> empty .)


state 15

    (7) const_declarations -> CONST const_declaration . SEMI
    (10) const_declaration -> const_declaration . SEMI ID EQU const_value

    SEMI            shift and go to state 23


state 16

    (9) const_declaration -> ID . EQU const_value

    EQU             shift and go to state 24


state 17

    (5) idlist -> ID .

    RPAREN          reduce using rule 5 (idlist -> ID .)
    COMMA           reduce using rule 5 (idlist -> ID .)
    COLON           reduce using rule 5 (idlist -> ID .)


state 18

    (3) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (4) idlist -> idlist . COMMA ID

    RPAREN          shift and go to state 25
    COMMA           shift and go to state 26


state 19

    (6) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (27) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (41) compound_statement -> . BEGIN statement_list END
    (29) subprogram -> . subprogram_head SEMI subprogram_body
    (30) subprogram_head -> . PROCEDURE ID formal_parameter
    (31) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 31
    FUNCTION        shift and go to state 32

    compound_statement             shift and go to state 27
    subprogram                     shift and go to state 28
    subprogram_head                shift and go to state 30

state 20

    (28) subprogram_declarations -> empty .

    BEGIN           reduce using rule 28 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 28 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 28 (subprogram_declarations -> empty .)


state 21

    (14) var_declarations -> VAR var_declaration . SEMI
    (17) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 33


state 22

    (16) var_declaration -> idlist . COLON type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 34
    COMMA           shift and go to state 26


state 23

    (7) const_declarations -> CONST const_declaration SEMI .
    (10) const_declaration -> const_declaration SEMI . ID EQU const_value

    VAR             reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 35


state 24

    (9) const_declaration -> ID EQU . const_value
    (11) const_value -> . ADDOP ICONST
    (12) const_value -> . ICONST
    (13) const_value -> . CCONST

    ADDOP           shift and go to state 37
    ICONST          shift and go to state 38
    CCONST          shift and go to state 39

    const_value                    shift and go to state 36

state 25

    (3) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 26

    (4) idlist -> idlist COMMA . ID

    ID              shift and go to state 40


state 27

    (6) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 6 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 28

    (27) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 41


state 29

    (41) compound_statement -> BEGIN . statement_list END
    (42) statement_list -> . statement_list SEMI statement
    (43) statement_list -> . statement
    (44) statement -> . empty
    (45) statement -> . variable ASSIGN expression
    (46) statement -> . ID ASSIGN expression
    (47) statement -> . procedure_call
    (48) statement -> . compound_statement
    (49) statement -> . IF expression THEN statement else_part
    (50) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) statement -> . READ LPAREN variable_list RPAREN
    (52) statement -> . WRITE LPAREN expression_list RPAREN
    (78) empty -> .
    (55) variable -> . ID id_varpart
    (58) procedure_call -> . ID
    (59) procedure_call -> . ID LPAREN expression_list RPAREN
    (41) compound_statement -> . BEGIN statement_list END

    ID              shift and go to state 46
    IF              shift and go to state 49
    FOR             shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    BEGIN           shift and go to state 29

    statement_list                 shift and go to state 42
    statement                      shift and go to state 43
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 47
    compound_statement             shift and go to state 48

state 30

    (29) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 53


state 31

    (30) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 54


state 32

    (31) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 55


state 33

    (14) var_declarations -> VAR var_declaration SEMI .
    (17) var_declaration -> var_declaration SEMI . idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    BEGIN           reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 56

state 34

    (16) var_declaration -> idlist COLON . type
    (18) type -> . basic_type
    (19) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    ARRAY           shift and go to state 59
    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    type                           shift and go to state 57
    basic_type                     shift and go to state 58

state 35

    (10) const_declaration -> const_declaration SEMI ID . EQU const_value

    EQU             shift and go to state 65


state 36

    (9) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 9 (const_declaration -> ID EQU const_value .)


state 37

    (11) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 66


state 38

    (12) const_value -> ICONST .

    SEMI            reduce using rule 12 (const_value -> ICONST .)


state 39

    (13) const_value -> CCONST .

    SEMI            reduce using rule 13 (const_value -> CCONST .)


state 40

    (4) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 4 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 4 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 4 (idlist -> idlist COMMA ID .)


state 41

    (27) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 27 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 27 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 27 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 42

    (41) compound_statement -> BEGIN statement_list . END
    (42) statement_list -> statement_list . SEMI statement

    END             shift and go to state 67
    SEMI            shift and go to state 68


state 43

    (43) statement_list -> statement .

    END             reduce using rule 43 (statement_list -> statement .)
    SEMI            reduce using rule 43 (statement_list -> statement .)


state 44

    (44) statement -> empty .

    END             reduce using rule 44 (statement -> empty .)
    SEMI            reduce using rule 44 (statement -> empty .)
    ELSE            reduce using rule 44 (statement -> empty .)


state 45

    (45) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 69


state 46

    (46) statement -> ID . ASSIGN expression
    (55) variable -> ID . id_varpart
    (58) procedure_call -> ID .
    (59) procedure_call -> ID . LPAREN expression_list RPAREN
    (56) id_varpart -> . LBRACK expression RBRACK
    (57) id_varpart -> . empty
    (78) empty -> .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 70
    END             reduce using rule 58 (procedure_call -> ID .)
    SEMI            reduce using rule 58 (procedure_call -> ID .)
    ELSE            reduce using rule 58 (procedure_call -> ID .)
    LPAREN          shift and go to state 72
    LBRACK          shift and go to state 73

  ! ASSIGN          [ reduce using rule 78 (empty -> .) ]

    id_varpart                     shift and go to state 71
    empty                          shift and go to state 74

state 47

    (47) statement -> procedure_call .

    END             reduce using rule 47 (statement -> procedure_call .)
    SEMI            reduce using rule 47 (statement -> procedure_call .)
    ELSE            reduce using rule 47 (statement -> procedure_call .)


state 48

    (48) statement -> compound_statement .

    END             reduce using rule 48 (statement -> compound_statement .)
    SEMI            reduce using rule 48 (statement -> compound_statement .)
    ELSE            reduce using rule 48 (statement -> compound_statement .)


state 49

    (49) statement -> IF . expression THEN statement else_part
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 75
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 50

    (50) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 86


state 51

    (51) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 87


state 52

    (52) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 88


state 53

    (29) subprogram -> subprogram_head SEMI . subprogram_body
    (40) subprogram_body -> . const_declarations var_declarations compound_statement
    (7) const_declarations -> . CONST const_declaration SEMI
    (8) const_declarations -> . empty
    (78) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 78 (empty -> .)
    BEGIN           reduce using rule 78 (empty -> .)

    subprogram_body                shift and go to state 89
    const_declarations             shift and go to state 90
    empty                          shift and go to state 9

state 54

    (30) subprogram_head -> PROCEDURE ID . formal_parameter
    (32) formal_parameter -> . LPAREN parameter_list RPAREN
    (33) formal_parameter -> . empty
    (78) empty -> .

    LPAREN          shift and go to state 92
    SEMI            reduce using rule 78 (empty -> .)

    formal_parameter               shift and go to state 91
    empty                          shift and go to state 93

state 55

    (31) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (32) formal_parameter -> . LPAREN parameter_list RPAREN
    (33) formal_parameter -> . empty
    (78) empty -> .

    LPAREN          shift and go to state 92
    COLON           reduce using rule 78 (empty -> .)

    formal_parameter               shift and go to state 94
    empty                          shift and go to state 93

state 56

    (17) var_declaration -> var_declaration SEMI idlist . COLON type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 95
    COMMA           shift and go to state 26


state 57

    (16) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 16 (var_declaration -> idlist COLON type .)


state 58

    (18) type -> basic_type .

    SEMI            reduce using rule 18 (type -> basic_type .)


state 59

    (19) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 96


state 60

    (20) basic_type -> INTEGER .

    SEMI            reduce using rule 20 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 20 (basic_type -> INTEGER .)


state 61

    (21) basic_type -> REAL .

    SEMI            reduce using rule 21 (basic_type -> REAL .)
    RPAREN          reduce using rule 21 (basic_type -> REAL .)


state 62

    (22) basic_type -> CHAR .

    SEMI            reduce using rule 22 (basic_type -> CHAR .)
    RPAREN          reduce using rule 22 (basic_type -> CHAR .)


state 63

    (23) basic_type -> STRING .

    SEMI            reduce using rule 23 (basic_type -> STRING .)
    RPAREN          reduce using rule 23 (basic_type -> STRING .)


state 64

    (24) basic_type -> BOOLEAN .

    SEMI            reduce using rule 24 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 24 (basic_type -> BOOLEAN .)


state 65

    (10) const_declaration -> const_declaration SEMI ID EQU . const_value
    (11) const_value -> . ADDOP ICONST
    (12) const_value -> . ICONST
    (13) const_value -> . CCONST

    ADDOP           shift and go to state 37
    ICONST          shift and go to state 38
    CCONST          shift and go to state 39

    const_value                    shift and go to state 97

state 66

    (11) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 11 (const_value -> ADDOP ICONST .)


state 67

    (41) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 41 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 41 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 41 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 41 (compound_statement -> BEGIN statement_list END .)


state 68

    (42) statement_list -> statement_list SEMI . statement
    (44) statement -> . empty
    (45) statement -> . variable ASSIGN expression
    (46) statement -> . ID ASSIGN expression
    (47) statement -> . procedure_call
    (48) statement -> . compound_statement
    (49) statement -> . IF expression THEN statement else_part
    (50) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) statement -> . READ LPAREN variable_list RPAREN
    (52) statement -> . WRITE LPAREN expression_list RPAREN
    (78) empty -> .
    (55) variable -> . ID id_varpart
    (58) procedure_call -> . ID
    (59) procedure_call -> . ID LPAREN expression_list RPAREN
    (41) compound_statement -> . BEGIN statement_list END

    ID              shift and go to state 46
    IF              shift and go to state 49
    FOR             shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    BEGIN           shift and go to state 29

    statement                      shift and go to state 98
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 47
    compound_statement             shift and go to state 48

state 69

    (45) statement -> variable ASSIGN . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    variable                       shift and go to state 81
    expression                     shift and go to state 99
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80

state 70

    (46) statement -> ID ASSIGN . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 100
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 71

    (55) variable -> ID id_varpart .

    ASSIGN          reduce using rule 55 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 55 (variable -> ID id_varpart .)
    RELOP           reduce using rule 55 (variable -> ID id_varpart .)
    EQU             reduce using rule 55 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 55 (variable -> ID id_varpart .)
    THEN            reduce using rule 55 (variable -> ID id_varpart .)
    END             reduce using rule 55 (variable -> ID id_varpart .)
    SEMI            reduce using rule 55 (variable -> ID id_varpart .)
    ELSE            reduce using rule 55 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 55 (variable -> ID id_varpart .)
    COMMA           reduce using rule 55 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 55 (variable -> ID id_varpart .)
    TO              reduce using rule 55 (variable -> ID id_varpart .)
    DO              reduce using rule 55 (variable -> ID id_varpart .)


state 72

    (59) procedure_call -> ID LPAREN . expression_list RPAREN
    (62) expression_list -> . expression_list COMMA expression
    (63) expression_list -> . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression_list                shift and go to state 101
    expression                     shift and go to state 102
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 73

    (56) id_varpart -> LBRACK . expression RBRACK
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 103
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 74

    (57) id_varpart -> empty .

    ASSIGN          reduce using rule 57 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 57 (id_varpart -> empty .)
    RELOP           reduce using rule 57 (id_varpart -> empty .)
    EQU             reduce using rule 57 (id_varpart -> empty .)
    ADDOP           reduce using rule 57 (id_varpart -> empty .)
    THEN            reduce using rule 57 (id_varpart -> empty .)
    END             reduce using rule 57 (id_varpart -> empty .)
    SEMI            reduce using rule 57 (id_varpart -> empty .)
    ELSE            reduce using rule 57 (id_varpart -> empty .)
    RPAREN          reduce using rule 57 (id_varpart -> empty .)
    COMMA           reduce using rule 57 (id_varpart -> empty .)
    RBRACK          reduce using rule 57 (id_varpart -> empty .)
    TO              reduce using rule 57 (id_varpart -> empty .)
    DO              reduce using rule 57 (id_varpart -> empty .)


state 75

    (49) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 104


state 76

    (64) expression -> simple_expression . RELOP simple_expression
    (65) expression -> simple_expression . EQU simple_expression
    (66) expression -> simple_expression .
    (67) simple_expression -> simple_expression . ADDOP term

    RELOP           shift and go to state 105
    EQU             shift and go to state 106
    THEN            reduce using rule 66 (expression -> simple_expression .)
    END             reduce using rule 66 (expression -> simple_expression .)
    SEMI            reduce using rule 66 (expression -> simple_expression .)
    ELSE            reduce using rule 66 (expression -> simple_expression .)
    RPAREN          reduce using rule 66 (expression -> simple_expression .)
    COMMA           reduce using rule 66 (expression -> simple_expression .)
    RBRACK          reduce using rule 66 (expression -> simple_expression .)
    TO              reduce using rule 66 (expression -> simple_expression .)
    DO              reduce using rule 66 (expression -> simple_expression .)
    ADDOP           shift and go to state 107


state 77

    (75) factor -> ADDOP . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    factor                         shift and go to state 108
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 78

    (68) simple_expression -> term .
    (69) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 68 (simple_expression -> term .)
    EQU             reduce using rule 68 (simple_expression -> term .)
    ADDOP           reduce using rule 68 (simple_expression -> term .)
    THEN            reduce using rule 68 (simple_expression -> term .)
    END             reduce using rule 68 (simple_expression -> term .)
    SEMI            reduce using rule 68 (simple_expression -> term .)
    ELSE            reduce using rule 68 (simple_expression -> term .)
    RPAREN          reduce using rule 68 (simple_expression -> term .)
    COMMA           reduce using rule 68 (simple_expression -> term .)
    RBRACK          reduce using rule 68 (simple_expression -> term .)
    TO              reduce using rule 68 (simple_expression -> term .)
    DO              reduce using rule 68 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 109


state 79

    (70) term -> factor .

    MULDIVANDOP     reduce using rule 70 (term -> factor .)
    RELOP           reduce using rule 70 (term -> factor .)
    EQU             reduce using rule 70 (term -> factor .)
    ADDOP           reduce using rule 70 (term -> factor .)
    THEN            reduce using rule 70 (term -> factor .)
    END             reduce using rule 70 (term -> factor .)
    SEMI            reduce using rule 70 (term -> factor .)
    ELSE            reduce using rule 70 (term -> factor .)
    RPAREN          reduce using rule 70 (term -> factor .)
    COMMA           reduce using rule 70 (term -> factor .)
    RBRACK          reduce using rule 70 (term -> factor .)
    TO              reduce using rule 70 (term -> factor .)
    DO              reduce using rule 70 (term -> factor .)


state 80

    (71) factor -> number .

    MULDIVANDOP     reduce using rule 71 (factor -> number .)
    RELOP           reduce using rule 71 (factor -> number .)
    EQU             reduce using rule 71 (factor -> number .)
    ADDOP           reduce using rule 71 (factor -> number .)
    THEN            reduce using rule 71 (factor -> number .)
    END             reduce using rule 71 (factor -> number .)
    SEMI            reduce using rule 71 (factor -> number .)
    ELSE            reduce using rule 71 (factor -> number .)
    RPAREN          reduce using rule 71 (factor -> number .)
    COMMA           reduce using rule 71 (factor -> number .)
    RBRACK          reduce using rule 71 (factor -> number .)
    TO              reduce using rule 71 (factor -> number .)
    DO              reduce using rule 71 (factor -> number .)


state 81

    (72) factor -> variable .

    MULDIVANDOP     reduce using rule 72 (factor -> variable .)
    RELOP           reduce using rule 72 (factor -> variable .)
    EQU             reduce using rule 72 (factor -> variable .)
    ADDOP           reduce using rule 72 (factor -> variable .)
    THEN            reduce using rule 72 (factor -> variable .)
    END             reduce using rule 72 (factor -> variable .)
    SEMI            reduce using rule 72 (factor -> variable .)
    ELSE            reduce using rule 72 (factor -> variable .)
    RPAREN          reduce using rule 72 (factor -> variable .)
    COMMA           reduce using rule 72 (factor -> variable .)
    RBRACK          reduce using rule 72 (factor -> variable .)
    TO              reduce using rule 72 (factor -> variable .)
    DO              reduce using rule 72 (factor -> variable .)


state 82

    (73) factor -> ID . LPAREN expression_list RPAREN
    (55) variable -> ID . id_varpart
    (56) id_varpart -> . LBRACK expression RBRACK
    (57) id_varpart -> . empty
    (78) empty -> .

    LPAREN          shift and go to state 110
    LBRACK          shift and go to state 73
    MULDIVANDOP     reduce using rule 78 (empty -> .)
    RELOP           reduce using rule 78 (empty -> .)
    EQU             reduce using rule 78 (empty -> .)
    ADDOP           reduce using rule 78 (empty -> .)
    THEN            reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    ELSE            reduce using rule 78 (empty -> .)
    RPAREN          reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)
    RBRACK          reduce using rule 78 (empty -> .)
    TO              reduce using rule 78 (empty -> .)
    DO              reduce using rule 78 (empty -> .)

    id_varpart                     shift and go to state 71
    empty                          shift and go to state 74

state 83

    (74) factor -> NOTOP . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    factor                         shift and go to state 111
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 84

    (76) number -> ICONST .

    MULDIVANDOP     reduce using rule 76 (number -> ICONST .)
    RELOP           reduce using rule 76 (number -> ICONST .)
    EQU             reduce using rule 76 (number -> ICONST .)
    ADDOP           reduce using rule 76 (number -> ICONST .)
    THEN            reduce using rule 76 (number -> ICONST .)
    END             reduce using rule 76 (number -> ICONST .)
    SEMI            reduce using rule 76 (number -> ICONST .)
    ELSE            reduce using rule 76 (number -> ICONST .)
    RPAREN          reduce using rule 76 (number -> ICONST .)
    COMMA           reduce using rule 76 (number -> ICONST .)
    RBRACK          reduce using rule 76 (number -> ICONST .)
    TO              reduce using rule 76 (number -> ICONST .)
    DO              reduce using rule 76 (number -> ICONST .)


state 85

    (77) number -> RCONST .

    MULDIVANDOP     reduce using rule 77 (number -> RCONST .)
    RELOP           reduce using rule 77 (number -> RCONST .)
    EQU             reduce using rule 77 (number -> RCONST .)
    ADDOP           reduce using rule 77 (number -> RCONST .)
    THEN            reduce using rule 77 (number -> RCONST .)
    END             reduce using rule 77 (number -> RCONST .)
    SEMI            reduce using rule 77 (number -> RCONST .)
    ELSE            reduce using rule 77 (number -> RCONST .)
    RPAREN          reduce using rule 77 (number -> RCONST .)
    COMMA           reduce using rule 77 (number -> RCONST .)
    RBRACK          reduce using rule 77 (number -> RCONST .)
    TO              reduce using rule 77 (number -> RCONST .)
    DO              reduce using rule 77 (number -> RCONST .)


state 86

    (50) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 112


state 87

    (51) statement -> READ LPAREN . variable_list RPAREN
    (53) variable_list -> . variable_list COMMA variable
    (54) variable_list -> . variable
    (55) variable -> . ID id_varpart

    ID              shift and go to state 115

    variable_list                  shift and go to state 113
    variable                       shift and go to state 114

state 88

    (52) statement -> WRITE LPAREN . expression_list RPAREN
    (62) expression_list -> . expression_list COMMA expression
    (63) expression_list -> . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression_list                shift and go to state 116
    expression                     shift and go to state 102
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 89

    (29) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 29 (subprogram -> subprogram_head SEMI subprogram_body .)


state 90

    (40) subprogram_body -> const_declarations . var_declarations compound_statement
    (14) var_declarations -> . VAR var_declaration SEMI
    (15) var_declarations -> . empty
    (78) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 78 (empty -> .)

    var_declarations               shift and go to state 117
    empty                          shift and go to state 14

state 91

    (30) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 30 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 92

    (32) formal_parameter -> LPAREN . parameter_list RPAREN
    (34) parameter_list -> . parameter_list SEMI parameter
    (35) parameter_list -> . parameter
    (36) parameter -> . var_parameter
    (37) parameter -> . value_parameter
    (38) var_parameter -> . VAR value_parameter
    (39) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    VAR             shift and go to state 122
    ID              shift and go to state 17

    parameter_list                 shift and go to state 118
    parameter                      shift and go to state 119
    var_parameter                  shift and go to state 120
    value_parameter                shift and go to state 121
    idlist                         shift and go to state 123

state 93

    (33) formal_parameter -> empty .

    SEMI            reduce using rule 33 (formal_parameter -> empty .)
    COLON           reduce using rule 33 (formal_parameter -> empty .)


state 94

    (31) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 124


state 95

    (17) var_declaration -> var_declaration SEMI idlist COLON . type
    (18) type -> . basic_type
    (19) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    ARRAY           shift and go to state 59
    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    type                           shift and go to state 125
    basic_type                     shift and go to state 58

state 96

    (19) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (25) period -> . ICONST DOTDOT ICONST
    (26) period -> . period COMMA ICONST DOTDOT ICONST

    ICONST          shift and go to state 127

    period                         shift and go to state 126

state 97

    (10) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 10 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 98

    (42) statement_list -> statement_list SEMI statement .

    END             reduce using rule 42 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 42 (statement_list -> statement_list SEMI statement .)


state 99

    (45) statement -> variable ASSIGN expression .

    END             reduce using rule 45 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 45 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 45 (statement -> variable ASSIGN expression .)


state 100

    (46) statement -> ID ASSIGN expression .

    END             reduce using rule 46 (statement -> ID ASSIGN expression .)
    SEMI            reduce using rule 46 (statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 46 (statement -> ID ASSIGN expression .)


state 101

    (59) procedure_call -> ID LPAREN expression_list . RPAREN
    (62) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 129


state 102

    (63) expression_list -> expression .

    RPAREN          reduce using rule 63 (expression_list -> expression .)
    COMMA           reduce using rule 63 (expression_list -> expression .)


state 103

    (56) id_varpart -> LBRACK expression . RBRACK

    RBRACK          shift and go to state 130


state 104

    (49) statement -> IF expression THEN . statement else_part
    (44) statement -> . empty
    (45) statement -> . variable ASSIGN expression
    (46) statement -> . ID ASSIGN expression
    (47) statement -> . procedure_call
    (48) statement -> . compound_statement
    (49) statement -> . IF expression THEN statement else_part
    (50) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) statement -> . READ LPAREN variable_list RPAREN
    (52) statement -> . WRITE LPAREN expression_list RPAREN
    (78) empty -> .
    (55) variable -> . ID id_varpart
    (58) procedure_call -> . ID
    (59) procedure_call -> . ID LPAREN expression_list RPAREN
    (41) compound_statement -> . BEGIN statement_list END

    ID              shift and go to state 46
    IF              shift and go to state 49
    FOR             shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    BEGIN           shift and go to state 29

    statement                      shift and go to state 131
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 47
    compound_statement             shift and go to state 48

state 105

    (64) expression -> simple_expression RELOP . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    simple_expression              shift and go to state 132
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 106

    (65) expression -> simple_expression EQU . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    simple_expression              shift and go to state 133
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 107

    (67) simple_expression -> simple_expression ADDOP . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    term                           shift and go to state 134
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 108

    (75) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 75 (factor -> ADDOP factor .)
    RELOP           reduce using rule 75 (factor -> ADDOP factor .)
    EQU             reduce using rule 75 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 75 (factor -> ADDOP factor .)
    THEN            reduce using rule 75 (factor -> ADDOP factor .)
    END             reduce using rule 75 (factor -> ADDOP factor .)
    SEMI            reduce using rule 75 (factor -> ADDOP factor .)
    ELSE            reduce using rule 75 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 75 (factor -> ADDOP factor .)
    COMMA           reduce using rule 75 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 75 (factor -> ADDOP factor .)
    TO              reduce using rule 75 (factor -> ADDOP factor .)
    DO              reduce using rule 75 (factor -> ADDOP factor .)


state 109

    (69) term -> term MULDIVANDOP . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    factor                         shift and go to state 135
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 110

    (73) factor -> ID LPAREN . expression_list RPAREN
    (62) expression_list -> . expression_list COMMA expression
    (63) expression_list -> . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression_list                shift and go to state 136
    expression                     shift and go to state 102
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 111

    (74) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 74 (factor -> NOTOP factor .)
    RELOP           reduce using rule 74 (factor -> NOTOP factor .)
    EQU             reduce using rule 74 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 74 (factor -> NOTOP factor .)
    THEN            reduce using rule 74 (factor -> NOTOP factor .)
    END             reduce using rule 74 (factor -> NOTOP factor .)
    SEMI            reduce using rule 74 (factor -> NOTOP factor .)
    ELSE            reduce using rule 74 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 74 (factor -> NOTOP factor .)
    COMMA           reduce using rule 74 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 74 (factor -> NOTOP factor .)
    TO              reduce using rule 74 (factor -> NOTOP factor .)
    DO              reduce using rule 74 (factor -> NOTOP factor .)


state 112

    (50) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 137
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 113

    (51) statement -> READ LPAREN variable_list . RPAREN
    (53) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 114

    (54) variable_list -> variable .

    RPAREN          reduce using rule 54 (variable_list -> variable .)
    COMMA           reduce using rule 54 (variable_list -> variable .)


state 115

    (55) variable -> ID . id_varpart
    (56) id_varpart -> . LBRACK expression RBRACK
    (57) id_varpart -> . empty
    (78) empty -> .

    LBRACK          shift and go to state 73
    RPAREN          reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)

    id_varpart                     shift and go to state 71
    empty                          shift and go to state 74

state 116

    (52) statement -> WRITE LPAREN expression_list . RPAREN
    (62) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 140
    COMMA           shift and go to state 129


state 117

    (40) subprogram_body -> const_declarations var_declarations . compound_statement
    (41) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 29

    compound_statement             shift and go to state 141

state 118

    (32) formal_parameter -> LPAREN parameter_list . RPAREN
    (34) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 142
    SEMI            shift and go to state 143


state 119

    (35) parameter_list -> parameter .

    RPAREN          reduce using rule 35 (parameter_list -> parameter .)
    SEMI            reduce using rule 35 (parameter_list -> parameter .)


state 120

    (36) parameter -> var_parameter .

    RPAREN          reduce using rule 36 (parameter -> var_parameter .)
    SEMI            reduce using rule 36 (parameter -> var_parameter .)


state 121

    (37) parameter -> value_parameter .

    RPAREN          reduce using rule 37 (parameter -> value_parameter .)
    SEMI            reduce using rule 37 (parameter -> value_parameter .)


state 122

    (38) var_parameter -> VAR . value_parameter
    (39) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    value_parameter                shift and go to state 144
    idlist                         shift and go to state 123

state 123

    (39) value_parameter -> idlist . COLON basic_type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 145
    COMMA           shift and go to state 26


state 124

    (31) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 146

state 125

    (17) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 17 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 126

    (19) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (26) period -> period . COMMA ICONST DOTDOT ICONST

    RBRACK          shift and go to state 147
    COMMA           shift and go to state 148


state 127

    (25) period -> ICONST . DOTDOT ICONST

    DOTDOT          shift and go to state 149


state 128

    (59) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 59 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 59 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 59 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 129

    (62) expression_list -> expression_list COMMA . expression
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 150
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 130

    (56) id_varpart -> LBRACK expression RBRACK .

    ASSIGN          reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    MULDIVANDOP     reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    RELOP           reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    EQU             reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    ADDOP           reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    THEN            reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    END             reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    SEMI            reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    ELSE            reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    RPAREN          reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    COMMA           reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    RBRACK          reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    TO              reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)
    DO              reduce using rule 56 (id_varpart -> LBRACK expression RBRACK .)


state 131

    (49) statement -> IF expression THEN statement . else_part
    (60) else_part -> . ELSE statement
    (61) else_part -> . empty
    (78) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 152
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)

  ! ELSE            [ reduce using rule 78 (empty -> .) ]

    else_part                      shift and go to state 151
    empty                          shift and go to state 153

state 132

    (64) expression -> simple_expression RELOP simple_expression .
    (67) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 64 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 107


state 133

    (65) expression -> simple_expression EQU simple_expression .
    (67) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 65 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 107


state 134

    (67) simple_expression -> simple_expression ADDOP term .
    (69) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 67 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 109


state 135

    (69) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 69 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 69 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 69 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 69 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 69 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 69 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 69 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 69 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 69 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 69 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 69 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 69 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 69 (term -> term MULDIVANDOP factor .)


state 136

    (73) factor -> ID LPAREN expression_list . RPAREN
    (62) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 154
    COMMA           shift and go to state 129


state 137

    (50) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 155


state 138

    (51) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 51 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 51 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 51 (statement -> READ LPAREN variable_list RPAREN .)


state 139

    (53) variable_list -> variable_list COMMA . variable
    (55) variable -> . ID id_varpart

    ID              shift and go to state 115

    variable                       shift and go to state 156

state 140

    (52) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 52 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 52 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 52 (statement -> WRITE LPAREN expression_list RPAREN .)


state 141

    (40) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 40 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 142

    (32) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 32 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 32 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 143

    (34) parameter_list -> parameter_list SEMI . parameter
    (36) parameter -> . var_parameter
    (37) parameter -> . value_parameter
    (38) var_parameter -> . VAR value_parameter
    (39) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    VAR             shift and go to state 122
    ID              shift and go to state 17

    parameter                      shift and go to state 157
    var_parameter                  shift and go to state 120
    value_parameter                shift and go to state 121
    idlist                         shift and go to state 123

state 144

    (38) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 38 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 38 (var_parameter -> VAR value_parameter .)


state 145

    (39) value_parameter -> idlist COLON . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 158

state 146

    (31) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 31 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 147

    (19) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 159


state 148

    (26) period -> period COMMA . ICONST DOTDOT ICONST

    ICONST          shift and go to state 160


state 149

    (25) period -> ICONST DOTDOT . ICONST

    ICONST          shift and go to state 161


state 150

    (62) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 62 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 62 (expression_list -> expression_list COMMA expression .)


state 151

    (49) statement -> IF expression THEN statement else_part .

    END             reduce using rule 49 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 49 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 49 (statement -> IF expression THEN statement else_part .)


state 152

    (60) else_part -> ELSE . statement
    (44) statement -> . empty
    (45) statement -> . variable ASSIGN expression
    (46) statement -> . ID ASSIGN expression
    (47) statement -> . procedure_call
    (48) statement -> . compound_statement
    (49) statement -> . IF expression THEN statement else_part
    (50) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) statement -> . READ LPAREN variable_list RPAREN
    (52) statement -> . WRITE LPAREN expression_list RPAREN
    (78) empty -> .
    (55) variable -> . ID id_varpart
    (58) procedure_call -> . ID
    (59) procedure_call -> . ID LPAREN expression_list RPAREN
    (41) compound_statement -> . BEGIN statement_list END

    ID              shift and go to state 46
    IF              shift and go to state 49
    FOR             shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    BEGIN           shift and go to state 29

    statement                      shift and go to state 162
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 47
    compound_statement             shift and go to state 48

state 153

    (61) else_part -> empty .

    ELSE            reduce using rule 61 (else_part -> empty .)
    END             reduce using rule 61 (else_part -> empty .)
    SEMI            reduce using rule 61 (else_part -> empty .)


state 154

    (73) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 73 (factor -> ID LPAREN expression_list RPAREN .)


state 155

    (50) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (64) expression -> . simple_expression RELOP simple_expression
    (65) expression -> . simple_expression EQU simple_expression
    (66) expression -> . simple_expression
    (67) simple_expression -> . simple_expression ADDOP term
    (68) simple_expression -> . term
    (69) term -> . term MULDIVANDOP factor
    (70) term -> . factor
    (71) factor -> . number
    (72) factor -> . variable
    (73) factor -> . ID LPAREN expression_list RPAREN
    (74) factor -> . NOTOP factor
    (75) factor -> . ADDOP factor
    (76) number -> . ICONST
    (77) number -> . RCONST
    (55) variable -> . ID id_varpart

    ID              shift and go to state 82
    NOTOP           shift and go to state 83
    ADDOP           shift and go to state 77
    ICONST          shift and go to state 84
    RCONST          shift and go to state 85

    expression                     shift and go to state 163
    simple_expression              shift and go to state 76
    term                           shift and go to state 78
    factor                         shift and go to state 79
    number                         shift and go to state 80
    variable                       shift and go to state 81

state 156

    (53) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 53 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 53 (variable_list -> variable_list COMMA variable .)


state 157

    (34) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 34 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 34 (parameter_list -> parameter_list SEMI parameter .)


state 158

    (39) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 39 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 39 (value_parameter -> idlist COLON basic_type .)


state 159

    (19) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 164

state 160

    (26) period -> period COMMA ICONST . DOTDOT ICONST

    DOTDOT          shift and go to state 165


state 161

    (25) period -> ICONST DOTDOT ICONST .

    RBRACK          reduce using rule 25 (period -> ICONST DOTDOT ICONST .)
    COMMA           reduce using rule 25 (period -> ICONST DOTDOT ICONST .)


state 162

    (60) else_part -> ELSE statement .

    ELSE            reduce using rule 60 (else_part -> ELSE statement .)
    END             reduce using rule 60 (else_part -> ELSE statement .)
    SEMI            reduce using rule 60 (else_part -> ELSE statement .)


state 163

    (50) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 166


state 164

    (19) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 19 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 165

    (26) period -> period COMMA ICONST DOTDOT . ICONST

    ICONST          shift and go to state 167


state 166

    (50) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (44) statement -> . empty
    (45) statement -> . variable ASSIGN expression
    (46) statement -> . ID ASSIGN expression
    (47) statement -> . procedure_call
    (48) statement -> . compound_statement
    (49) statement -> . IF expression THEN statement else_part
    (50) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (51) statement -> . READ LPAREN variable_list RPAREN
    (52) statement -> . WRITE LPAREN expression_list RPAREN
    (78) empty -> .
    (55) variable -> . ID id_varpart
    (58) procedure_call -> . ID
    (59) procedure_call -> . ID LPAREN expression_list RPAREN
    (41) compound_statement -> . BEGIN statement_list END

    ID              shift and go to state 46
    IF              shift and go to state 49
    FOR             shift and go to state 50
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 78 (empty -> .)
    END             reduce using rule 78 (empty -> .)
    SEMI            reduce using rule 78 (empty -> .)
    BEGIN           shift and go to state 29

    statement                      shift and go to state 168
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 47
    compound_statement             shift and go to state 48

state 167

    (26) period -> period COMMA ICONST DOTDOT ICONST .

    RBRACK          reduce using rule 26 (period -> period COMMA ICONST DOTDOT ICONST .)
    COMMA           reduce using rule 26 (period -> period COMMA ICONST DOTDOT ICONST .)


state 168

    (50) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 50 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 50 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 50 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 46 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 131 resolved as shift
