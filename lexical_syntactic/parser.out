Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    RCURL
    RECORD
    SET
    TYPE
    WHILE
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program -> program_head SEMI program_body
Rule 3     program_head -> PROGRAM ID
Rule 4     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 5     idlist -> idlist COMMA ID
Rule 6     idlist -> ID
Rule 7     idlist -> idlist error ID
Rule 8     idlist -> ID error
Rule 9     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 10    const_declarations -> CONST const_declaration SEMI
Rule 11    const_declarations -> empty
Rule 12    const_declaration -> ID EQU const_value
Rule 13    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 14    const_declaration -> ID EQU error ID
Rule 15    const_declaration -> const_declaration SEMI ID EQU error ID
Rule 16    const_value -> ADDOP ICONST
Rule 17    const_value -> ICONST
Rule 18    const_value -> RCONST
Rule 19    const_value -> CCONST
Rule 20    const_value -> BCONST
Rule 21    const_value -> string
Rule 22    var_declarations -> VAR var_declaration SEMI
Rule 23    var_declarations -> empty
Rule 24    var_declaration -> idlist COLON type
Rule 25    var_declaration -> var_declaration SEMI idlist COLON type
Rule 26    type -> basic_type
Rule 27    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 28    basic_type -> INTEGER
Rule 29    basic_type -> REAL
Rule 30    basic_type -> CHAR
Rule 31    basic_type -> BOOLEAN
Rule 32    basic_type -> TYPE_STRING
Rule 33    my_period_part -> ADDOP ICONST
Rule 34    my_period_part -> ICONST
Rule 35    my_period_part -> CCONST
Rule 36    my_period_part -> ID
Rule 37    period -> my_period_part DOTDOT my_period_part
Rule 38    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 39    period -> RCONST
Rule 40    period -> period COMMA RCONST
Rule 41    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 42    subprogram_declarations -> empty
Rule 43    subprogram -> subprogram_head SEMI subprogram_body
Rule 44    subprogram_head -> PROCEDURE ID formal_parameter
Rule 45    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 46    formal_parameter -> LPAREN parameter_list RPAREN
Rule 47    formal_parameter -> empty
Rule 48    parameter_list -> parameter_list SEMI parameter
Rule 49    parameter_list -> parameter
Rule 50    parameter -> var_parameter
Rule 51    parameter -> value_parameter
Rule 52    var_parameter -> VAR value_parameter
Rule 53    value_parameter -> idlist COLON basic_type
Rule 54    value_parameter -> idlist error basic_type
Rule 55    subprogram_body -> const_declarations var_declarations compound_statement
Rule 56    compound_statement -> BEGIN statement_list END
Rule 57    statement_list -> statement_list SEMI statement
Rule 58    statement_list -> statement
Rule 59    statement -> empty
Rule 60    statement -> variable ASSIGN expression
Rule 61    statement -> procedure_call
Rule 62    statement -> compound_statement
Rule 63    statement -> IF expression THEN statement else_part
Rule 64    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 65    statement -> READ LPAREN variable_list RPAREN
Rule 66    statement -> WRITE LPAREN expression_list RPAREN
Rule 67    statement -> READLN LPAREN variable_list RPAREN
Rule 68    statement -> WRITELN LPAREN expression_list RPAREN
Rule 69    variable_list -> variable_list COMMA variable
Rule 70    variable_list -> variable
Rule 71    variable -> ID id_varpart
Rule 72    id_varpart -> LBRACK expression_list RBRACK
Rule 73    id_varpart -> empty
Rule 74    procedure_call -> ID
Rule 75    procedure_call -> ID LPAREN expression_list RPAREN
Rule 76    else_part -> ELSE statement
Rule 77    else_part -> empty
Rule 78    expression_list -> expression_list COMMA expression
Rule 79    expression_list -> expression
Rule 80    expression -> simple_expression RELOP simple_expression
Rule 81    expression -> simple_expression EQU simple_expression
Rule 82    expression -> simple_expression
Rule 83    simple_expression -> simple_expression ADDOP term
Rule 84    simple_expression -> simple_expression OROP term
Rule 85    simple_expression -> term
Rule 86    term -> term MULDIVANDOP factor
Rule 87    term -> factor
Rule 88    factor -> const_value
Rule 89    factor -> variable
Rule 90    factor -> LPAREN expression RPAREN
Rule 91    factor -> ID LPAREN expression_list RPAREN
Rule 92    factor -> NOTOP factor
Rule 93    factor -> ADDOP factor
Rule 94    string -> STRING
Rule 95    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 16 33 83 93
ARRAY                : 27
ASSIGN               : 60 64
BCONST               : 20
BEGIN                : 56
BOOLEAN              : 31
CCONST               : 19 35
CHAR                 : 30
COLON                : 24 25 45 53
COMMA                : 5 38 40 69 78
CONST                : 10
DO                   : 64
DOT                  : 1
DOTDOT               : 37 38
DOWNTO               : 
ELSE                 : 76
END                  : 56
EOF                  : 
EQU                  : 12 13 14 15 81
FOR                  : 64
FORWARD              : 
FUNCTION             : 45
ICONST               : 16 17 33 34
ID                   : 3 4 5 6 7 8 12 13 14 14 15 15 36 44 45 64 71 74 75 91
IF                   : 63
INOP                 : 
INTEGER              : 28
LBRACK               : 27 72
LCURL                : 
LPAREN               : 4 46 65 66 67 68 75 90 91
MULDIVANDOP          : 86
NOTOP                : 92
OF                   : 27
OROP                 : 84
PROCEDURE            : 44
PROGRAM              : 3 4
RBRACK               : 27 72
RCONST               : 18 39 40
RCURL                : 
READ                 : 65
READLN               : 67
REAL                 : 29
RECORD               : 
RELOP                : 80
RPAREN               : 4 46 65 66 67 68 75 90 91
SEMI                 : 1 2 10 13 15 22 25 41 43 48 57
SET                  : 
STRING               : 94
THEN                 : 63
TO                   : 64
TYPE                 : 
TYPE_STRING          : 32
VAR                  : 22 52
WHILE                : 
WITH                 : 
WRITE                : 66
WRITELN              : 68
error                : 7 8 14 15 54

Nonterminals, with rules where they appear

basic_type           : 26 27 45 53 54
compound_statement   : 9 55 62
const_declaration    : 10 13 15
const_declarations   : 9 55
const_value          : 12 13 88
else_part            : 63
empty                : 11 23 42 47 59 73 77
expression           : 60 63 64 64 78 79 90
expression_list      : 66 68 72 75 78 91
factor               : 86 87 92 93
formal_parameter     : 44 45
id_varpart           : 71
idlist               : 4 5 7 24 25 53 54
my_period_part       : 37 37 38 38
parameter            : 48 49
parameter_list       : 46 48
period               : 27 38 40
procedure_call       : 61
program              : 0
program_body         : 1 2
program_head         : 1 2
simple_expression    : 80 80 81 81 82 83 84
statement            : 57 58 63 64 76
statement_list       : 56 57
string               : 21
subprogram           : 41
subprogram_body      : 43
subprogram_declarations : 9 41
subprogram_head      : 43
term                 : 83 84 85 86
type                 : 24 25
value_parameter      : 51 52
var_declaration      : 22 25
var_declarations     : 9 55
var_parameter        : 50
variable             : 60 69 70 89
variable_list        : 65 67 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program -> . program_head SEMI program_body
    (3) program_head -> . PROGRAM ID
    (4) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT
    (2) program -> program_head . SEMI program_body

    SEMI            shift and go to state 4


state 3

    (3) program_head -> PROGRAM . ID
    (4) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (2) program -> program_head SEMI . program_body
    (9) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (10) const_declarations -> . CONST const_declaration SEMI
    (11) const_declarations -> . empty
    (95) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 95 (empty -> .)
    BEGIN           reduce using rule 95 (empty -> .)
    PROCEDURE       reduce using rule 95 (empty -> .)
    FUNCTION        reduce using rule 95 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (3) program_head -> PROGRAM ID .
    (4) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT
    (2) program -> program_head SEMI program_body .

    DOT             shift and go to state 11
    $end            reduce using rule 2 (program -> program_head SEMI program_body .)


state 7

    (9) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (22) var_declarations -> . VAR var_declaration SEMI
    (23) var_declarations -> . empty
    (95) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 95 (empty -> .)
    PROCEDURE       reduce using rule 95 (empty -> .)
    FUNCTION        reduce using rule 95 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (10) const_declarations -> CONST . const_declaration SEMI
    (12) const_declaration -> . ID EQU const_value
    (13) const_declaration -> . const_declaration SEMI ID EQU const_value
    (14) const_declaration -> . ID EQU error ID
    (15) const_declaration -> . const_declaration SEMI ID EQU error ID

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (11) const_declarations -> empty .

    VAR             reduce using rule 11 (const_declarations -> empty .)
    BEGIN           reduce using rule 11 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 11 (const_declarations -> empty .)
    FUNCTION        reduce using rule 11 (const_declarations -> empty .)


state 10

    (4) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (9) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (41) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (42) subprogram_declarations -> . empty
    (95) empty -> .

    BEGIN           reduce using rule 95 (empty -> .)
    PROCEDURE       reduce using rule 95 (empty -> .)
    FUNCTION        reduce using rule 95 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (22) var_declarations -> VAR . var_declaration SEMI
    (24) var_declaration -> . idlist COLON type
    (25) var_declaration -> . var_declaration SEMI idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (23) var_declarations -> empty .

    BEGIN           reduce using rule 23 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 23 (var_declarations -> empty .)
    FUNCTION        reduce using rule 23 (var_declarations -> empty .)


state 15

    (10) const_declarations -> CONST const_declaration . SEMI
    (13) const_declaration -> const_declaration . SEMI ID EQU const_value
    (15) const_declaration -> const_declaration . SEMI ID EQU error ID

    SEMI            shift and go to state 23


state 16

    (12) const_declaration -> ID . EQU const_value
    (14) const_declaration -> ID . EQU error ID

    EQU             shift and go to state 24


state 17

    (6) idlist -> ID .
    (8) idlist -> ID . error

  ! shift/reduce conflict for error resolved as shift
    RPAREN          reduce using rule 6 (idlist -> ID .)
    COMMA           reduce using rule 6 (idlist -> ID .)
    COLON           reduce using rule 6 (idlist -> ID .)
    error           shift and go to state 25

  ! error           [ reduce using rule 6 (idlist -> ID .) ]


state 18

    (4) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    RPAREN          shift and go to state 26
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 19

    (9) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (41) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (56) compound_statement -> . BEGIN statement_list END
    (43) subprogram -> . subprogram_head SEMI subprogram_body
    (44) subprogram_head -> . PROCEDURE ID formal_parameter
    (45) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 31
    PROCEDURE       shift and go to state 33
    FUNCTION        shift and go to state 34

    compound_statement             shift and go to state 29
    subprogram                     shift and go to state 30
    subprogram_head                shift and go to state 32

state 20

    (42) subprogram_declarations -> empty .

    BEGIN           reduce using rule 42 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 42 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 42 (subprogram_declarations -> empty .)


state 21

    (22) var_declarations -> VAR var_declaration . SEMI
    (25) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 35


state 22

    (24) var_declaration -> idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 36
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 23

    (10) const_declarations -> CONST const_declaration SEMI .
    (13) const_declaration -> const_declaration SEMI . ID EQU const_value
    (15) const_declaration -> const_declaration SEMI . ID EQU error ID

    VAR             reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 10 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 37


state 24

    (12) const_declaration -> ID EQU . const_value
    (14) const_declaration -> ID EQU . error ID
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (94) string -> . STRING

    error           shift and go to state 39
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 38
    string                         shift and go to state 45

state 25

    (8) idlist -> ID error .

    RPAREN          reduce using rule 8 (idlist -> ID error .)
    COMMA           reduce using rule 8 (idlist -> ID error .)
    error           reduce using rule 8 (idlist -> ID error .)
    COLON           reduce using rule 8 (idlist -> ID error .)


state 26

    (4) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 4 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 27

    (5) idlist -> idlist COMMA . ID

    ID              shift and go to state 47


state 28

    (7) idlist -> idlist error . ID

    ID              shift and go to state 48


state 29

    (9) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 9 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)
    $end            reduce using rule 9 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 30

    (41) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 49


state 31

    (56) compound_statement -> BEGIN . statement_list END
    (57) statement_list -> . statement_list SEMI statement
    (58) statement_list -> . statement
    (59) statement -> . empty
    (60) statement -> . variable ASSIGN expression
    (61) statement -> . procedure_call
    (62) statement -> . compound_statement
    (63) statement -> . IF expression THEN statement else_part
    (64) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (65) statement -> . READ LPAREN variable_list RPAREN
    (66) statement -> . WRITE LPAREN expression_list RPAREN
    (67) statement -> . READLN LPAREN variable_list RPAREN
    (68) statement -> . WRITELN LPAREN expression_list RPAREN
    (95) empty -> .
    (71) variable -> . ID id_varpart
    (74) procedure_call -> . ID
    (75) procedure_call -> . ID LPAREN expression_list RPAREN
    (56) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement_list                 shift and go to state 50
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 32

    (43) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 63


state 33

    (44) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 64


state 34

    (45) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 65


state 35

    (22) var_declarations -> VAR var_declaration SEMI .
    (25) var_declaration -> var_declaration SEMI . idlist COLON type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    BEGIN           reduce using rule 22 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 22 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 22 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 66

state 36

    (24) var_declaration -> idlist COLON . type
    (26) type -> . basic_type
    (27) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 67
    basic_type                     shift and go to state 68

state 37

    (13) const_declaration -> const_declaration SEMI ID . EQU const_value
    (15) const_declaration -> const_declaration SEMI ID . EQU error ID

    EQU             shift and go to state 75


state 38

    (12) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 12 (const_declaration -> ID EQU const_value .)


state 39

    (14) const_declaration -> ID EQU error . ID

    ID              shift and go to state 76


state 40

    (16) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 77


state 41

    (17) const_value -> ICONST .

    SEMI            reduce using rule 17 (const_value -> ICONST .)
    MULDIVANDOP     reduce using rule 17 (const_value -> ICONST .)
    RELOP           reduce using rule 17 (const_value -> ICONST .)
    EQU             reduce using rule 17 (const_value -> ICONST .)
    ADDOP           reduce using rule 17 (const_value -> ICONST .)
    OROP            reduce using rule 17 (const_value -> ICONST .)
    THEN            reduce using rule 17 (const_value -> ICONST .)
    END             reduce using rule 17 (const_value -> ICONST .)
    ELSE            reduce using rule 17 (const_value -> ICONST .)
    RPAREN          reduce using rule 17 (const_value -> ICONST .)
    COMMA           reduce using rule 17 (const_value -> ICONST .)
    RBRACK          reduce using rule 17 (const_value -> ICONST .)
    TO              reduce using rule 17 (const_value -> ICONST .)
    DO              reduce using rule 17 (const_value -> ICONST .)


state 42

    (18) const_value -> RCONST .

    SEMI            reduce using rule 18 (const_value -> RCONST .)
    MULDIVANDOP     reduce using rule 18 (const_value -> RCONST .)
    RELOP           reduce using rule 18 (const_value -> RCONST .)
    EQU             reduce using rule 18 (const_value -> RCONST .)
    ADDOP           reduce using rule 18 (const_value -> RCONST .)
    OROP            reduce using rule 18 (const_value -> RCONST .)
    THEN            reduce using rule 18 (const_value -> RCONST .)
    END             reduce using rule 18 (const_value -> RCONST .)
    ELSE            reduce using rule 18 (const_value -> RCONST .)
    RPAREN          reduce using rule 18 (const_value -> RCONST .)
    COMMA           reduce using rule 18 (const_value -> RCONST .)
    RBRACK          reduce using rule 18 (const_value -> RCONST .)
    TO              reduce using rule 18 (const_value -> RCONST .)
    DO              reduce using rule 18 (const_value -> RCONST .)


state 43

    (19) const_value -> CCONST .

    SEMI            reduce using rule 19 (const_value -> CCONST .)
    MULDIVANDOP     reduce using rule 19 (const_value -> CCONST .)
    RELOP           reduce using rule 19 (const_value -> CCONST .)
    EQU             reduce using rule 19 (const_value -> CCONST .)
    ADDOP           reduce using rule 19 (const_value -> CCONST .)
    OROP            reduce using rule 19 (const_value -> CCONST .)
    THEN            reduce using rule 19 (const_value -> CCONST .)
    END             reduce using rule 19 (const_value -> CCONST .)
    ELSE            reduce using rule 19 (const_value -> CCONST .)
    RPAREN          reduce using rule 19 (const_value -> CCONST .)
    COMMA           reduce using rule 19 (const_value -> CCONST .)
    RBRACK          reduce using rule 19 (const_value -> CCONST .)
    TO              reduce using rule 19 (const_value -> CCONST .)
    DO              reduce using rule 19 (const_value -> CCONST .)


state 44

    (20) const_value -> BCONST .

    SEMI            reduce using rule 20 (const_value -> BCONST .)
    MULDIVANDOP     reduce using rule 20 (const_value -> BCONST .)
    RELOP           reduce using rule 20 (const_value -> BCONST .)
    EQU             reduce using rule 20 (const_value -> BCONST .)
    ADDOP           reduce using rule 20 (const_value -> BCONST .)
    OROP            reduce using rule 20 (const_value -> BCONST .)
    THEN            reduce using rule 20 (const_value -> BCONST .)
    END             reduce using rule 20 (const_value -> BCONST .)
    ELSE            reduce using rule 20 (const_value -> BCONST .)
    RPAREN          reduce using rule 20 (const_value -> BCONST .)
    COMMA           reduce using rule 20 (const_value -> BCONST .)
    RBRACK          reduce using rule 20 (const_value -> BCONST .)
    TO              reduce using rule 20 (const_value -> BCONST .)
    DO              reduce using rule 20 (const_value -> BCONST .)


state 45

    (21) const_value -> string .

    SEMI            reduce using rule 21 (const_value -> string .)
    MULDIVANDOP     reduce using rule 21 (const_value -> string .)
    RELOP           reduce using rule 21 (const_value -> string .)
    EQU             reduce using rule 21 (const_value -> string .)
    ADDOP           reduce using rule 21 (const_value -> string .)
    OROP            reduce using rule 21 (const_value -> string .)
    THEN            reduce using rule 21 (const_value -> string .)
    END             reduce using rule 21 (const_value -> string .)
    ELSE            reduce using rule 21 (const_value -> string .)
    RPAREN          reduce using rule 21 (const_value -> string .)
    COMMA           reduce using rule 21 (const_value -> string .)
    RBRACK          reduce using rule 21 (const_value -> string .)
    TO              reduce using rule 21 (const_value -> string .)
    DO              reduce using rule 21 (const_value -> string .)


state 46

    (94) string -> STRING .

    SEMI            reduce using rule 94 (string -> STRING .)
    MULDIVANDOP     reduce using rule 94 (string -> STRING .)
    RELOP           reduce using rule 94 (string -> STRING .)
    EQU             reduce using rule 94 (string -> STRING .)
    ADDOP           reduce using rule 94 (string -> STRING .)
    OROP            reduce using rule 94 (string -> STRING .)
    THEN            reduce using rule 94 (string -> STRING .)
    END             reduce using rule 94 (string -> STRING .)
    ELSE            reduce using rule 94 (string -> STRING .)
    RPAREN          reduce using rule 94 (string -> STRING .)
    COMMA           reduce using rule 94 (string -> STRING .)
    RBRACK          reduce using rule 94 (string -> STRING .)
    TO              reduce using rule 94 (string -> STRING .)
    DO              reduce using rule 94 (string -> STRING .)


state 47

    (5) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 5 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 5 (idlist -> idlist COMMA ID .)
    error           reduce using rule 5 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 5 (idlist -> idlist COMMA ID .)


state 48

    (7) idlist -> idlist error ID .

    RPAREN          reduce using rule 7 (idlist -> idlist error ID .)
    COMMA           reduce using rule 7 (idlist -> idlist error ID .)
    error           reduce using rule 7 (idlist -> idlist error ID .)
    COLON           reduce using rule 7 (idlist -> idlist error ID .)


state 49

    (41) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 41 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 41 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 41 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 50

    (56) compound_statement -> BEGIN statement_list . END
    (57) statement_list -> statement_list . SEMI statement

    END             shift and go to state 78
    SEMI            shift and go to state 79


state 51

    (58) statement_list -> statement .

    END             reduce using rule 58 (statement_list -> statement .)
    SEMI            reduce using rule 58 (statement_list -> statement .)


state 52

    (59) statement -> empty .

    END             reduce using rule 59 (statement -> empty .)
    SEMI            reduce using rule 59 (statement -> empty .)
    ELSE            reduce using rule 59 (statement -> empty .)


state 53

    (60) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 80


state 54

    (61) statement -> procedure_call .

    END             reduce using rule 61 (statement -> procedure_call .)
    SEMI            reduce using rule 61 (statement -> procedure_call .)
    ELSE            reduce using rule 61 (statement -> procedure_call .)


state 55

    (62) statement -> compound_statement .

    END             reduce using rule 62 (statement -> compound_statement .)
    SEMI            reduce using rule 62 (statement -> compound_statement .)
    ELSE            reduce using rule 62 (statement -> compound_statement .)


state 56

    (63) statement -> IF . expression THEN statement else_part
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 81
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 57

    (64) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 91


state 58

    (71) variable -> ID . id_varpart
    (74) procedure_call -> ID .
    (75) procedure_call -> ID . LPAREN expression_list RPAREN
    (72) id_varpart -> . LBRACK expression_list RBRACK
    (73) id_varpart -> . empty
    (95) empty -> .

    END             reduce using rule 74 (procedure_call -> ID .)
    SEMI            reduce using rule 74 (procedure_call -> ID .)
    ELSE            reduce using rule 74 (procedure_call -> ID .)
    LPAREN          shift and go to state 93
    LBRACK          shift and go to state 94
    ASSIGN          reduce using rule 95 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 59

    (65) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 96


state 60

    (66) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 97


state 61

    (67) statement -> READLN . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 98


state 62

    (68) statement -> WRITELN . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 99


state 63

    (43) subprogram -> subprogram_head SEMI . subprogram_body
    (55) subprogram_body -> . const_declarations var_declarations compound_statement
    (10) const_declarations -> . CONST const_declaration SEMI
    (11) const_declarations -> . empty
    (95) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 95 (empty -> .)
    BEGIN           reduce using rule 95 (empty -> .)

    subprogram_body                shift and go to state 100
    const_declarations             shift and go to state 101
    empty                          shift and go to state 9

state 64

    (44) subprogram_head -> PROCEDURE ID . formal_parameter
    (46) formal_parameter -> . LPAREN parameter_list RPAREN
    (47) formal_parameter -> . empty
    (95) empty -> .

    LPAREN          shift and go to state 103
    SEMI            reduce using rule 95 (empty -> .)

    formal_parameter               shift and go to state 102
    empty                          shift and go to state 104

state 65

    (45) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (46) formal_parameter -> . LPAREN parameter_list RPAREN
    (47) formal_parameter -> . empty
    (95) empty -> .

    LPAREN          shift and go to state 103
    COLON           reduce using rule 95 (empty -> .)

    formal_parameter               shift and go to state 105
    empty                          shift and go to state 104

state 66

    (25) var_declaration -> var_declaration SEMI idlist . COLON type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 106
    COMMA           shift and go to state 27
    error           shift and go to state 28


state 67

    (24) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 24 (var_declaration -> idlist COLON type .)


state 68

    (26) type -> basic_type .

    SEMI            reduce using rule 26 (type -> basic_type .)


state 69

    (27) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 107


state 70

    (28) basic_type -> INTEGER .

    SEMI            reduce using rule 28 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 28 (basic_type -> INTEGER .)


state 71

    (29) basic_type -> REAL .

    SEMI            reduce using rule 29 (basic_type -> REAL .)
    RPAREN          reduce using rule 29 (basic_type -> REAL .)


state 72

    (30) basic_type -> CHAR .

    SEMI            reduce using rule 30 (basic_type -> CHAR .)
    RPAREN          reduce using rule 30 (basic_type -> CHAR .)


state 73

    (31) basic_type -> BOOLEAN .

    SEMI            reduce using rule 31 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 31 (basic_type -> BOOLEAN .)


state 74

    (32) basic_type -> TYPE_STRING .

    SEMI            reduce using rule 32 (basic_type -> TYPE_STRING .)
    RPAREN          reduce using rule 32 (basic_type -> TYPE_STRING .)


state 75

    (13) const_declaration -> const_declaration SEMI ID EQU . const_value
    (15) const_declaration -> const_declaration SEMI ID EQU . error ID
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (94) string -> . STRING

    error           shift and go to state 109
    ADDOP           shift and go to state 40
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    const_value                    shift and go to state 108
    string                         shift and go to state 45

state 76

    (14) const_declaration -> ID EQU error ID .

    SEMI            reduce using rule 14 (const_declaration -> ID EQU error ID .)


state 77

    (16) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 16 (const_value -> ADDOP ICONST .)


state 78

    (56) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 56 (compound_statement -> BEGIN statement_list END .)
    $end            reduce using rule 56 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 56 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 56 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 56 (compound_statement -> BEGIN statement_list END .)


state 79

    (57) statement_list -> statement_list SEMI . statement
    (59) statement -> . empty
    (60) statement -> . variable ASSIGN expression
    (61) statement -> . procedure_call
    (62) statement -> . compound_statement
    (63) statement -> . IF expression THEN statement else_part
    (64) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (65) statement -> . READ LPAREN variable_list RPAREN
    (66) statement -> . WRITE LPAREN expression_list RPAREN
    (67) statement -> . READLN LPAREN variable_list RPAREN
    (68) statement -> . WRITELN LPAREN expression_list RPAREN
    (95) empty -> .
    (71) variable -> . ID id_varpart
    (74) procedure_call -> . ID
    (75) procedure_call -> . ID LPAREN expression_list RPAREN
    (56) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 110
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 80

    (60) statement -> variable ASSIGN . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    variable                       shift and go to state 87
    expression                     shift and go to state 111
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    string                         shift and go to state 45

state 81

    (63) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 112


state 82

    (80) expression -> simple_expression . RELOP simple_expression
    (81) expression -> simple_expression . EQU simple_expression
    (82) expression -> simple_expression .
    (83) simple_expression -> simple_expression . ADDOP term
    (84) simple_expression -> simple_expression . OROP term

    RELOP           shift and go to state 113
    EQU             shift and go to state 114
    THEN            reduce using rule 82 (expression -> simple_expression .)
    END             reduce using rule 82 (expression -> simple_expression .)
    SEMI            reduce using rule 82 (expression -> simple_expression .)
    ELSE            reduce using rule 82 (expression -> simple_expression .)
    RPAREN          reduce using rule 82 (expression -> simple_expression .)
    COMMA           reduce using rule 82 (expression -> simple_expression .)
    RBRACK          reduce using rule 82 (expression -> simple_expression .)
    TO              reduce using rule 82 (expression -> simple_expression .)
    DO              reduce using rule 82 (expression -> simple_expression .)
    ADDOP           shift and go to state 115
    OROP            shift and go to state 116


state 83

    (93) factor -> ADDOP . factor
    (16) const_value -> ADDOP . ICONST
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    ICONST          shift and go to state 118
    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 117
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 84

    (85) simple_expression -> term .
    (86) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 85 (simple_expression -> term .)
    EQU             reduce using rule 85 (simple_expression -> term .)
    ADDOP           reduce using rule 85 (simple_expression -> term .)
    OROP            reduce using rule 85 (simple_expression -> term .)
    THEN            reduce using rule 85 (simple_expression -> term .)
    END             reduce using rule 85 (simple_expression -> term .)
    SEMI            reduce using rule 85 (simple_expression -> term .)
    ELSE            reduce using rule 85 (simple_expression -> term .)
    RPAREN          reduce using rule 85 (simple_expression -> term .)
    COMMA           reduce using rule 85 (simple_expression -> term .)
    RBRACK          reduce using rule 85 (simple_expression -> term .)
    TO              reduce using rule 85 (simple_expression -> term .)
    DO              reduce using rule 85 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 119


state 85

    (87) term -> factor .

    MULDIVANDOP     reduce using rule 87 (term -> factor .)
    RELOP           reduce using rule 87 (term -> factor .)
    EQU             reduce using rule 87 (term -> factor .)
    ADDOP           reduce using rule 87 (term -> factor .)
    OROP            reduce using rule 87 (term -> factor .)
    THEN            reduce using rule 87 (term -> factor .)
    END             reduce using rule 87 (term -> factor .)
    SEMI            reduce using rule 87 (term -> factor .)
    ELSE            reduce using rule 87 (term -> factor .)
    RPAREN          reduce using rule 87 (term -> factor .)
    COMMA           reduce using rule 87 (term -> factor .)
    RBRACK          reduce using rule 87 (term -> factor .)
    TO              reduce using rule 87 (term -> factor .)
    DO              reduce using rule 87 (term -> factor .)


state 86

    (88) factor -> const_value .

    MULDIVANDOP     reduce using rule 88 (factor -> const_value .)
    RELOP           reduce using rule 88 (factor -> const_value .)
    EQU             reduce using rule 88 (factor -> const_value .)
    ADDOP           reduce using rule 88 (factor -> const_value .)
    OROP            reduce using rule 88 (factor -> const_value .)
    THEN            reduce using rule 88 (factor -> const_value .)
    END             reduce using rule 88 (factor -> const_value .)
    SEMI            reduce using rule 88 (factor -> const_value .)
    ELSE            reduce using rule 88 (factor -> const_value .)
    RPAREN          reduce using rule 88 (factor -> const_value .)
    COMMA           reduce using rule 88 (factor -> const_value .)
    RBRACK          reduce using rule 88 (factor -> const_value .)
    TO              reduce using rule 88 (factor -> const_value .)
    DO              reduce using rule 88 (factor -> const_value .)


state 87

    (89) factor -> variable .

    MULDIVANDOP     reduce using rule 89 (factor -> variable .)
    RELOP           reduce using rule 89 (factor -> variable .)
    EQU             reduce using rule 89 (factor -> variable .)
    ADDOP           reduce using rule 89 (factor -> variable .)
    OROP            reduce using rule 89 (factor -> variable .)
    THEN            reduce using rule 89 (factor -> variable .)
    END             reduce using rule 89 (factor -> variable .)
    SEMI            reduce using rule 89 (factor -> variable .)
    ELSE            reduce using rule 89 (factor -> variable .)
    RPAREN          reduce using rule 89 (factor -> variable .)
    COMMA           reduce using rule 89 (factor -> variable .)
    RBRACK          reduce using rule 89 (factor -> variable .)
    TO              reduce using rule 89 (factor -> variable .)
    DO              reduce using rule 89 (factor -> variable .)


state 88

    (90) factor -> LPAREN . expression RPAREN
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 120
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 89

    (91) factor -> ID . LPAREN expression_list RPAREN
    (71) variable -> ID . id_varpart
    (72) id_varpart -> . LBRACK expression_list RBRACK
    (73) id_varpart -> . empty
    (95) empty -> .

    LPAREN          shift and go to state 121
    LBRACK          shift and go to state 94
    MULDIVANDOP     reduce using rule 95 (empty -> .)
    RELOP           reduce using rule 95 (empty -> .)
    EQU             reduce using rule 95 (empty -> .)
    ADDOP           reduce using rule 95 (empty -> .)
    OROP            reduce using rule 95 (empty -> .)
    THEN            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ELSE            reduce using rule 95 (empty -> .)
    RPAREN          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)
    RBRACK          reduce using rule 95 (empty -> .)
    TO              reduce using rule 95 (empty -> .)
    DO              reduce using rule 95 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 90

    (92) factor -> NOTOP . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 122
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 91

    (64) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 123


state 92

    (71) variable -> ID id_varpart .

    ASSIGN          reduce using rule 71 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 71 (variable -> ID id_varpart .)
    RELOP           reduce using rule 71 (variable -> ID id_varpart .)
    EQU             reduce using rule 71 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 71 (variable -> ID id_varpart .)
    OROP            reduce using rule 71 (variable -> ID id_varpart .)
    THEN            reduce using rule 71 (variable -> ID id_varpart .)
    END             reduce using rule 71 (variable -> ID id_varpart .)
    SEMI            reduce using rule 71 (variable -> ID id_varpart .)
    ELSE            reduce using rule 71 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 71 (variable -> ID id_varpart .)
    COMMA           reduce using rule 71 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 71 (variable -> ID id_varpart .)
    TO              reduce using rule 71 (variable -> ID id_varpart .)
    DO              reduce using rule 71 (variable -> ID id_varpart .)


state 93

    (75) procedure_call -> ID LPAREN . expression_list RPAREN
    (78) expression_list -> . expression_list COMMA expression
    (79) expression_list -> . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 124
    expression                     shift and go to state 125
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 94

    (72) id_varpart -> LBRACK . expression_list RBRACK
    (78) expression_list -> . expression_list COMMA expression
    (79) expression_list -> . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 126
    expression                     shift and go to state 125
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 95

    (73) id_varpart -> empty .

    ASSIGN          reduce using rule 73 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 73 (id_varpart -> empty .)
    RELOP           reduce using rule 73 (id_varpart -> empty .)
    EQU             reduce using rule 73 (id_varpart -> empty .)
    ADDOP           reduce using rule 73 (id_varpart -> empty .)
    OROP            reduce using rule 73 (id_varpart -> empty .)
    THEN            reduce using rule 73 (id_varpart -> empty .)
    END             reduce using rule 73 (id_varpart -> empty .)
    SEMI            reduce using rule 73 (id_varpart -> empty .)
    ELSE            reduce using rule 73 (id_varpart -> empty .)
    RPAREN          reduce using rule 73 (id_varpart -> empty .)
    COMMA           reduce using rule 73 (id_varpart -> empty .)
    RBRACK          reduce using rule 73 (id_varpart -> empty .)
    TO              reduce using rule 73 (id_varpart -> empty .)
    DO              reduce using rule 73 (id_varpart -> empty .)


state 96

    (65) statement -> READ LPAREN . variable_list RPAREN
    (69) variable_list -> . variable_list COMMA variable
    (70) variable_list -> . variable
    (71) variable -> . ID id_varpart

    ID              shift and go to state 129

    variable_list                  shift and go to state 127
    variable                       shift and go to state 128

state 97

    (66) statement -> WRITE LPAREN . expression_list RPAREN
    (78) expression_list -> . expression_list COMMA expression
    (79) expression_list -> . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 130
    expression                     shift and go to state 125
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 98

    (67) statement -> READLN LPAREN . variable_list RPAREN
    (69) variable_list -> . variable_list COMMA variable
    (70) variable_list -> . variable
    (71) variable -> . ID id_varpart

    ID              shift and go to state 129

    variable_list                  shift and go to state 131
    variable                       shift and go to state 128

state 99

    (68) statement -> WRITELN LPAREN . expression_list RPAREN
    (78) expression_list -> . expression_list COMMA expression
    (79) expression_list -> . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 132
    expression                     shift and go to state 125
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 100

    (43) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 43 (subprogram -> subprogram_head SEMI subprogram_body .)


state 101

    (55) subprogram_body -> const_declarations . var_declarations compound_statement
    (22) var_declarations -> . VAR var_declaration SEMI
    (23) var_declarations -> . empty
    (95) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 95 (empty -> .)

    var_declarations               shift and go to state 133
    empty                          shift and go to state 14

state 102

    (44) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 44 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 103

    (46) formal_parameter -> LPAREN . parameter_list RPAREN
    (48) parameter_list -> . parameter_list SEMI parameter
    (49) parameter_list -> . parameter
    (50) parameter -> . var_parameter
    (51) parameter -> . value_parameter
    (52) var_parameter -> . VAR value_parameter
    (53) value_parameter -> . idlist COLON basic_type
    (54) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 138
    ID              shift and go to state 17

    parameter_list                 shift and go to state 134
    parameter                      shift and go to state 135
    var_parameter                  shift and go to state 136
    value_parameter                shift and go to state 137
    idlist                         shift and go to state 139

state 104

    (47) formal_parameter -> empty .

    SEMI            reduce using rule 47 (formal_parameter -> empty .)
    COLON           reduce using rule 47 (formal_parameter -> empty .)


state 105

    (45) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 140


state 106

    (25) var_declaration -> var_declaration SEMI idlist COLON . type
    (26) type -> . basic_type
    (27) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    ARRAY           shift and go to state 69
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    type                           shift and go to state 141
    basic_type                     shift and go to state 68

state 107

    (27) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (37) period -> . my_period_part DOTDOT my_period_part
    (38) period -> . period COMMA my_period_part DOTDOT my_period_part
    (39) period -> . RCONST
    (40) period -> . period COMMA RCONST
    (33) my_period_part -> . ADDOP ICONST
    (34) my_period_part -> . ICONST
    (35) my_period_part -> . CCONST
    (36) my_period_part -> . ID

    RCONST          shift and go to state 144
    ADDOP           shift and go to state 145
    ICONST          shift and go to state 146
    CCONST          shift and go to state 147
    ID              shift and go to state 148

    period                         shift and go to state 142
    my_period_part                 shift and go to state 143

state 108

    (13) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 13 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 109

    (15) const_declaration -> const_declaration SEMI ID EQU error . ID

    ID              shift and go to state 149


state 110

    (57) statement_list -> statement_list SEMI statement .

    END             reduce using rule 57 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 57 (statement_list -> statement_list SEMI statement .)


state 111

    (60) statement -> variable ASSIGN expression .

    END             reduce using rule 60 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 60 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 60 (statement -> variable ASSIGN expression .)


state 112

    (63) statement -> IF expression THEN . statement else_part
    (59) statement -> . empty
    (60) statement -> . variable ASSIGN expression
    (61) statement -> . procedure_call
    (62) statement -> . compound_statement
    (63) statement -> . IF expression THEN statement else_part
    (64) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (65) statement -> . READ LPAREN variable_list RPAREN
    (66) statement -> . WRITE LPAREN expression_list RPAREN
    (67) statement -> . READLN LPAREN variable_list RPAREN
    (68) statement -> . WRITELN LPAREN expression_list RPAREN
    (95) empty -> .
    (71) variable -> . ID id_varpart
    (74) procedure_call -> . ID
    (75) procedure_call -> . ID LPAREN expression_list RPAREN
    (56) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 150
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 113

    (80) expression -> simple_expression RELOP . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 151
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 114

    (81) expression -> simple_expression EQU . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    simple_expression              shift and go to state 152
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 115

    (83) simple_expression -> simple_expression ADDOP . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    term                           shift and go to state 153
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 116

    (84) simple_expression -> simple_expression OROP . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    term                           shift and go to state 154
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 117

    (93) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 93 (factor -> ADDOP factor .)
    RELOP           reduce using rule 93 (factor -> ADDOP factor .)
    EQU             reduce using rule 93 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 93 (factor -> ADDOP factor .)
    OROP            reduce using rule 93 (factor -> ADDOP factor .)
    THEN            reduce using rule 93 (factor -> ADDOP factor .)
    END             reduce using rule 93 (factor -> ADDOP factor .)
    SEMI            reduce using rule 93 (factor -> ADDOP factor .)
    ELSE            reduce using rule 93 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 93 (factor -> ADDOP factor .)
    COMMA           reduce using rule 93 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 93 (factor -> ADDOP factor .)
    TO              reduce using rule 93 (factor -> ADDOP factor .)
    DO              reduce using rule 93 (factor -> ADDOP factor .)


state 118

    (16) const_value -> ADDOP ICONST .
    (17) const_value -> ICONST .

  ! reduce/reduce conflict for MULDIVANDOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RELOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for EQU resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ADDOP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for OROP resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for THEN resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for END resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for SEMI resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for RBRACK resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for TO resolved using rule 16 (const_value -> ADDOP ICONST .)
  ! reduce/reduce conflict for DO resolved using rule 16 (const_value -> ADDOP ICONST .)
    MULDIVANDOP     reduce using rule 16 (const_value -> ADDOP ICONST .)
    RELOP           reduce using rule 16 (const_value -> ADDOP ICONST .)
    EQU             reduce using rule 16 (const_value -> ADDOP ICONST .)
    ADDOP           reduce using rule 16 (const_value -> ADDOP ICONST .)
    OROP            reduce using rule 16 (const_value -> ADDOP ICONST .)
    THEN            reduce using rule 16 (const_value -> ADDOP ICONST .)
    END             reduce using rule 16 (const_value -> ADDOP ICONST .)
    SEMI            reduce using rule 16 (const_value -> ADDOP ICONST .)
    ELSE            reduce using rule 16 (const_value -> ADDOP ICONST .)
    RPAREN          reduce using rule 16 (const_value -> ADDOP ICONST .)
    COMMA           reduce using rule 16 (const_value -> ADDOP ICONST .)
    RBRACK          reduce using rule 16 (const_value -> ADDOP ICONST .)
    TO              reduce using rule 16 (const_value -> ADDOP ICONST .)
    DO              reduce using rule 16 (const_value -> ADDOP ICONST .)

  ! MULDIVANDOP     [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RELOP           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! EQU             [ reduce using rule 17 (const_value -> ICONST .) ]
  ! ADDOP           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! OROP            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! THEN            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! END             [ reduce using rule 17 (const_value -> ICONST .) ]
  ! SEMI            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! ELSE            [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RPAREN          [ reduce using rule 17 (const_value -> ICONST .) ]
  ! COMMA           [ reduce using rule 17 (const_value -> ICONST .) ]
  ! RBRACK          [ reduce using rule 17 (const_value -> ICONST .) ]
  ! TO              [ reduce using rule 17 (const_value -> ICONST .) ]
  ! DO              [ reduce using rule 17 (const_value -> ICONST .) ]


state 119

    (86) term -> term MULDIVANDOP . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    factor                         shift and go to state 155
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 120

    (90) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 156


state 121

    (91) factor -> ID LPAREN . expression_list RPAREN
    (78) expression_list -> . expression_list COMMA expression
    (79) expression_list -> . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression_list                shift and go to state 157
    expression                     shift and go to state 125
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 122

    (92) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 92 (factor -> NOTOP factor .)
    RELOP           reduce using rule 92 (factor -> NOTOP factor .)
    EQU             reduce using rule 92 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 92 (factor -> NOTOP factor .)
    OROP            reduce using rule 92 (factor -> NOTOP factor .)
    THEN            reduce using rule 92 (factor -> NOTOP factor .)
    END             reduce using rule 92 (factor -> NOTOP factor .)
    SEMI            reduce using rule 92 (factor -> NOTOP factor .)
    ELSE            reduce using rule 92 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 92 (factor -> NOTOP factor .)
    COMMA           reduce using rule 92 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 92 (factor -> NOTOP factor .)
    TO              reduce using rule 92 (factor -> NOTOP factor .)
    DO              reduce using rule 92 (factor -> NOTOP factor .)


state 123

    (64) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 158
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 124

    (75) procedure_call -> ID LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 125

    (79) expression_list -> expression .

    RPAREN          reduce using rule 79 (expression_list -> expression .)
    COMMA           reduce using rule 79 (expression_list -> expression .)
    RBRACK          reduce using rule 79 (expression_list -> expression .)


state 126

    (72) id_varpart -> LBRACK expression_list . RBRACK
    (78) expression_list -> expression_list . COMMA expression

    RBRACK          shift and go to state 161
    COMMA           shift and go to state 160


state 127

    (65) statement -> READ LPAREN variable_list . RPAREN
    (69) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 162
    COMMA           shift and go to state 163


state 128

    (70) variable_list -> variable .

    RPAREN          reduce using rule 70 (variable_list -> variable .)
    COMMA           reduce using rule 70 (variable_list -> variable .)


state 129

    (71) variable -> ID . id_varpart
    (72) id_varpart -> . LBRACK expression_list RBRACK
    (73) id_varpart -> . empty
    (95) empty -> .

    LBRACK          shift and go to state 94
    RPAREN          reduce using rule 95 (empty -> .)
    COMMA           reduce using rule 95 (empty -> .)

    id_varpart                     shift and go to state 92
    empty                          shift and go to state 95

state 130

    (66) statement -> WRITE LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 160


state 131

    (67) statement -> READLN LPAREN variable_list . RPAREN
    (69) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 163


state 132

    (68) statement -> WRITELN LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 160


state 133

    (55) subprogram_body -> const_declarations var_declarations . compound_statement
    (56) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 31

    compound_statement             shift and go to state 167

state 134

    (46) formal_parameter -> LPAREN parameter_list . RPAREN
    (48) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 168
    SEMI            shift and go to state 169


state 135

    (49) parameter_list -> parameter .

    RPAREN          reduce using rule 49 (parameter_list -> parameter .)
    SEMI            reduce using rule 49 (parameter_list -> parameter .)


state 136

    (50) parameter -> var_parameter .

    RPAREN          reduce using rule 50 (parameter -> var_parameter .)
    SEMI            reduce using rule 50 (parameter -> var_parameter .)


state 137

    (51) parameter -> value_parameter .

    RPAREN          reduce using rule 51 (parameter -> value_parameter .)
    SEMI            reduce using rule 51 (parameter -> value_parameter .)


state 138

    (52) var_parameter -> VAR . value_parameter
    (53) value_parameter -> . idlist COLON basic_type
    (54) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    ID              shift and go to state 17

    value_parameter                shift and go to state 170
    idlist                         shift and go to state 139

state 139

    (53) value_parameter -> idlist . COLON basic_type
    (54) value_parameter -> idlist . error basic_type
    (5) idlist -> idlist . COMMA ID
    (7) idlist -> idlist . error ID

    COLON           shift and go to state 171
    error           shift and go to state 172
    COMMA           shift and go to state 27


state 140

    (45) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 173

state 141

    (25) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 25 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 142

    (27) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (38) period -> period . COMMA my_period_part DOTDOT my_period_part
    (40) period -> period . COMMA RCONST

    RBRACK          shift and go to state 174
    COMMA           shift and go to state 175


state 143

    (37) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 176


state 144

    (39) period -> RCONST .

    RBRACK          reduce using rule 39 (period -> RCONST .)
    COMMA           reduce using rule 39 (period -> RCONST .)


state 145

    (33) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 177


state 146

    (34) my_period_part -> ICONST .

    DOTDOT          reduce using rule 34 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 34 (my_period_part -> ICONST .)
    COMMA           reduce using rule 34 (my_period_part -> ICONST .)


state 147

    (35) my_period_part -> CCONST .

    DOTDOT          reduce using rule 35 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 35 (my_period_part -> CCONST .)
    COMMA           reduce using rule 35 (my_period_part -> CCONST .)


state 148

    (36) my_period_part -> ID .

    DOTDOT          reduce using rule 36 (my_period_part -> ID .)
    RBRACK          reduce using rule 36 (my_period_part -> ID .)
    COMMA           reduce using rule 36 (my_period_part -> ID .)


state 149

    (15) const_declaration -> const_declaration SEMI ID EQU error ID .

    SEMI            reduce using rule 15 (const_declaration -> const_declaration SEMI ID EQU error ID .)


state 150

    (63) statement -> IF expression THEN statement . else_part
    (76) else_part -> . ELSE statement
    (77) else_part -> . empty
    (95) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 179
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)

  ! ELSE            [ reduce using rule 95 (empty -> .) ]

    else_part                      shift and go to state 178
    empty                          shift and go to state 180

state 151

    (80) expression -> simple_expression RELOP simple_expression .
    (83) simple_expression -> simple_expression . ADDOP term
    (84) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 80 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 115
    OROP            shift and go to state 116


state 152

    (81) expression -> simple_expression EQU simple_expression .
    (83) simple_expression -> simple_expression . ADDOP term
    (84) simple_expression -> simple_expression . OROP term

    THEN            reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 81 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 115
    OROP            shift and go to state 116


state 153

    (83) simple_expression -> simple_expression ADDOP term .
    (86) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    OROP            reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 83 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 119


state 154

    (84) simple_expression -> simple_expression OROP term .
    (86) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    EQU             reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    ADDOP           reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    OROP            reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    THEN            reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    END             reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    SEMI            reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    ELSE            reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    RPAREN          reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    COMMA           reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    RBRACK          reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    TO              reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    DO              reduce using rule 84 (simple_expression -> simple_expression OROP term .)
    MULDIVANDOP     shift and go to state 119


state 155

    (86) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 86 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 86 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 86 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 86 (term -> term MULDIVANDOP factor .)
    OROP            reduce using rule 86 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 86 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 86 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 86 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 86 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 86 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 86 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 86 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 86 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 86 (term -> term MULDIVANDOP factor .)


state 156

    (90) factor -> LPAREN expression RPAREN .

    MULDIVANDOP     reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RELOP           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    EQU             reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    ADDOP           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    OROP            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 90 (factor -> LPAREN expression RPAREN .)


state 157

    (91) factor -> ID LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 181
    COMMA           shift and go to state 160


state 158

    (64) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 182


state 159

    (75) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 75 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 75 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 75 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 160

    (78) expression_list -> expression_list COMMA . expression
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 183
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 161

    (72) id_varpart -> LBRACK expression_list RBRACK .

    ASSIGN          reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    MULDIVANDOP     reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    RELOP           reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    EQU             reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    ADDOP           reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    OROP            reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    THEN            reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    END             reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    SEMI            reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    ELSE            reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    RPAREN          reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    COMMA           reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    RBRACK          reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    TO              reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)
    DO              reduce using rule 72 (id_varpart -> LBRACK expression_list RBRACK .)


state 162

    (65) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 65 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 65 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 65 (statement -> READ LPAREN variable_list RPAREN .)


state 163

    (69) variable_list -> variable_list COMMA . variable
    (71) variable -> . ID id_varpart

    ID              shift and go to state 129

    variable                       shift and go to state 184

state 164

    (66) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 66 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 66 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 66 (statement -> WRITE LPAREN expression_list RPAREN .)


state 165

    (67) statement -> READLN LPAREN variable_list RPAREN .

    END             reduce using rule 67 (statement -> READLN LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 67 (statement -> READLN LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 67 (statement -> READLN LPAREN variable_list RPAREN .)


state 166

    (68) statement -> WRITELN LPAREN expression_list RPAREN .

    END             reduce using rule 68 (statement -> WRITELN LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 68 (statement -> WRITELN LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 68 (statement -> WRITELN LPAREN expression_list RPAREN .)


state 167

    (55) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 55 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 168

    (46) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 46 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 46 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 169

    (48) parameter_list -> parameter_list SEMI . parameter
    (50) parameter -> . var_parameter
    (51) parameter -> . value_parameter
    (52) var_parameter -> . VAR value_parameter
    (53) value_parameter -> . idlist COLON basic_type
    (54) value_parameter -> . idlist error basic_type
    (5) idlist -> . idlist COMMA ID
    (6) idlist -> . ID
    (7) idlist -> . idlist error ID
    (8) idlist -> . ID error

    VAR             shift and go to state 138
    ID              shift and go to state 17

    parameter                      shift and go to state 185
    var_parameter                  shift and go to state 136
    value_parameter                shift and go to state 137
    idlist                         shift and go to state 139

state 170

    (52) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 52 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 52 (var_parameter -> VAR value_parameter .)


state 171

    (53) value_parameter -> idlist COLON . basic_type
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 186

state 172

    (54) value_parameter -> idlist error . basic_type
    (7) idlist -> idlist error . ID
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    ID              shift and go to state 48
    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 187

state 173

    (45) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 45 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 174

    (27) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 188


state 175

    (38) period -> period COMMA . my_period_part DOTDOT my_period_part
    (40) period -> period COMMA . RCONST
    (33) my_period_part -> . ADDOP ICONST
    (34) my_period_part -> . ICONST
    (35) my_period_part -> . CCONST
    (36) my_period_part -> . ID

    RCONST          shift and go to state 190
    ADDOP           shift and go to state 145
    ICONST          shift and go to state 146
    CCONST          shift and go to state 147
    ID              shift and go to state 148

    my_period_part                 shift and go to state 189

state 176

    (37) period -> my_period_part DOTDOT . my_period_part
    (33) my_period_part -> . ADDOP ICONST
    (34) my_period_part -> . ICONST
    (35) my_period_part -> . CCONST
    (36) my_period_part -> . ID

    ADDOP           shift and go to state 145
    ICONST          shift and go to state 146
    CCONST          shift and go to state 147
    ID              shift and go to state 148

    my_period_part                 shift and go to state 191

state 177

    (33) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 33 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 33 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 33 (my_period_part -> ADDOP ICONST .)


state 178

    (63) statement -> IF expression THEN statement else_part .

    END             reduce using rule 63 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 63 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 63 (statement -> IF expression THEN statement else_part .)


state 179

    (76) else_part -> ELSE . statement
    (59) statement -> . empty
    (60) statement -> . variable ASSIGN expression
    (61) statement -> . procedure_call
    (62) statement -> . compound_statement
    (63) statement -> . IF expression THEN statement else_part
    (64) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (65) statement -> . READ LPAREN variable_list RPAREN
    (66) statement -> . WRITE LPAREN expression_list RPAREN
    (67) statement -> . READLN LPAREN variable_list RPAREN
    (68) statement -> . WRITELN LPAREN expression_list RPAREN
    (95) empty -> .
    (71) variable -> . ID id_varpart
    (74) procedure_call -> . ID
    (75) procedure_call -> . ID LPAREN expression_list RPAREN
    (56) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 192
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 180

    (77) else_part -> empty .

    ELSE            reduce using rule 77 (else_part -> empty .)
    END             reduce using rule 77 (else_part -> empty .)
    SEMI            reduce using rule 77 (else_part -> empty .)


state 181

    (91) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    OROP            reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 91 (factor -> ID LPAREN expression_list RPAREN .)


state 182

    (64) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (80) expression -> . simple_expression RELOP simple_expression
    (81) expression -> . simple_expression EQU simple_expression
    (82) expression -> . simple_expression
    (83) simple_expression -> . simple_expression ADDOP term
    (84) simple_expression -> . simple_expression OROP term
    (85) simple_expression -> . term
    (86) term -> . term MULDIVANDOP factor
    (87) term -> . factor
    (88) factor -> . const_value
    (89) factor -> . variable
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . ID LPAREN expression_list RPAREN
    (92) factor -> . NOTOP factor
    (93) factor -> . ADDOP factor
    (16) const_value -> . ADDOP ICONST
    (17) const_value -> . ICONST
    (18) const_value -> . RCONST
    (19) const_value -> . CCONST
    (20) const_value -> . BCONST
    (21) const_value -> . string
    (71) variable -> . ID id_varpart
    (94) string -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 89
    NOTOP           shift and go to state 90
    ADDOP           shift and go to state 83
    ICONST          shift and go to state 41
    RCONST          shift and go to state 42
    CCONST          shift and go to state 43
    BCONST          shift and go to state 44
    STRING          shift and go to state 46

    expression                     shift and go to state 193
    simple_expression              shift and go to state 82
    term                           shift and go to state 84
    factor                         shift and go to state 85
    const_value                    shift and go to state 86
    variable                       shift and go to state 87
    string                         shift and go to state 45

state 183

    (78) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    RBRACK          reduce using rule 78 (expression_list -> expression_list COMMA expression .)


state 184

    (69) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 69 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 69 (variable_list -> variable_list COMMA variable .)


state 185

    (48) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 48 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 48 (parameter_list -> parameter_list SEMI parameter .)


state 186

    (53) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 53 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 53 (value_parameter -> idlist COLON basic_type .)


state 187

    (54) value_parameter -> idlist error basic_type .

    RPAREN          reduce using rule 54 (value_parameter -> idlist error basic_type .)
    SEMI            reduce using rule 54 (value_parameter -> idlist error basic_type .)


state 188

    (27) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (28) basic_type -> . INTEGER
    (29) basic_type -> . REAL
    (30) basic_type -> . CHAR
    (31) basic_type -> . BOOLEAN
    (32) basic_type -> . TYPE_STRING

    INTEGER         shift and go to state 70
    REAL            shift and go to state 71
    CHAR            shift and go to state 72
    BOOLEAN         shift and go to state 73
    TYPE_STRING     shift and go to state 74

    basic_type                     shift and go to state 194

state 189

    (38) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 195


state 190

    (40) period -> period COMMA RCONST .

    RBRACK          reduce using rule 40 (period -> period COMMA RCONST .)
    COMMA           reduce using rule 40 (period -> period COMMA RCONST .)


state 191

    (37) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 37 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 37 (period -> my_period_part DOTDOT my_period_part .)


state 192

    (76) else_part -> ELSE statement .

    ELSE            reduce using rule 76 (else_part -> ELSE statement .)
    END             reduce using rule 76 (else_part -> ELSE statement .)
    SEMI            reduce using rule 76 (else_part -> ELSE statement .)


state 193

    (64) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 196


state 194

    (27) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 27 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 195

    (38) period -> period COMMA my_period_part DOTDOT . my_period_part
    (33) my_period_part -> . ADDOP ICONST
    (34) my_period_part -> . ICONST
    (35) my_period_part -> . CCONST
    (36) my_period_part -> . ID

    ADDOP           shift and go to state 145
    ICONST          shift and go to state 146
    CCONST          shift and go to state 147
    ID              shift and go to state 148

    my_period_part                 shift and go to state 197

state 196

    (64) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (59) statement -> . empty
    (60) statement -> . variable ASSIGN expression
    (61) statement -> . procedure_call
    (62) statement -> . compound_statement
    (63) statement -> . IF expression THEN statement else_part
    (64) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (65) statement -> . READ LPAREN variable_list RPAREN
    (66) statement -> . WRITE LPAREN expression_list RPAREN
    (67) statement -> . READLN LPAREN variable_list RPAREN
    (68) statement -> . WRITELN LPAREN expression_list RPAREN
    (95) empty -> .
    (71) variable -> . ID id_varpart
    (74) procedure_call -> . ID
    (75) procedure_call -> . ID LPAREN expression_list RPAREN
    (56) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 56
    FOR             shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    READLN          shift and go to state 61
    WRITELN         shift and go to state 62
    ELSE            reduce using rule 95 (empty -> .)
    END             reduce using rule 95 (empty -> .)
    SEMI            reduce using rule 95 (empty -> .)
    ID              shift and go to state 58
    BEGIN           shift and go to state 31

    statement                      shift and go to state 198
    empty                          shift and go to state 52
    variable                       shift and go to state 53
    procedure_call                 shift and go to state 54
    compound_statement             shift and go to state 55

state 197

    (38) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 38 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 38 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 198

    (64) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 64 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 64 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 64 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 17 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 150 resolved as shift
WARNING: reduce/reduce conflict in state 118 resolved using rule (const_value -> ADDOP ICONST)
WARNING: rejected rule (const_value -> ICONST) in state 118
