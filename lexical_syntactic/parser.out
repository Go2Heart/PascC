Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BCONST
    DOWNTO
    EOF
    FORWARD
    INOP
    LCURL
    OROP
    RCURL
    RECORD
    SET
    TYPE
    WHILE
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> program_head SEMI program_body DOT
Rule 2     program_head -> PROGRAM ID
Rule 3     program_head -> PROGRAM ID LPAREN idlist RPAREN
Rule 4     idlist -> idlist COMMA ID
Rule 5     idlist -> ID
Rule 6     program_body -> const_declarations var_declarations subprogram_declarations compound_statement
Rule 7     const_declarations -> CONST const_declaration SEMI
Rule 8     const_declarations -> empty
Rule 9     const_declaration -> ID EQU const_value
Rule 10    const_declaration -> const_declaration SEMI ID EQU const_value
Rule 11    const_value -> ADDOP ICONST
Rule 12    const_value -> ICONST
Rule 13    const_value -> CCONST
Rule 14    var_declarations -> VAR var_declaration SEMI
Rule 15    var_declarations -> empty
Rule 16    var_declaration -> idlist COLON type
Rule 17    var_declaration -> var_declaration SEMI idlist COLON type
Rule 18    type -> basic_type
Rule 19    type -> ARRAY LBRACK period RBRACK OF basic_type
Rule 20    basic_type -> INTEGER
Rule 21    basic_type -> REAL
Rule 22    basic_type -> CHAR
Rule 23    basic_type -> STRING
Rule 24    basic_type -> BOOLEAN
Rule 25    my_period_part -> ADDOP ICONST
Rule 26    my_period_part -> ICONST
Rule 27    my_period_part -> CCONST
Rule 28    period -> my_period_part DOTDOT my_period_part
Rule 29    period -> period COMMA my_period_part DOTDOT my_period_part
Rule 30    subprogram_declarations -> subprogram_declarations subprogram SEMI
Rule 31    subprogram_declarations -> empty
Rule 32    subprogram -> subprogram_head SEMI subprogram_body
Rule 33    subprogram_head -> PROCEDURE ID formal_parameter
Rule 34    subprogram_head -> FUNCTION ID formal_parameter COLON basic_type
Rule 35    formal_parameter -> LPAREN parameter_list RPAREN
Rule 36    formal_parameter -> empty
Rule 37    parameter_list -> parameter_list SEMI parameter
Rule 38    parameter_list -> parameter
Rule 39    parameter -> var_parameter
Rule 40    parameter -> value_parameter
Rule 41    var_parameter -> VAR value_parameter
Rule 42    value_parameter -> idlist COLON basic_type
Rule 43    subprogram_body -> const_declarations var_declarations compound_statement
Rule 44    compound_statement -> BEGIN statement_list END
Rule 45    statement_list -> statement_list SEMI statement
Rule 46    statement_list -> statement
Rule 47    statement -> empty
Rule 48    statement -> variable ASSIGN expression
Rule 49    statement -> procedure_call
Rule 50    statement -> compound_statement
Rule 51    statement -> IF expression THEN statement else_part
Rule 52    statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 53    statement -> READ LPAREN variable_list RPAREN
Rule 54    statement -> WRITE LPAREN expression_list RPAREN
Rule 55    variable_list -> variable_list COMMA variable
Rule 56    variable_list -> variable
Rule 57    variable -> ID id_varpart
Rule 58    id_varpart -> LBRACK expression RBRACK
Rule 59    id_varpart -> empty
Rule 60    procedure_call -> ID
Rule 61    procedure_call -> ID LPAREN expression_list RPAREN
Rule 62    else_part -> ELSE statement
Rule 63    else_part -> empty
Rule 64    expression_list -> expression_list COMMA expression
Rule 65    expression_list -> expression
Rule 66    expression -> simple_expression RELOP simple_expression
Rule 67    expression -> simple_expression EQU simple_expression
Rule 68    expression -> simple_expression
Rule 69    simple_expression -> simple_expression ADDOP term
Rule 70    simple_expression -> term
Rule 71    term -> term MULDIVANDOP factor
Rule 72    term -> factor
Rule 73    factor -> number
Rule 74    factor -> variable
Rule 75    factor -> ID LPAREN expression_list RPAREN
Rule 76    factor -> NOTOP factor
Rule 77    factor -> ADDOP factor
Rule 78    number -> ICONST
Rule 79    number -> RCONST
Rule 80    empty -> <empty>

Terminals, with rules where they appear

ADDOP                : 11 25 69 77
ARRAY                : 19
ASSIGN               : 48 52
BCONST               : 
BEGIN                : 44
BOOLEAN              : 24
CCONST               : 13 27
CHAR                 : 22
COLON                : 16 17 34 42
COMMA                : 4 29 55 64
CONST                : 7
DO                   : 52
DOT                  : 1
DOTDOT               : 28 29
DOWNTO               : 
ELSE                 : 62
END                  : 44
EOF                  : 
EQU                  : 9 10 67
FOR                  : 52
FORWARD              : 
FUNCTION             : 34
ICONST               : 11 12 25 26 78
ID                   : 2 3 4 5 9 10 33 34 52 57 60 61 75
IF                   : 51
INOP                 : 
INTEGER              : 20
LBRACK               : 19 58
LCURL                : 
LPAREN               : 3 35 53 54 61 75
MULDIVANDOP          : 71
NOTOP                : 76
OF                   : 19
OROP                 : 
PROCEDURE            : 33
PROGRAM              : 2 3
RBRACK               : 19 58
RCONST               : 79
RCURL                : 
READ                 : 53
REAL                 : 21
RECORD               : 
RELOP                : 66
RPAREN               : 3 35 53 54 61 75
SEMI                 : 1 7 10 14 17 30 32 37 45
SET                  : 
STRING               : 23
THEN                 : 51
TO                   : 52
TYPE                 : 
VAR                  : 14 41
WHILE                : 
WITH                 : 
WRITE                : 54
error                : 

Nonterminals, with rules where they appear

basic_type           : 18 19 34 42
compound_statement   : 6 43 50
const_declaration    : 7 10
const_declarations   : 6 43
const_value          : 9 10
else_part            : 51
empty                : 8 15 31 36 47 59 63
expression           : 48 51 52 52 58 64 65
expression_list      : 54 61 64 75
factor               : 71 72 76 77
formal_parameter     : 33 34
id_varpart           : 57
idlist               : 3 4 16 17 42
my_period_part       : 28 28 29 29
number               : 73
parameter            : 37 38
parameter_list       : 35 37
period               : 19 29
procedure_call       : 49
program              : 0
program_body         : 1
program_head         : 1
simple_expression    : 66 66 67 67 68 69
statement            : 45 46 51 52 62
statement_list       : 44 45
subprogram           : 30
subprogram_body      : 32
subprogram_declarations : 6 30
subprogram_head      : 32
term                 : 69 70 71
type                 : 16 17
value_parameter      : 40 41
var_declaration      : 14 17
var_declarations     : 6 43
var_parameter        : 39
variable             : 48 55 56 74
variable_list        : 53 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_head SEMI program_body DOT
    (2) program_head -> . PROGRAM ID
    (3) program_head -> . PROGRAM ID LPAREN idlist RPAREN

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    program_head                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> program_head . SEMI program_body DOT

    SEMI            shift and go to state 4


state 3

    (2) program_head -> PROGRAM . ID
    (3) program_head -> PROGRAM . ID LPAREN idlist RPAREN

    ID              shift and go to state 5


state 4

    (1) program -> program_head SEMI . program_body DOT
    (6) program_body -> . const_declarations var_declarations subprogram_declarations compound_statement
    (7) const_declarations -> . CONST const_declaration SEMI
    (8) const_declarations -> . empty
    (80) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)
    PROCEDURE       reduce using rule 80 (empty -> .)
    FUNCTION        reduce using rule 80 (empty -> .)

    program_body                   shift and go to state 6
    const_declarations             shift and go to state 7
    empty                          shift and go to state 9

state 5

    (2) program_head -> PROGRAM ID .
    (3) program_head -> PROGRAM ID . LPAREN idlist RPAREN

    SEMI            reduce using rule 2 (program_head -> PROGRAM ID .)
    LPAREN          shift and go to state 10


state 6

    (1) program -> program_head SEMI program_body . DOT

    DOT             shift and go to state 11


state 7

    (6) program_body -> const_declarations . var_declarations subprogram_declarations compound_statement
    (14) var_declarations -> . VAR var_declaration SEMI
    (15) var_declarations -> . empty
    (80) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 80 (empty -> .)
    PROCEDURE       reduce using rule 80 (empty -> .)
    FUNCTION        reduce using rule 80 (empty -> .)

    var_declarations               shift and go to state 12
    empty                          shift and go to state 14

state 8

    (7) const_declarations -> CONST . const_declaration SEMI
    (9) const_declaration -> . ID EQU const_value
    (10) const_declaration -> . const_declaration SEMI ID EQU const_value

    ID              shift and go to state 16

    const_declaration              shift and go to state 15

state 9

    (8) const_declarations -> empty .

    VAR             reduce using rule 8 (const_declarations -> empty .)
    BEGIN           reduce using rule 8 (const_declarations -> empty .)
    PROCEDURE       reduce using rule 8 (const_declarations -> empty .)
    FUNCTION        reduce using rule 8 (const_declarations -> empty .)


state 10

    (3) program_head -> PROGRAM ID LPAREN . idlist RPAREN
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    idlist                         shift and go to state 18

state 11

    (1) program -> program_head SEMI program_body DOT .

    $end            reduce using rule 1 (program -> program_head SEMI program_body DOT .)


state 12

    (6) program_body -> const_declarations var_declarations . subprogram_declarations compound_statement
    (30) subprogram_declarations -> . subprogram_declarations subprogram SEMI
    (31) subprogram_declarations -> . empty
    (80) empty -> .

    BEGIN           reduce using rule 80 (empty -> .)
    PROCEDURE       reduce using rule 80 (empty -> .)
    FUNCTION        reduce using rule 80 (empty -> .)

    subprogram_declarations        shift and go to state 19
    empty                          shift and go to state 20

state 13

    (14) var_declarations -> VAR . var_declaration SEMI
    (16) var_declaration -> . idlist COLON type
    (17) var_declaration -> . var_declaration SEMI idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    var_declaration                shift and go to state 21
    idlist                         shift and go to state 22

state 14

    (15) var_declarations -> empty .

    BEGIN           reduce using rule 15 (var_declarations -> empty .)
    PROCEDURE       reduce using rule 15 (var_declarations -> empty .)
    FUNCTION        reduce using rule 15 (var_declarations -> empty .)


state 15

    (7) const_declarations -> CONST const_declaration . SEMI
    (10) const_declaration -> const_declaration . SEMI ID EQU const_value

    SEMI            shift and go to state 23


state 16

    (9) const_declaration -> ID . EQU const_value

    EQU             shift and go to state 24


state 17

    (5) idlist -> ID .

    RPAREN          reduce using rule 5 (idlist -> ID .)
    COMMA           reduce using rule 5 (idlist -> ID .)
    COLON           reduce using rule 5 (idlist -> ID .)


state 18

    (3) program_head -> PROGRAM ID LPAREN idlist . RPAREN
    (4) idlist -> idlist . COMMA ID

    RPAREN          shift and go to state 25
    COMMA           shift and go to state 26


state 19

    (6) program_body -> const_declarations var_declarations subprogram_declarations . compound_statement
    (30) subprogram_declarations -> subprogram_declarations . subprogram SEMI
    (44) compound_statement -> . BEGIN statement_list END
    (32) subprogram -> . subprogram_head SEMI subprogram_body
    (33) subprogram_head -> . PROCEDURE ID formal_parameter
    (34) subprogram_head -> . FUNCTION ID formal_parameter COLON basic_type

    BEGIN           shift and go to state 29
    PROCEDURE       shift and go to state 31
    FUNCTION        shift and go to state 32

    compound_statement             shift and go to state 27
    subprogram                     shift and go to state 28
    subprogram_head                shift and go to state 30

state 20

    (31) subprogram_declarations -> empty .

    BEGIN           reduce using rule 31 (subprogram_declarations -> empty .)
    PROCEDURE       reduce using rule 31 (subprogram_declarations -> empty .)
    FUNCTION        reduce using rule 31 (subprogram_declarations -> empty .)


state 21

    (14) var_declarations -> VAR var_declaration . SEMI
    (17) var_declaration -> var_declaration . SEMI idlist COLON type

    SEMI            shift and go to state 33


state 22

    (16) var_declaration -> idlist . COLON type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 34
    COMMA           shift and go to state 26


state 23

    (7) const_declarations -> CONST const_declaration SEMI .
    (10) const_declaration -> const_declaration SEMI . ID EQU const_value

    VAR             reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    BEGIN           reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    PROCEDURE       reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    FUNCTION        reduce using rule 7 (const_declarations -> CONST const_declaration SEMI .)
    ID              shift and go to state 35


state 24

    (9) const_declaration -> ID EQU . const_value
    (11) const_value -> . ADDOP ICONST
    (12) const_value -> . ICONST
    (13) const_value -> . CCONST

    ADDOP           shift and go to state 37
    ICONST          shift and go to state 38
    CCONST          shift and go to state 39

    const_value                    shift and go to state 36

state 25

    (3) program_head -> PROGRAM ID LPAREN idlist RPAREN .

    SEMI            reduce using rule 3 (program_head -> PROGRAM ID LPAREN idlist RPAREN .)


state 26

    (4) idlist -> idlist COMMA . ID

    ID              shift and go to state 40


state 27

    (6) program_body -> const_declarations var_declarations subprogram_declarations compound_statement .

    DOT             reduce using rule 6 (program_body -> const_declarations var_declarations subprogram_declarations compound_statement .)


state 28

    (30) subprogram_declarations -> subprogram_declarations subprogram . SEMI

    SEMI            shift and go to state 41


state 29

    (44) compound_statement -> BEGIN . statement_list END
    (45) statement_list -> . statement_list SEMI statement
    (46) statement_list -> . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGN expression
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . IF expression THEN statement else_part
    (52) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (53) statement -> . READ LPAREN variable_list RPAREN
    (54) statement -> . WRITE LPAREN expression_list RPAREN
    (80) empty -> .
    (57) variable -> . ID id_varpart
    (60) procedure_call -> . ID
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 48
    FOR             shift and go to state 49
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ID              shift and go to state 50
    BEGIN           shift and go to state 29

    statement_list                 shift and go to state 42
    statement                      shift and go to state 43
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 46
    compound_statement             shift and go to state 47

state 30

    (32) subprogram -> subprogram_head . SEMI subprogram_body

    SEMI            shift and go to state 53


state 31

    (33) subprogram_head -> PROCEDURE . ID formal_parameter

    ID              shift and go to state 54


state 32

    (34) subprogram_head -> FUNCTION . ID formal_parameter COLON basic_type

    ID              shift and go to state 55


state 33

    (14) var_declarations -> VAR var_declaration SEMI .
    (17) var_declaration -> var_declaration SEMI . idlist COLON type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    BEGIN           reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    PROCEDURE       reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    FUNCTION        reduce using rule 14 (var_declarations -> VAR var_declaration SEMI .)
    ID              shift and go to state 17

    idlist                         shift and go to state 56

state 34

    (16) var_declaration -> idlist COLON . type
    (18) type -> . basic_type
    (19) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    ARRAY           shift and go to state 59
    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    type                           shift and go to state 57
    basic_type                     shift and go to state 58

state 35

    (10) const_declaration -> const_declaration SEMI ID . EQU const_value

    EQU             shift and go to state 65


state 36

    (9) const_declaration -> ID EQU const_value .

    SEMI            reduce using rule 9 (const_declaration -> ID EQU const_value .)


state 37

    (11) const_value -> ADDOP . ICONST

    ICONST          shift and go to state 66


state 38

    (12) const_value -> ICONST .

    SEMI            reduce using rule 12 (const_value -> ICONST .)


state 39

    (13) const_value -> CCONST .

    SEMI            reduce using rule 13 (const_value -> CCONST .)


state 40

    (4) idlist -> idlist COMMA ID .

    RPAREN          reduce using rule 4 (idlist -> idlist COMMA ID .)
    COMMA           reduce using rule 4 (idlist -> idlist COMMA ID .)
    COLON           reduce using rule 4 (idlist -> idlist COMMA ID .)


state 41

    (30) subprogram_declarations -> subprogram_declarations subprogram SEMI .

    BEGIN           reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    PROCEDURE       reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)
    FUNCTION        reduce using rule 30 (subprogram_declarations -> subprogram_declarations subprogram SEMI .)


state 42

    (44) compound_statement -> BEGIN statement_list . END
    (45) statement_list -> statement_list . SEMI statement

    END             shift and go to state 67
    SEMI            shift and go to state 68


state 43

    (46) statement_list -> statement .

    END             reduce using rule 46 (statement_list -> statement .)
    SEMI            reduce using rule 46 (statement_list -> statement .)


state 44

    (47) statement -> empty .

    END             reduce using rule 47 (statement -> empty .)
    SEMI            reduce using rule 47 (statement -> empty .)
    ELSE            reduce using rule 47 (statement -> empty .)


state 45

    (48) statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 69


state 46

    (49) statement -> procedure_call .

    END             reduce using rule 49 (statement -> procedure_call .)
    SEMI            reduce using rule 49 (statement -> procedure_call .)
    ELSE            reduce using rule 49 (statement -> procedure_call .)


state 47

    (50) statement -> compound_statement .

    END             reduce using rule 50 (statement -> compound_statement .)
    SEMI            reduce using rule 50 (statement -> compound_statement .)
    ELSE            reduce using rule 50 (statement -> compound_statement .)


state 48

    (51) statement -> IF . expression THEN statement else_part
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression                     shift and go to state 70
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 49

    (52) statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 81


state 50

    (57) variable -> ID . id_varpart
    (60) procedure_call -> ID .
    (61) procedure_call -> ID . LPAREN expression_list RPAREN
    (58) id_varpart -> . LBRACK expression RBRACK
    (59) id_varpart -> . empty
    (80) empty -> .

    END             reduce using rule 60 (procedure_call -> ID .)
    SEMI            reduce using rule 60 (procedure_call -> ID .)
    ELSE            reduce using rule 60 (procedure_call -> ID .)
    LPAREN          shift and go to state 83
    LBRACK          shift and go to state 84
    ASSIGN          reduce using rule 80 (empty -> .)

    id_varpart                     shift and go to state 82
    empty                          shift and go to state 85

state 51

    (53) statement -> READ . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 86


state 52

    (54) statement -> WRITE . LPAREN expression_list RPAREN

    LPAREN          shift and go to state 87


state 53

    (32) subprogram -> subprogram_head SEMI . subprogram_body
    (43) subprogram_body -> . const_declarations var_declarations compound_statement
    (7) const_declarations -> . CONST const_declaration SEMI
    (8) const_declarations -> . empty
    (80) empty -> .

    CONST           shift and go to state 8
    VAR             reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)

    subprogram_body                shift and go to state 88
    const_declarations             shift and go to state 89
    empty                          shift and go to state 9

state 54

    (33) subprogram_head -> PROCEDURE ID . formal_parameter
    (35) formal_parameter -> . LPAREN parameter_list RPAREN
    (36) formal_parameter -> . empty
    (80) empty -> .

    LPAREN          shift and go to state 91
    SEMI            reduce using rule 80 (empty -> .)

    formal_parameter               shift and go to state 90
    empty                          shift and go to state 92

state 55

    (34) subprogram_head -> FUNCTION ID . formal_parameter COLON basic_type
    (35) formal_parameter -> . LPAREN parameter_list RPAREN
    (36) formal_parameter -> . empty
    (80) empty -> .

    LPAREN          shift and go to state 91
    COLON           reduce using rule 80 (empty -> .)

    formal_parameter               shift and go to state 93
    empty                          shift and go to state 92

state 56

    (17) var_declaration -> var_declaration SEMI idlist . COLON type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 94
    COMMA           shift and go to state 26


state 57

    (16) var_declaration -> idlist COLON type .

    SEMI            reduce using rule 16 (var_declaration -> idlist COLON type .)


state 58

    (18) type -> basic_type .

    SEMI            reduce using rule 18 (type -> basic_type .)


state 59

    (19) type -> ARRAY . LBRACK period RBRACK OF basic_type

    LBRACK          shift and go to state 95


state 60

    (20) basic_type -> INTEGER .

    SEMI            reduce using rule 20 (basic_type -> INTEGER .)
    RPAREN          reduce using rule 20 (basic_type -> INTEGER .)


state 61

    (21) basic_type -> REAL .

    SEMI            reduce using rule 21 (basic_type -> REAL .)
    RPAREN          reduce using rule 21 (basic_type -> REAL .)


state 62

    (22) basic_type -> CHAR .

    SEMI            reduce using rule 22 (basic_type -> CHAR .)
    RPAREN          reduce using rule 22 (basic_type -> CHAR .)


state 63

    (23) basic_type -> STRING .

    SEMI            reduce using rule 23 (basic_type -> STRING .)
    RPAREN          reduce using rule 23 (basic_type -> STRING .)


state 64

    (24) basic_type -> BOOLEAN .

    SEMI            reduce using rule 24 (basic_type -> BOOLEAN .)
    RPAREN          reduce using rule 24 (basic_type -> BOOLEAN .)


state 65

    (10) const_declaration -> const_declaration SEMI ID EQU . const_value
    (11) const_value -> . ADDOP ICONST
    (12) const_value -> . ICONST
    (13) const_value -> . CCONST

    ADDOP           shift and go to state 37
    ICONST          shift and go to state 38
    CCONST          shift and go to state 39

    const_value                    shift and go to state 96

state 66

    (11) const_value -> ADDOP ICONST .

    SEMI            reduce using rule 11 (const_value -> ADDOP ICONST .)


state 67

    (44) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    SEMI            reduce using rule 44 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 44 (compound_statement -> BEGIN statement_list END .)


state 68

    (45) statement_list -> statement_list SEMI . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGN expression
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . IF expression THEN statement else_part
    (52) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (53) statement -> . READ LPAREN variable_list RPAREN
    (54) statement -> . WRITE LPAREN expression_list RPAREN
    (80) empty -> .
    (57) variable -> . ID id_varpart
    (60) procedure_call -> . ID
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 48
    FOR             shift and go to state 49
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ID              shift and go to state 50
    BEGIN           shift and go to state 29

    statement                      shift and go to state 97
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 46
    compound_statement             shift and go to state 47

state 69

    (48) statement -> variable ASSIGN . expression
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    variable                       shift and go to state 76
    expression                     shift and go to state 98
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75

state 70

    (51) statement -> IF expression . THEN statement else_part

    THEN            shift and go to state 99


state 71

    (66) expression -> simple_expression . RELOP simple_expression
    (67) expression -> simple_expression . EQU simple_expression
    (68) expression -> simple_expression .
    (69) simple_expression -> simple_expression . ADDOP term

    RELOP           shift and go to state 100
    EQU             shift and go to state 101
    THEN            reduce using rule 68 (expression -> simple_expression .)
    END             reduce using rule 68 (expression -> simple_expression .)
    SEMI            reduce using rule 68 (expression -> simple_expression .)
    ELSE            reduce using rule 68 (expression -> simple_expression .)
    RPAREN          reduce using rule 68 (expression -> simple_expression .)
    COMMA           reduce using rule 68 (expression -> simple_expression .)
    RBRACK          reduce using rule 68 (expression -> simple_expression .)
    TO              reduce using rule 68 (expression -> simple_expression .)
    DO              reduce using rule 68 (expression -> simple_expression .)
    ADDOP           shift and go to state 102


state 72

    (77) factor -> ADDOP . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    factor                         shift and go to state 103
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 73

    (70) simple_expression -> term .
    (71) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 70 (simple_expression -> term .)
    EQU             reduce using rule 70 (simple_expression -> term .)
    ADDOP           reduce using rule 70 (simple_expression -> term .)
    THEN            reduce using rule 70 (simple_expression -> term .)
    END             reduce using rule 70 (simple_expression -> term .)
    SEMI            reduce using rule 70 (simple_expression -> term .)
    ELSE            reduce using rule 70 (simple_expression -> term .)
    RPAREN          reduce using rule 70 (simple_expression -> term .)
    COMMA           reduce using rule 70 (simple_expression -> term .)
    RBRACK          reduce using rule 70 (simple_expression -> term .)
    TO              reduce using rule 70 (simple_expression -> term .)
    DO              reduce using rule 70 (simple_expression -> term .)
    MULDIVANDOP     shift and go to state 104


state 74

    (72) term -> factor .

    MULDIVANDOP     reduce using rule 72 (term -> factor .)
    RELOP           reduce using rule 72 (term -> factor .)
    EQU             reduce using rule 72 (term -> factor .)
    ADDOP           reduce using rule 72 (term -> factor .)
    THEN            reduce using rule 72 (term -> factor .)
    END             reduce using rule 72 (term -> factor .)
    SEMI            reduce using rule 72 (term -> factor .)
    ELSE            reduce using rule 72 (term -> factor .)
    RPAREN          reduce using rule 72 (term -> factor .)
    COMMA           reduce using rule 72 (term -> factor .)
    RBRACK          reduce using rule 72 (term -> factor .)
    TO              reduce using rule 72 (term -> factor .)
    DO              reduce using rule 72 (term -> factor .)


state 75

    (73) factor -> number .

    MULDIVANDOP     reduce using rule 73 (factor -> number .)
    RELOP           reduce using rule 73 (factor -> number .)
    EQU             reduce using rule 73 (factor -> number .)
    ADDOP           reduce using rule 73 (factor -> number .)
    THEN            reduce using rule 73 (factor -> number .)
    END             reduce using rule 73 (factor -> number .)
    SEMI            reduce using rule 73 (factor -> number .)
    ELSE            reduce using rule 73 (factor -> number .)
    RPAREN          reduce using rule 73 (factor -> number .)
    COMMA           reduce using rule 73 (factor -> number .)
    RBRACK          reduce using rule 73 (factor -> number .)
    TO              reduce using rule 73 (factor -> number .)
    DO              reduce using rule 73 (factor -> number .)


state 76

    (74) factor -> variable .

    MULDIVANDOP     reduce using rule 74 (factor -> variable .)
    RELOP           reduce using rule 74 (factor -> variable .)
    EQU             reduce using rule 74 (factor -> variable .)
    ADDOP           reduce using rule 74 (factor -> variable .)
    THEN            reduce using rule 74 (factor -> variable .)
    END             reduce using rule 74 (factor -> variable .)
    SEMI            reduce using rule 74 (factor -> variable .)
    ELSE            reduce using rule 74 (factor -> variable .)
    RPAREN          reduce using rule 74 (factor -> variable .)
    COMMA           reduce using rule 74 (factor -> variable .)
    RBRACK          reduce using rule 74 (factor -> variable .)
    TO              reduce using rule 74 (factor -> variable .)
    DO              reduce using rule 74 (factor -> variable .)


state 77

    (75) factor -> ID . LPAREN expression_list RPAREN
    (57) variable -> ID . id_varpart
    (58) id_varpart -> . LBRACK expression RBRACK
    (59) id_varpart -> . empty
    (80) empty -> .

    LPAREN          shift and go to state 105
    LBRACK          shift and go to state 84
    MULDIVANDOP     reduce using rule 80 (empty -> .)
    RELOP           reduce using rule 80 (empty -> .)
    EQU             reduce using rule 80 (empty -> .)
    ADDOP           reduce using rule 80 (empty -> .)
    THEN            reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ELSE            reduce using rule 80 (empty -> .)
    RPAREN          reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    RBRACK          reduce using rule 80 (empty -> .)
    TO              reduce using rule 80 (empty -> .)
    DO              reduce using rule 80 (empty -> .)

    id_varpart                     shift and go to state 82
    empty                          shift and go to state 85

state 78

    (76) factor -> NOTOP . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    factor                         shift and go to state 106
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 79

    (78) number -> ICONST .

    MULDIVANDOP     reduce using rule 78 (number -> ICONST .)
    RELOP           reduce using rule 78 (number -> ICONST .)
    EQU             reduce using rule 78 (number -> ICONST .)
    ADDOP           reduce using rule 78 (number -> ICONST .)
    THEN            reduce using rule 78 (number -> ICONST .)
    END             reduce using rule 78 (number -> ICONST .)
    SEMI            reduce using rule 78 (number -> ICONST .)
    ELSE            reduce using rule 78 (number -> ICONST .)
    RPAREN          reduce using rule 78 (number -> ICONST .)
    COMMA           reduce using rule 78 (number -> ICONST .)
    RBRACK          reduce using rule 78 (number -> ICONST .)
    TO              reduce using rule 78 (number -> ICONST .)
    DO              reduce using rule 78 (number -> ICONST .)


state 80

    (79) number -> RCONST .

    MULDIVANDOP     reduce using rule 79 (number -> RCONST .)
    RELOP           reduce using rule 79 (number -> RCONST .)
    EQU             reduce using rule 79 (number -> RCONST .)
    ADDOP           reduce using rule 79 (number -> RCONST .)
    THEN            reduce using rule 79 (number -> RCONST .)
    END             reduce using rule 79 (number -> RCONST .)
    SEMI            reduce using rule 79 (number -> RCONST .)
    ELSE            reduce using rule 79 (number -> RCONST .)
    RPAREN          reduce using rule 79 (number -> RCONST .)
    COMMA           reduce using rule 79 (number -> RCONST .)
    RBRACK          reduce using rule 79 (number -> RCONST .)
    TO              reduce using rule 79 (number -> RCONST .)
    DO              reduce using rule 79 (number -> RCONST .)


state 81

    (52) statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 107


state 82

    (57) variable -> ID id_varpart .

    ASSIGN          reduce using rule 57 (variable -> ID id_varpart .)
    MULDIVANDOP     reduce using rule 57 (variable -> ID id_varpart .)
    RELOP           reduce using rule 57 (variable -> ID id_varpart .)
    EQU             reduce using rule 57 (variable -> ID id_varpart .)
    ADDOP           reduce using rule 57 (variable -> ID id_varpart .)
    THEN            reduce using rule 57 (variable -> ID id_varpart .)
    END             reduce using rule 57 (variable -> ID id_varpart .)
    SEMI            reduce using rule 57 (variable -> ID id_varpart .)
    ELSE            reduce using rule 57 (variable -> ID id_varpart .)
    RPAREN          reduce using rule 57 (variable -> ID id_varpart .)
    COMMA           reduce using rule 57 (variable -> ID id_varpart .)
    RBRACK          reduce using rule 57 (variable -> ID id_varpart .)
    TO              reduce using rule 57 (variable -> ID id_varpart .)
    DO              reduce using rule 57 (variable -> ID id_varpart .)


state 83

    (61) procedure_call -> ID LPAREN . expression_list RPAREN
    (64) expression_list -> . expression_list COMMA expression
    (65) expression_list -> . expression
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression_list                shift and go to state 108
    expression                     shift and go to state 109
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 84

    (58) id_varpart -> LBRACK . expression RBRACK
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression                     shift and go to state 110
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 85

    (59) id_varpart -> empty .

    ASSIGN          reduce using rule 59 (id_varpart -> empty .)
    MULDIVANDOP     reduce using rule 59 (id_varpart -> empty .)
    RELOP           reduce using rule 59 (id_varpart -> empty .)
    EQU             reduce using rule 59 (id_varpart -> empty .)
    ADDOP           reduce using rule 59 (id_varpart -> empty .)
    THEN            reduce using rule 59 (id_varpart -> empty .)
    END             reduce using rule 59 (id_varpart -> empty .)
    SEMI            reduce using rule 59 (id_varpart -> empty .)
    ELSE            reduce using rule 59 (id_varpart -> empty .)
    RPAREN          reduce using rule 59 (id_varpart -> empty .)
    COMMA           reduce using rule 59 (id_varpart -> empty .)
    RBRACK          reduce using rule 59 (id_varpart -> empty .)
    TO              reduce using rule 59 (id_varpart -> empty .)
    DO              reduce using rule 59 (id_varpart -> empty .)


state 86

    (53) statement -> READ LPAREN . variable_list RPAREN
    (55) variable_list -> . variable_list COMMA variable
    (56) variable_list -> . variable
    (57) variable -> . ID id_varpart

    ID              shift and go to state 113

    variable_list                  shift and go to state 111
    variable                       shift and go to state 112

state 87

    (54) statement -> WRITE LPAREN . expression_list RPAREN
    (64) expression_list -> . expression_list COMMA expression
    (65) expression_list -> . expression
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression_list                shift and go to state 114
    expression                     shift and go to state 109
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 88

    (32) subprogram -> subprogram_head SEMI subprogram_body .

    SEMI            reduce using rule 32 (subprogram -> subprogram_head SEMI subprogram_body .)


state 89

    (43) subprogram_body -> const_declarations . var_declarations compound_statement
    (14) var_declarations -> . VAR var_declaration SEMI
    (15) var_declarations -> . empty
    (80) empty -> .

    VAR             shift and go to state 13
    BEGIN           reduce using rule 80 (empty -> .)

    var_declarations               shift and go to state 115
    empty                          shift and go to state 14

state 90

    (33) subprogram_head -> PROCEDURE ID formal_parameter .

    SEMI            reduce using rule 33 (subprogram_head -> PROCEDURE ID formal_parameter .)


state 91

    (35) formal_parameter -> LPAREN . parameter_list RPAREN
    (37) parameter_list -> . parameter_list SEMI parameter
    (38) parameter_list -> . parameter
    (39) parameter -> . var_parameter
    (40) parameter -> . value_parameter
    (41) var_parameter -> . VAR value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    VAR             shift and go to state 120
    ID              shift and go to state 17

    parameter_list                 shift and go to state 116
    parameter                      shift and go to state 117
    var_parameter                  shift and go to state 118
    value_parameter                shift and go to state 119
    idlist                         shift and go to state 121

state 92

    (36) formal_parameter -> empty .

    SEMI            reduce using rule 36 (formal_parameter -> empty .)
    COLON           reduce using rule 36 (formal_parameter -> empty .)


state 93

    (34) subprogram_head -> FUNCTION ID formal_parameter . COLON basic_type

    COLON           shift and go to state 122


state 94

    (17) var_declaration -> var_declaration SEMI idlist COLON . type
    (18) type -> . basic_type
    (19) type -> . ARRAY LBRACK period RBRACK OF basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    ARRAY           shift and go to state 59
    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    type                           shift and go to state 123
    basic_type                     shift and go to state 58

state 95

    (19) type -> ARRAY LBRACK . period RBRACK OF basic_type
    (28) period -> . my_period_part DOTDOT my_period_part
    (29) period -> . period COMMA my_period_part DOTDOT my_period_part
    (25) my_period_part -> . ADDOP ICONST
    (26) my_period_part -> . ICONST
    (27) my_period_part -> . CCONST

    ADDOP           shift and go to state 126
    ICONST          shift and go to state 127
    CCONST          shift and go to state 128

    period                         shift and go to state 124
    my_period_part                 shift and go to state 125

state 96

    (10) const_declaration -> const_declaration SEMI ID EQU const_value .

    SEMI            reduce using rule 10 (const_declaration -> const_declaration SEMI ID EQU const_value .)


state 97

    (45) statement_list -> statement_list SEMI statement .

    END             reduce using rule 45 (statement_list -> statement_list SEMI statement .)
    SEMI            reduce using rule 45 (statement_list -> statement_list SEMI statement .)


state 98

    (48) statement -> variable ASSIGN expression .

    END             reduce using rule 48 (statement -> variable ASSIGN expression .)
    SEMI            reduce using rule 48 (statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 48 (statement -> variable ASSIGN expression .)


state 99

    (51) statement -> IF expression THEN . statement else_part
    (47) statement -> . empty
    (48) statement -> . variable ASSIGN expression
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . IF expression THEN statement else_part
    (52) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (53) statement -> . READ LPAREN variable_list RPAREN
    (54) statement -> . WRITE LPAREN expression_list RPAREN
    (80) empty -> .
    (57) variable -> . ID id_varpart
    (60) procedure_call -> . ID
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 48
    FOR             shift and go to state 49
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ID              shift and go to state 50
    BEGIN           shift and go to state 29

    statement                      shift and go to state 129
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 46
    compound_statement             shift and go to state 47

state 100

    (66) expression -> simple_expression RELOP . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    simple_expression              shift and go to state 130
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 101

    (67) expression -> simple_expression EQU . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    simple_expression              shift and go to state 131
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 102

    (69) simple_expression -> simple_expression ADDOP . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    term                           shift and go to state 132
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 103

    (77) factor -> ADDOP factor .

    MULDIVANDOP     reduce using rule 77 (factor -> ADDOP factor .)
    RELOP           reduce using rule 77 (factor -> ADDOP factor .)
    EQU             reduce using rule 77 (factor -> ADDOP factor .)
    ADDOP           reduce using rule 77 (factor -> ADDOP factor .)
    THEN            reduce using rule 77 (factor -> ADDOP factor .)
    END             reduce using rule 77 (factor -> ADDOP factor .)
    SEMI            reduce using rule 77 (factor -> ADDOP factor .)
    ELSE            reduce using rule 77 (factor -> ADDOP factor .)
    RPAREN          reduce using rule 77 (factor -> ADDOP factor .)
    COMMA           reduce using rule 77 (factor -> ADDOP factor .)
    RBRACK          reduce using rule 77 (factor -> ADDOP factor .)
    TO              reduce using rule 77 (factor -> ADDOP factor .)
    DO              reduce using rule 77 (factor -> ADDOP factor .)


state 104

    (71) term -> term MULDIVANDOP . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    factor                         shift and go to state 133
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 105

    (75) factor -> ID LPAREN . expression_list RPAREN
    (64) expression_list -> . expression_list COMMA expression
    (65) expression_list -> . expression
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression_list                shift and go to state 134
    expression                     shift and go to state 109
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 106

    (76) factor -> NOTOP factor .

    MULDIVANDOP     reduce using rule 76 (factor -> NOTOP factor .)
    RELOP           reduce using rule 76 (factor -> NOTOP factor .)
    EQU             reduce using rule 76 (factor -> NOTOP factor .)
    ADDOP           reduce using rule 76 (factor -> NOTOP factor .)
    THEN            reduce using rule 76 (factor -> NOTOP factor .)
    END             reduce using rule 76 (factor -> NOTOP factor .)
    SEMI            reduce using rule 76 (factor -> NOTOP factor .)
    ELSE            reduce using rule 76 (factor -> NOTOP factor .)
    RPAREN          reduce using rule 76 (factor -> NOTOP factor .)
    COMMA           reduce using rule 76 (factor -> NOTOP factor .)
    RBRACK          reduce using rule 76 (factor -> NOTOP factor .)
    TO              reduce using rule 76 (factor -> NOTOP factor .)
    DO              reduce using rule 76 (factor -> NOTOP factor .)


state 107

    (52) statement -> FOR ID ASSIGN . expression TO expression DO statement
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression                     shift and go to state 135
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 108

    (61) procedure_call -> ID LPAREN expression_list . RPAREN
    (64) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 137


state 109

    (65) expression_list -> expression .

    RPAREN          reduce using rule 65 (expression_list -> expression .)
    COMMA           reduce using rule 65 (expression_list -> expression .)


state 110

    (58) id_varpart -> LBRACK expression . RBRACK

    RBRACK          shift and go to state 138


state 111

    (53) statement -> READ LPAREN variable_list . RPAREN
    (55) variable_list -> variable_list . COMMA variable

    RPAREN          shift and go to state 139
    COMMA           shift and go to state 140


state 112

    (56) variable_list -> variable .

    RPAREN          reduce using rule 56 (variable_list -> variable .)
    COMMA           reduce using rule 56 (variable_list -> variable .)


state 113

    (57) variable -> ID . id_varpart
    (58) id_varpart -> . LBRACK expression RBRACK
    (59) id_varpart -> . empty
    (80) empty -> .

    LBRACK          shift and go to state 84
    RPAREN          reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)

    id_varpart                     shift and go to state 82
    empty                          shift and go to state 85

state 114

    (54) statement -> WRITE LPAREN expression_list . RPAREN
    (64) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 137


state 115

    (43) subprogram_body -> const_declarations var_declarations . compound_statement
    (44) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 29

    compound_statement             shift and go to state 142

state 116

    (35) formal_parameter -> LPAREN parameter_list . RPAREN
    (37) parameter_list -> parameter_list . SEMI parameter

    RPAREN          shift and go to state 143
    SEMI            shift and go to state 144


state 117

    (38) parameter_list -> parameter .

    RPAREN          reduce using rule 38 (parameter_list -> parameter .)
    SEMI            reduce using rule 38 (parameter_list -> parameter .)


state 118

    (39) parameter -> var_parameter .

    RPAREN          reduce using rule 39 (parameter -> var_parameter .)
    SEMI            reduce using rule 39 (parameter -> var_parameter .)


state 119

    (40) parameter -> value_parameter .

    RPAREN          reduce using rule 40 (parameter -> value_parameter .)
    SEMI            reduce using rule 40 (parameter -> value_parameter .)


state 120

    (41) var_parameter -> VAR . value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    ID              shift and go to state 17

    value_parameter                shift and go to state 145
    idlist                         shift and go to state 121

state 121

    (42) value_parameter -> idlist . COLON basic_type
    (4) idlist -> idlist . COMMA ID

    COLON           shift and go to state 146
    COMMA           shift and go to state 26


state 122

    (34) subprogram_head -> FUNCTION ID formal_parameter COLON . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 147

state 123

    (17) var_declaration -> var_declaration SEMI idlist COLON type .

    SEMI            reduce using rule 17 (var_declaration -> var_declaration SEMI idlist COLON type .)


state 124

    (19) type -> ARRAY LBRACK period . RBRACK OF basic_type
    (29) period -> period . COMMA my_period_part DOTDOT my_period_part

    RBRACK          shift and go to state 148
    COMMA           shift and go to state 149


state 125

    (28) period -> my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 150


state 126

    (25) my_period_part -> ADDOP . ICONST

    ICONST          shift and go to state 151


state 127

    (26) my_period_part -> ICONST .

    DOTDOT          reduce using rule 26 (my_period_part -> ICONST .)
    RBRACK          reduce using rule 26 (my_period_part -> ICONST .)
    COMMA           reduce using rule 26 (my_period_part -> ICONST .)


state 128

    (27) my_period_part -> CCONST .

    DOTDOT          reduce using rule 27 (my_period_part -> CCONST .)
    RBRACK          reduce using rule 27 (my_period_part -> CCONST .)
    COMMA           reduce using rule 27 (my_period_part -> CCONST .)


state 129

    (51) statement -> IF expression THEN statement . else_part
    (62) else_part -> . ELSE statement
    (63) else_part -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 153
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)

  ! ELSE            [ reduce using rule 80 (empty -> .) ]

    else_part                      shift and go to state 152
    empty                          shift and go to state 154

state 130

    (66) expression -> simple_expression RELOP simple_expression .
    (69) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    END             reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    SEMI            reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    ELSE            reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    RPAREN          reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    COMMA           reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    RBRACK          reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    TO              reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    DO              reduce using rule 66 (expression -> simple_expression RELOP simple_expression .)
    ADDOP           shift and go to state 102


state 131

    (67) expression -> simple_expression EQU simple_expression .
    (69) simple_expression -> simple_expression . ADDOP term

    THEN            reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    END             reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    SEMI            reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    ELSE            reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    RPAREN          reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    COMMA           reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    RBRACK          reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    TO              reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    DO              reduce using rule 67 (expression -> simple_expression EQU simple_expression .)
    ADDOP           shift and go to state 102


state 132

    (69) simple_expression -> simple_expression ADDOP term .
    (71) term -> term . MULDIVANDOP factor

    RELOP           reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    EQU             reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    ADDOP           reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    THEN            reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    END             reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    SEMI            reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    ELSE            reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    RPAREN          reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    COMMA           reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    RBRACK          reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    TO              reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    DO              reduce using rule 69 (simple_expression -> simple_expression ADDOP term .)
    MULDIVANDOP     shift and go to state 104


state 133

    (71) term -> term MULDIVANDOP factor .

    MULDIVANDOP     reduce using rule 71 (term -> term MULDIVANDOP factor .)
    RELOP           reduce using rule 71 (term -> term MULDIVANDOP factor .)
    EQU             reduce using rule 71 (term -> term MULDIVANDOP factor .)
    ADDOP           reduce using rule 71 (term -> term MULDIVANDOP factor .)
    THEN            reduce using rule 71 (term -> term MULDIVANDOP factor .)
    END             reduce using rule 71 (term -> term MULDIVANDOP factor .)
    SEMI            reduce using rule 71 (term -> term MULDIVANDOP factor .)
    ELSE            reduce using rule 71 (term -> term MULDIVANDOP factor .)
    RPAREN          reduce using rule 71 (term -> term MULDIVANDOP factor .)
    COMMA           reduce using rule 71 (term -> term MULDIVANDOP factor .)
    RBRACK          reduce using rule 71 (term -> term MULDIVANDOP factor .)
    TO              reduce using rule 71 (term -> term MULDIVANDOP factor .)
    DO              reduce using rule 71 (term -> term MULDIVANDOP factor .)


state 134

    (75) factor -> ID LPAREN expression_list . RPAREN
    (64) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 137


state 135

    (52) statement -> FOR ID ASSIGN expression . TO expression DO statement

    TO              shift and go to state 156


state 136

    (61) procedure_call -> ID LPAREN expression_list RPAREN .

    END             reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 61 (procedure_call -> ID LPAREN expression_list RPAREN .)


state 137

    (64) expression_list -> expression_list COMMA . expression
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression                     shift and go to state 157
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 138

    (58) id_varpart -> LBRACK expression RBRACK .

    ASSIGN          reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    MULDIVANDOP     reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    RELOP           reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    EQU             reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    ADDOP           reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    THEN            reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    END             reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    SEMI            reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    ELSE            reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    RPAREN          reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    COMMA           reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    RBRACK          reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    TO              reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)
    DO              reduce using rule 58 (id_varpart -> LBRACK expression RBRACK .)


state 139

    (53) statement -> READ LPAREN variable_list RPAREN .

    END             reduce using rule 53 (statement -> READ LPAREN variable_list RPAREN .)
    SEMI            reduce using rule 53 (statement -> READ LPAREN variable_list RPAREN .)
    ELSE            reduce using rule 53 (statement -> READ LPAREN variable_list RPAREN .)


state 140

    (55) variable_list -> variable_list COMMA . variable
    (57) variable -> . ID id_varpart

    ID              shift and go to state 113

    variable                       shift and go to state 158

state 141

    (54) statement -> WRITE LPAREN expression_list RPAREN .

    END             reduce using rule 54 (statement -> WRITE LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 54 (statement -> WRITE LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 54 (statement -> WRITE LPAREN expression_list RPAREN .)


state 142

    (43) subprogram_body -> const_declarations var_declarations compound_statement .

    SEMI            reduce using rule 43 (subprogram_body -> const_declarations var_declarations compound_statement .)


state 143

    (35) formal_parameter -> LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 35 (formal_parameter -> LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 35 (formal_parameter -> LPAREN parameter_list RPAREN .)


state 144

    (37) parameter_list -> parameter_list SEMI . parameter
    (39) parameter -> . var_parameter
    (40) parameter -> . value_parameter
    (41) var_parameter -> . VAR value_parameter
    (42) value_parameter -> . idlist COLON basic_type
    (4) idlist -> . idlist COMMA ID
    (5) idlist -> . ID

    VAR             shift and go to state 120
    ID              shift and go to state 17

    parameter                      shift and go to state 159
    var_parameter                  shift and go to state 118
    value_parameter                shift and go to state 119
    idlist                         shift and go to state 121

state 145

    (41) var_parameter -> VAR value_parameter .

    RPAREN          reduce using rule 41 (var_parameter -> VAR value_parameter .)
    SEMI            reduce using rule 41 (var_parameter -> VAR value_parameter .)


state 146

    (42) value_parameter -> idlist COLON . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 160

state 147

    (34) subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .

    SEMI            reduce using rule 34 (subprogram_head -> FUNCTION ID formal_parameter COLON basic_type .)


state 148

    (19) type -> ARRAY LBRACK period RBRACK . OF basic_type

    OF              shift and go to state 161


state 149

    (29) period -> period COMMA . my_period_part DOTDOT my_period_part
    (25) my_period_part -> . ADDOP ICONST
    (26) my_period_part -> . ICONST
    (27) my_period_part -> . CCONST

    ADDOP           shift and go to state 126
    ICONST          shift and go to state 127
    CCONST          shift and go to state 128

    my_period_part                 shift and go to state 162

state 150

    (28) period -> my_period_part DOTDOT . my_period_part
    (25) my_period_part -> . ADDOP ICONST
    (26) my_period_part -> . ICONST
    (27) my_period_part -> . CCONST

    ADDOP           shift and go to state 126
    ICONST          shift and go to state 127
    CCONST          shift and go to state 128

    my_period_part                 shift and go to state 163

state 151

    (25) my_period_part -> ADDOP ICONST .

    DOTDOT          reduce using rule 25 (my_period_part -> ADDOP ICONST .)
    RBRACK          reduce using rule 25 (my_period_part -> ADDOP ICONST .)
    COMMA           reduce using rule 25 (my_period_part -> ADDOP ICONST .)


state 152

    (51) statement -> IF expression THEN statement else_part .

    END             reduce using rule 51 (statement -> IF expression THEN statement else_part .)
    SEMI            reduce using rule 51 (statement -> IF expression THEN statement else_part .)
    ELSE            reduce using rule 51 (statement -> IF expression THEN statement else_part .)


state 153

    (62) else_part -> ELSE . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGN expression
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . IF expression THEN statement else_part
    (52) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (53) statement -> . READ LPAREN variable_list RPAREN
    (54) statement -> . WRITE LPAREN expression_list RPAREN
    (80) empty -> .
    (57) variable -> . ID id_varpart
    (60) procedure_call -> . ID
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 48
    FOR             shift and go to state 49
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ID              shift and go to state 50
    BEGIN           shift and go to state 29

    statement                      shift and go to state 164
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 46
    compound_statement             shift and go to state 47

state 154

    (63) else_part -> empty .

    ELSE            reduce using rule 63 (else_part -> empty .)
    END             reduce using rule 63 (else_part -> empty .)
    SEMI            reduce using rule 63 (else_part -> empty .)


state 155

    (75) factor -> ID LPAREN expression_list RPAREN .

    MULDIVANDOP     reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    RELOP           reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    EQU             reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    ADDOP           reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    THEN            reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    SEMI            reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    RBRACK          reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 75 (factor -> ID LPAREN expression_list RPAREN .)


state 156

    (52) statement -> FOR ID ASSIGN expression TO . expression DO statement
    (66) expression -> . simple_expression RELOP simple_expression
    (67) expression -> . simple_expression EQU simple_expression
    (68) expression -> . simple_expression
    (69) simple_expression -> . simple_expression ADDOP term
    (70) simple_expression -> . term
    (71) term -> . term MULDIVANDOP factor
    (72) term -> . factor
    (73) factor -> . number
    (74) factor -> . variable
    (75) factor -> . ID LPAREN expression_list RPAREN
    (76) factor -> . NOTOP factor
    (77) factor -> . ADDOP factor
    (78) number -> . ICONST
    (79) number -> . RCONST
    (57) variable -> . ID id_varpart

    ID              shift and go to state 77
    NOTOP           shift and go to state 78
    ADDOP           shift and go to state 72
    ICONST          shift and go to state 79
    RCONST          shift and go to state 80

    expression                     shift and go to state 165
    simple_expression              shift and go to state 71
    term                           shift and go to state 73
    factor                         shift and go to state 74
    number                         shift and go to state 75
    variable                       shift and go to state 76

state 157

    (64) expression_list -> expression_list COMMA expression .

    RPAREN          reduce using rule 64 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 64 (expression_list -> expression_list COMMA expression .)


state 158

    (55) variable_list -> variable_list COMMA variable .

    RPAREN          reduce using rule 55 (variable_list -> variable_list COMMA variable .)
    COMMA           reduce using rule 55 (variable_list -> variable_list COMMA variable .)


state 159

    (37) parameter_list -> parameter_list SEMI parameter .

    RPAREN          reduce using rule 37 (parameter_list -> parameter_list SEMI parameter .)
    SEMI            reduce using rule 37 (parameter_list -> parameter_list SEMI parameter .)


state 160

    (42) value_parameter -> idlist COLON basic_type .

    RPAREN          reduce using rule 42 (value_parameter -> idlist COLON basic_type .)
    SEMI            reduce using rule 42 (value_parameter -> idlist COLON basic_type .)


state 161

    (19) type -> ARRAY LBRACK period RBRACK OF . basic_type
    (20) basic_type -> . INTEGER
    (21) basic_type -> . REAL
    (22) basic_type -> . CHAR
    (23) basic_type -> . STRING
    (24) basic_type -> . BOOLEAN

    INTEGER         shift and go to state 60
    REAL            shift and go to state 61
    CHAR            shift and go to state 62
    STRING          shift and go to state 63
    BOOLEAN         shift and go to state 64

    basic_type                     shift and go to state 166

state 162

    (29) period -> period COMMA my_period_part . DOTDOT my_period_part

    DOTDOT          shift and go to state 167


state 163

    (28) period -> my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 28 (period -> my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 28 (period -> my_period_part DOTDOT my_period_part .)


state 164

    (62) else_part -> ELSE statement .

    ELSE            reduce using rule 62 (else_part -> ELSE statement .)
    END             reduce using rule 62 (else_part -> ELSE statement .)
    SEMI            reduce using rule 62 (else_part -> ELSE statement .)


state 165

    (52) statement -> FOR ID ASSIGN expression TO expression . DO statement

    DO              shift and go to state 168


state 166

    (19) type -> ARRAY LBRACK period RBRACK OF basic_type .

    SEMI            reduce using rule 19 (type -> ARRAY LBRACK period RBRACK OF basic_type .)


state 167

    (29) period -> period COMMA my_period_part DOTDOT . my_period_part
    (25) my_period_part -> . ADDOP ICONST
    (26) my_period_part -> . ICONST
    (27) my_period_part -> . CCONST

    ADDOP           shift and go to state 126
    ICONST          shift and go to state 127
    CCONST          shift and go to state 128

    my_period_part                 shift and go to state 169

state 168

    (52) statement -> FOR ID ASSIGN expression TO expression DO . statement
    (47) statement -> . empty
    (48) statement -> . variable ASSIGN expression
    (49) statement -> . procedure_call
    (50) statement -> . compound_statement
    (51) statement -> . IF expression THEN statement else_part
    (52) statement -> . FOR ID ASSIGN expression TO expression DO statement
    (53) statement -> . READ LPAREN variable_list RPAREN
    (54) statement -> . WRITE LPAREN expression_list RPAREN
    (80) empty -> .
    (57) variable -> . ID id_varpart
    (60) procedure_call -> . ID
    (61) procedure_call -> . ID LPAREN expression_list RPAREN
    (44) compound_statement -> . BEGIN statement_list END

    IF              shift and go to state 48
    FOR             shift and go to state 49
    READ            shift and go to state 51
    WRITE           shift and go to state 52
    ELSE            reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    SEMI            reduce using rule 80 (empty -> .)
    ID              shift and go to state 50
    BEGIN           shift and go to state 29

    statement                      shift and go to state 170
    empty                          shift and go to state 44
    variable                       shift and go to state 45
    procedure_call                 shift and go to state 46
    compound_statement             shift and go to state 47

state 169

    (29) period -> period COMMA my_period_part DOTDOT my_period_part .

    RBRACK          reduce using rule 29 (period -> period COMMA my_period_part DOTDOT my_period_part .)
    COMMA           reduce using rule 29 (period -> period COMMA my_period_part DOTDOT my_period_part .)


state 170

    (52) statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 52 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    SEMI            reduce using rule 52 (statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 52 (statement -> FOR ID ASSIGN expression TO expression DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 129 resolved as shift
