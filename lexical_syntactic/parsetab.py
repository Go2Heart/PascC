
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftELSEleftLPARENLBRACKrightASSIGNADDOP ARRAY ASSIGN BCONST BEGIN BOOLEAN CCONST CHAR COLON COMMA CONST DO DOT DOTDOT DOWNTO ELSE END EOF EQU FOR FORWARD FUNCTION ICONST ID IF INOP INTEGER LBRACK LCURL LPAREN MULDIVANDOP NOTOP OF OROP PROCEDURE PROGRAM RBRACK RCONST RCURL READ REAL RECORD RELOP RPAREN SEMI SET STRING THEN TO TYPE VAR WHILE WITH WRITEprogram : program_head SEMI program_body DOTprogram_head : PROGRAM ID \n                        | PROGRAM ID LPAREN idlist RPARENidlist : idlist COMMA ID\n                  | IDprogram_body : const_declarations var_declarations subprogram_declarations compound_statementconst_declarations : CONST const_declaration SEMI\n                              | emptyconst_declaration : ID EQU const_value \n                             | const_declaration SEMI ID EQU const_valueconst_value : ADDOP ICONST\n                       | ICONST\n                       | CCONSTvar_declarations : VAR var_declaration SEMI\n                            | emptyvar_declaration : idlist COLON type\n                           | var_declaration SEMI idlist COLON typetype : basic_type\n                | ARRAY LBRACK period RBRACK OF basic_typebasic_type : INTEGER\n                      | REAL\n                      | CHAR\n                      | STRING\n                      | BOOLEANmy_period_part : ADDOP ICONST\n                          | ICONST\n                          | CCONSTperiod : my_period_part DOTDOT my_period_part\n                  | period COMMA my_period_part DOTDOT my_period_partsubprogram_declarations : subprogram_declarations subprogram SEMI\n                                   | emptysubprogram : subprogram_head SEMI subprogram_bodysubprogram_head : PROCEDURE ID formal_parameter\n                           | FUNCTION ID formal_parameter COLON basic_typeformal_parameter : LPAREN parameter_list RPAREN\n                            | emptyparameter_list : parameter_list SEMI parameter\n                          | parameterparameter : var_parameter\n                     | value_parametervar_parameter : VAR value_parametervalue_parameter : idlist COLON basic_typesubprogram_body : const_declarations var_declarations compound_statementcompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMI statement\n                          | statementstatement : empty\n                     | variable ASSIGN expression\n                     | procedure_call\n                     | compound_statement\n                     | IF expression THEN statement else_part\n                     | FOR ID ASSIGN expression TO expression DO statement\n                     | READ LPAREN variable_list RPAREN\n                     | WRITE LPAREN expression_list RPARENvariable_list : variable_list COMMA variable\n                         | variablevariable : ID id_varpartid_varpart : LBRACK expression RBRACK\n                      | emptyprocedure_call : ID\n                          | ID LPAREN expression_list RPARENelse_part : ELSE statement\n                     | emptyexpression_list : expression_list COMMA expression\n                           | expressionexpression : simple_expression RELOP simple_expression\n                      | simple_expression EQU simple_expression\n                      | simple_expressionsimple_expression : simple_expression ADDOP term\n                             | termterm : term MULDIVANDOP factor\n                | factorfactor : number\n                  | variable\n                  | ID LPAREN expression_list RPAREN\n                  | NOTOP factor\n                  | ADDOP factornumber : ICONST\n                  | RCONSTempty :'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,11,],[0,-1,]),'SEMI':([2,5,15,21,25,28,29,30,36,38,39,42,43,44,46,47,50,54,57,58,60,61,62,63,64,66,67,68,71,73,74,75,76,77,79,80,82,85,88,90,92,96,97,98,99,103,106,116,117,118,119,123,129,130,131,132,133,136,138,139,141,142,143,145,147,152,153,154,155,159,160,164,166,168,170,],[4,-2,23,33,-3,41,-80,53,-9,-12,-13,68,-46,-47,-49,-50,-60,-80,-16,-18,-20,-21,-22,-23,-24,-11,-44,-80,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-32,-33,-36,-10,-45,-48,-80,-77,-76,144,-38,-39,-40,-17,-80,-66,-67,-69,-71,-61,-58,-53,-54,-43,-35,-41,-34,-51,-80,-63,-75,-37,-42,-62,-19,-80,-52,]),'ID':([3,8,10,13,23,26,29,31,32,33,48,49,68,69,72,78,83,84,86,87,91,99,100,101,102,104,105,107,120,137,140,144,153,156,168,],[5,16,17,17,35,40,50,54,55,17,77,81,50,77,77,77,77,77,113,77,17,50,77,77,77,77,77,77,17,77,113,17,50,77,50,]),'CONST':([4,53,],[8,8,]),'VAR':([4,7,9,23,53,89,91,144,],[-80,13,-8,-7,-80,13,120,120,]),'BEGIN':([4,7,9,12,14,19,20,23,29,33,41,53,68,89,99,115,153,168,],[-80,-80,-8,-80,-15,29,-31,-7,29,-14,-30,-80,29,-80,29,29,29,29,]),'PROCEDURE':([4,7,9,12,14,19,20,23,33,41,],[-80,-80,-8,-80,-15,31,-31,-7,-14,-30,]),'FUNCTION':([4,7,9,12,14,19,20,23,33,41,],[-80,-80,-8,-80,-15,32,-31,-7,-14,-30,]),'LPAREN':([5,50,51,52,54,55,77,],[10,83,86,87,91,91,105,]),'DOT':([6,27,67,],[11,-6,-44,]),'EQU':([16,35,71,73,74,75,76,77,79,80,82,85,103,106,132,133,138,155,],[24,65,101,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,-69,-71,-58,-75,]),'RPAREN':([17,18,40,60,61,62,63,64,71,73,74,75,76,77,79,80,82,85,103,106,108,109,111,112,113,114,116,117,118,119,130,131,132,133,134,138,145,155,157,158,159,160,],[-5,25,-4,-20,-21,-22,-23,-24,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,136,-65,139,-56,-80,141,143,-38,-39,-40,-66,-67,-69,-71,155,-58,-41,-75,-64,-55,-37,-42,]),'COMMA':([17,18,22,40,56,71,73,74,75,76,77,79,80,82,85,103,106,108,109,111,112,113,114,121,124,127,128,130,131,132,133,134,138,151,155,157,158,163,169,],[-5,26,26,-4,26,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,137,-65,140,-56,-80,137,26,149,-26,-27,-66,-67,-69,-71,137,-58,-25,-75,-64,-55,-28,-29,]),'COLON':([17,22,40,55,56,92,93,121,143,],[-5,34,-4,-80,94,-36,122,146,-35,]),'ADDOP':([24,48,65,69,71,72,73,74,75,76,77,78,79,80,82,83,84,85,87,95,100,101,102,103,104,105,106,107,130,131,132,133,137,138,149,150,155,156,167,],[37,72,37,72,102,72,-70,-72,-73,-74,-80,72,-78,-79,-57,72,72,-59,72,126,72,72,72,-77,72,72,-76,72,102,102,-69,-71,72,-58,126,126,-75,72,126,]),'ICONST':([24,37,48,65,69,72,78,83,84,87,95,100,101,102,104,105,107,126,137,149,150,156,167,],[38,66,79,38,79,79,79,79,79,79,127,79,79,79,79,79,79,151,79,127,127,79,127,]),'CCONST':([24,65,95,149,150,167,],[39,39,128,128,128,128,]),'IF':([29,68,99,153,168,],[48,48,48,48,48,]),'FOR':([29,68,99,153,168,],[49,49,49,49,49,]),'READ':([29,68,99,153,168,],[51,51,51,51,51,]),'WRITE':([29,68,99,153,168,],[52,52,52,52,52,]),'END':([29,42,43,44,46,47,50,67,68,71,73,74,75,76,77,79,80,82,85,97,98,99,103,106,129,130,131,132,133,136,138,139,141,152,153,154,155,164,168,170,],[-80,67,-46,-47,-49,-50,-60,-44,-80,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-45,-48,-80,-77,-76,-80,-66,-67,-69,-71,-61,-58,-53,-54,-51,-80,-63,-75,-62,-80,-52,]),'ARRAY':([34,94,],[59,59,]),'INTEGER':([34,94,122,146,161,],[60,60,60,60,60,]),'REAL':([34,94,122,146,161,],[61,61,61,61,61,]),'CHAR':([34,94,122,146,161,],[62,62,62,62,62,]),'STRING':([34,94,122,146,161,],[63,63,63,63,63,]),'BOOLEAN':([34,94,122,146,161,],[64,64,64,64,64,]),'ELSE':([44,46,47,50,67,71,73,74,75,76,77,79,80,82,85,98,99,103,106,129,130,131,132,133,136,138,139,141,152,153,154,155,164,168,170,],[-47,-49,-50,-60,-44,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-48,-80,-77,-76,153,-66,-67,-69,-71,-61,-58,-53,-54,-51,-80,-63,-75,-62,-80,-52,]),'ASSIGN':([45,50,81,82,85,138,],[69,-80,107,-57,-59,-58,]),'NOTOP':([48,69,72,78,83,84,87,100,101,102,104,105,107,137,156,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'RCONST':([48,69,72,78,83,84,87,100,101,102,104,105,107,137,156,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'LBRACK':([50,59,77,113,],[84,95,84,84,]),'THEN':([70,71,73,74,75,76,77,79,80,82,85,103,106,130,131,132,133,138,155,],[99,-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,-66,-67,-69,-71,-58,-75,]),'RELOP':([71,73,74,75,76,77,79,80,82,85,103,106,132,133,138,155,],[100,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,-69,-71,-58,-75,]),'RBRACK':([71,73,74,75,76,77,79,80,82,85,103,106,110,124,127,128,130,131,132,133,138,151,155,163,169,],[-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,138,148,-26,-27,-66,-67,-69,-71,-58,-25,-75,-28,-29,]),'TO':([71,73,74,75,76,77,79,80,82,85,103,106,130,131,132,133,135,138,155,],[-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,-66,-67,-69,-71,156,-58,-75,]),'DO':([71,73,74,75,76,77,79,80,82,85,103,106,130,131,132,133,138,155,165,],[-68,-70,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,-66,-67,-69,-71,-58,-75,168,]),'MULDIVANDOP':([73,74,75,76,77,79,80,82,85,103,106,132,133,138,155,],[104,-72,-73,-74,-80,-78,-79,-57,-59,-77,-76,104,-71,-58,-75,]),'DOTDOT':([125,127,128,151,162,],[150,-26,-27,-25,167,]),'OF':([148,],[161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_head':([0,],[2,]),'program_body':([4,],[6,]),'const_declarations':([4,53,],[7,89,]),'empty':([4,7,12,29,50,53,54,55,68,77,89,99,113,129,153,168,],[9,14,20,44,85,9,92,92,44,85,14,44,85,154,44,44,]),'var_declarations':([7,89,],[12,115,]),'const_declaration':([8,],[15,]),'idlist':([10,13,33,91,120,144,],[18,22,56,121,121,121,]),'subprogram_declarations':([12,],[19,]),'var_declaration':([13,],[21,]),'compound_statement':([19,29,68,99,115,153,168,],[27,47,47,47,142,47,47,]),'subprogram':([19,],[28,]),'subprogram_head':([19,],[30,]),'const_value':([24,65,],[36,96,]),'statement_list':([29,],[42,]),'statement':([29,68,99,153,168,],[43,97,129,164,170,]),'variable':([29,48,68,69,72,78,83,84,86,87,99,100,101,102,104,105,107,137,140,153,156,168,],[45,76,45,76,76,76,76,76,112,76,45,76,76,76,76,76,76,76,158,45,76,45,]),'procedure_call':([29,68,99,153,168,],[46,46,46,46,46,]),'type':([34,94,],[57,123,]),'basic_type':([34,94,122,146,161,],[58,58,147,160,166,]),'expression':([48,69,83,84,87,105,107,137,156,],[70,98,109,110,109,109,135,157,165,]),'simple_expression':([48,69,83,84,87,100,101,105,107,137,156,],[71,71,71,71,71,130,131,71,71,71,71,]),'term':([48,69,83,84,87,100,101,102,105,107,137,156,],[73,73,73,73,73,73,73,132,73,73,73,73,]),'factor':([48,69,72,78,83,84,87,100,101,102,104,105,107,137,156,],[74,74,103,106,74,74,74,74,74,74,133,74,74,74,74,]),'number':([48,69,72,78,83,84,87,100,101,102,104,105,107,137,156,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'id_varpart':([50,77,113,],[82,82,82,]),'subprogram_body':([53,],[88,]),'formal_parameter':([54,55,],[90,93,]),'expression_list':([83,87,105,],[108,114,134,]),'variable_list':([86,],[111,]),'parameter_list':([91,],[116,]),'parameter':([91,144,],[117,159,]),'var_parameter':([91,144,],[118,118,]),'value_parameter':([91,120,144,],[119,145,119,]),'period':([95,],[124,]),'my_period_part':([95,149,150,167,],[125,162,163,169,]),'else_part':([129,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_head SEMI program_body DOT','program',4,'p_program','pparser.py',44),
  ('program_head -> PROGRAM ID','program_head',2,'p_program_head','pparser.py',48),
  ('program_head -> PROGRAM ID LPAREN idlist RPAREN','program_head',5,'p_program_head','pparser.py',49),
  ('idlist -> idlist COMMA ID','idlist',3,'p_idlist','pparser.py',57),
  ('idlist -> ID','idlist',1,'p_idlist','pparser.py',58),
  ('program_body -> const_declarations var_declarations subprogram_declarations compound_statement','program_body',4,'p_program_body','pparser.py',65),
  ('const_declarations -> CONST const_declaration SEMI','const_declarations',3,'p_const_declarations','pparser.py',69),
  ('const_declarations -> empty','const_declarations',1,'p_const_declarations','pparser.py',70),
  ('const_declaration -> ID EQU const_value','const_declaration',3,'p_const_declaration','pparser.py',77),
  ('const_declaration -> const_declaration SEMI ID EQU const_value','const_declaration',5,'p_const_declaration','pparser.py',78),
  ('const_value -> ADDOP ICONST','const_value',2,'p_const_value','pparser.py',89),
  ('const_value -> ICONST','const_value',1,'p_const_value','pparser.py',90),
  ('const_value -> CCONST','const_value',1,'p_const_value','pparser.py',91),
  ('var_declarations -> VAR var_declaration SEMI','var_declarations',3,'p_var_declarations','pparser.py',101),
  ('var_declarations -> empty','var_declarations',1,'p_var_declarations','pparser.py',102),
  ('var_declaration -> idlist COLON type','var_declaration',3,'p_var_declaration','pparser.py',109),
  ('var_declaration -> var_declaration SEMI idlist COLON type','var_declaration',5,'p_var_declaration','pparser.py',110),
  ('type -> basic_type','type',1,'p_type','pparser.py',117),
  ('type -> ARRAY LBRACK period RBRACK OF basic_type','type',6,'p_type','pparser.py',118),
  ('basic_type -> INTEGER','basic_type',1,'p_basic_type','pparser.py',125),
  ('basic_type -> REAL','basic_type',1,'p_basic_type','pparser.py',126),
  ('basic_type -> CHAR','basic_type',1,'p_basic_type','pparser.py',127),
  ('basic_type -> STRING','basic_type',1,'p_basic_type','pparser.py',128),
  ('basic_type -> BOOLEAN','basic_type',1,'p_basic_type','pparser.py',129),
  ('my_period_part -> ADDOP ICONST','my_period_part',2,'p_my_period_part','pparser.py',133),
  ('my_period_part -> ICONST','my_period_part',1,'p_my_period_part','pparser.py',134),
  ('my_period_part -> CCONST','my_period_part',1,'p_my_period_part','pparser.py',135),
  ('period -> my_period_part DOTDOT my_period_part','period',3,'p_period','pparser.py',146),
  ('period -> period COMMA my_period_part DOTDOT my_period_part','period',5,'p_period','pparser.py',147),
  ('subprogram_declarations -> subprogram_declarations subprogram SEMI','subprogram_declarations',3,'p_subprogram_declarations','pparser.py',156),
  ('subprogram_declarations -> empty','subprogram_declarations',1,'p_subprogram_declarations','pparser.py',157),
  ('subprogram -> subprogram_head SEMI subprogram_body','subprogram',3,'p_subprogram','pparser.py',164),
  ('subprogram_head -> PROCEDURE ID formal_parameter','subprogram_head',3,'p_subprogram_head','pparser.py',168),
  ('subprogram_head -> FUNCTION ID formal_parameter COLON basic_type','subprogram_head',5,'p_subprogram_head','pparser.py',169),
  ('formal_parameter -> LPAREN parameter_list RPAREN','formal_parameter',3,'p_formal_parameter','pparser.py',176),
  ('formal_parameter -> empty','formal_parameter',1,'p_formal_parameter','pparser.py',177),
  ('parameter_list -> parameter_list SEMI parameter','parameter_list',3,'p_parameter_list','pparser.py',186),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','pparser.py',187),
  ('parameter -> var_parameter','parameter',1,'p_parameter','pparser.py',194),
  ('parameter -> value_parameter','parameter',1,'p_parameter','pparser.py',195),
  ('var_parameter -> VAR value_parameter','var_parameter',2,'p_var_parameter','pparser.py',199),
  ('value_parameter -> idlist COLON basic_type','value_parameter',3,'p_value_parameter','pparser.py',203),
  ('subprogram_body -> const_declarations var_declarations compound_statement','subprogram_body',3,'p_subprogram_body','pparser.py',207),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','pparser.py',211),
  ('statement_list -> statement_list SEMI statement','statement_list',3,'p_statement_list','pparser.py',215),
  ('statement_list -> statement','statement_list',1,'p_statement_list','pparser.py',216),
  ('statement -> empty','statement',1,'p_statement','pparser.py',223),
  ('statement -> variable ASSIGN expression','statement',3,'p_statement','pparser.py',224),
  ('statement -> procedure_call','statement',1,'p_statement','pparser.py',225),
  ('statement -> compound_statement','statement',1,'p_statement','pparser.py',226),
  ('statement -> IF expression THEN statement else_part','statement',5,'p_statement','pparser.py',227),
  ('statement -> FOR ID ASSIGN expression TO expression DO statement','statement',8,'p_statement','pparser.py',228),
  ('statement -> READ LPAREN variable_list RPAREN','statement',4,'p_statement','pparser.py',229),
  ('statement -> WRITE LPAREN expression_list RPAREN','statement',4,'p_statement','pparser.py',230),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','pparser.py',250),
  ('variable_list -> variable','variable_list',1,'p_variable_list','pparser.py',251),
  ('variable -> ID id_varpart','variable',2,'p_variable','pparser.py',258),
  ('id_varpart -> LBRACK expression RBRACK','id_varpart',3,'p_id_varpart','pparser.py',265),
  ('id_varpart -> empty','id_varpart',1,'p_id_varpart','pparser.py',266),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','pparser.py',271),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','pparser.py',272),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','pparser.py',279),
  ('else_part -> empty','else_part',1,'p_else_part','pparser.py',280),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','pparser.py',285),
  ('expression_list -> expression','expression_list',1,'p_expression_list','pparser.py',286),
  ('expression -> simple_expression RELOP simple_expression','expression',3,'p_expression','pparser.py',293),
  ('expression -> simple_expression EQU simple_expression','expression',3,'p_expression','pparser.py',294),
  ('expression -> simple_expression','expression',1,'p_expression','pparser.py',295),
  ('simple_expression -> simple_expression ADDOP term','simple_expression',3,'p_simple_expression','pparser.py',302),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','pparser.py',303),
  ('term -> term MULDIVANDOP factor','term',3,'p_term','pparser.py',310),
  ('term -> factor','term',1,'p_term','pparser.py',311),
  ('factor -> number','factor',1,'p_factor','pparser.py',318),
  ('factor -> variable','factor',1,'p_factor','pparser.py',319),
  ('factor -> ID LPAREN expression_list RPAREN','factor',4,'p_factor','pparser.py',320),
  ('factor -> NOTOP factor','factor',2,'p_factor','pparser.py',321),
  ('factor -> ADDOP factor','factor',2,'p_factor','pparser.py',322),
  ('number -> ICONST','number',1,'p_number','pparser.py',331),
  ('number -> RCONST','number',1,'p_number','pparser.py',332),
  ('empty -> <empty>','empty',0,'p_empty','pparser.py',336),
]
