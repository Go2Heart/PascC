目前剩余功能：
语法分析错误处理及恢复、语义分析错误处理及恢复（含类型检查）、拓展功能（repeat,while,record类型,pointer类型,type用户自定义类型,函数嵌套定义）
ProcedureStatement还没考虑引用传参
数组声明时，下标可为const类型的标识符
拓展运算符：shr 右移,shl 左移等

稍作总结：
更新了各模块文件的组织形式（三大主模块，词法语法、语义、代码生成）
copilot帮大忙

词法+语法分析：
plexer.py:
1、修改plexer.py的STRING，避免STRING记号的二义性（又能匹配字符串又能匹配string这个类型名）。并且修改STRING的value，将两侧的''删掉，加上""
2、加入了WRITELN和READLN关键字，并在pparser.py中进行对应修改（为对应AST_node加一个True作为其儿子），从而支持readln和writeln的翻译

pparser.py（这个抽象语法树是真抽象，对着这玩意写代码，代码里都是形如node.childs[0].childs[2].child[1].type[1]...）
1、删除p_basic_type中的STRING，暂时不支持字符串变量，以避免二义性（要补上这个功能应该另外加一个token，并入STRING_KIND）
2、修改p_my_period_part，添加功能：允许声明时其下标可为正数、负数、字符常量
3、大改p_const_val，让它支持更多各种类型的常量(int,bool,double,char)，尤其是还接受字符串常量
4、删除了p_statement中不可能被归约到的产生式，以免产生困扰（这实际是PPT中产生式的错）
5、pparser判断时不能获取token的type，只能获取其value，再用isinstance区分，为啥？
6、yyb在p_id_varpart中写错了，把expression_list写成了expression
7、yyb在p_factor中漏写产生式factor->(expression)
8、为了在p_const_value中区分CCONST和STRING，加了一个归约项p_string


语义分析：
在写代码生成的时候，如果发现随意import符号表的那个py文件，会导致一个类本身被重复创建，从而导致静态成员变量被重复创建，从而导致bug。因此对整体框架做了改动，尽量不import，尤其是符号表和类型表这两个全局数据结构，只在main里import，保证其只被创建一次

Anapyzer.py
1.1、python在需要import上级目录的时候，需要sys.path.append('..')。这个..是基于运行路径的
1.2、python运行路径不等于文件路径的时候，需要sys.path.append(os.path.dirname(os.path.abspath(__file__)))

Expression.py
1、Pascal大小写不敏感，为了保留变量的大小写特性，在SymbolTable的每一项中新加了一个字段'actual_name'保存其真实名字，之后变量引用时将变量名转为小写再查符号表，然后通过符号表获取其声明时候的名字
2、Variable需要考虑如果它是一个引用传参，需要通通转为为指针形式，形如(*x)=1。故在语义分析时记录当前变量的类型是否为引用传参
3、Function需要考虑每个参数是否为引用传参，在写函数引用时也要转为取址形式，形如 &(x)。故在语义分析时记录每个传参的类型是否为引用传参。

Program.py
1、抽象语法树是真抽象，对着这玩意写代码有够累的
2、引入了logging模块，效果不错，可以调debug等级
3、为了允许输出代码一行声明多个变量进行了微调

Statements.py
1、写代码时漏了statement由procedure_call归约的情况（
2、ForStatement和ProcedureStatement在记录标识符名称的时候要基于符号表查询声明时的名字，以那个为准
3、AssignmentStatement需要查询被赋值的标识符是否为函数名，方便代码生成是将赋值语句修改为return ...
4、EmptyStatement就不输出了，复合语句实际上不要求最后一个语句以;结尾，如果很多程序的最后语句会以;结尾，这就会产生EmptyStatement。如果输出一个;就会很丑

SubPrograms.py
1、基本等同Programs.py，但是没考虑函数嵌套定义

SymbolTable.py
1、需要注意不同作用域的名称可以相同
2、由于采取无删除符号表，同一作用域在符号表中的范围并不一定是连续的（各个函数名之间会夹杂局部变量的定义）。因此在符号表中记录scan_index，保存当前作用域的各个符号的符号表下标
3、在代码生成时模拟语义分析构建符号表的过程。recover_const_var一次性恢复当前作用域内function之前的所有标识符，recover_function用于恢复函数标识符
4、重定位时获取当前最新块的块号，然后把这个块号的所有符号从哈希表里删掉

Types.py
1、功能为从一个node中提取其类型的class的实例。（将各个类型看做一个class）
2、由于是对node进行解析，所以和其他模块的耦合度非常高
3、在输出引用传参类型的时候要将x转为(*x)，用于函数声明中的引用传参

代码生成：
CodeGenerater.py
1、基于 符号表symboltable，类型表typestable，根节点program进行代码生成
2、{后缩进+1，}前缩进-1
3、只涉及statement层面的生成，更细的生成在语义分析模块
4、需要考虑数组元素取值时要减去数组在这个维度上的初值。比如a[2..4]。要把a[2]改为a[(2)-(2)]
也可以改成a[(2)-2]?##
5、处理Funtion时需要考虑传参是是否为引用传参，若是则在传参时在前面加一个&
